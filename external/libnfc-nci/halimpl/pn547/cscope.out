cscope 15 $HOME/work/barlow/external/libnfc-nci/halimpl/pn547               0000744737
	@common/phNfcCommon.h

21 #i‚de‡
PHNFCCOMMON_H


22 
	#PHNFCCOMMON_H


	)

28 
	~<phNfcSètus.h
>

29 
	~<£m≠h‹e.h
>

30 
	~<phOßlNfc_Timî.h
>

31 
	~<±hªad.h
>

32 
	~<phDÆ4Nfc_mesßgeQueueLib.h
>

33 
	~<phNfcCompId.h
>

36 
	#FW_DLL_ROOT_DIR
 "/sy°em/víd‹/fúmw¨e/"

	)

37 
	#FW_DLL_EXTENSION
 ".so"

	)

39 
	#FW_LIB_PATH
 
FW_DLL_ROOT_DIR
 "lib≤547_fw" 
FW_DLL_EXTENSION


	)

41 
	#PLATFORM_LIB_PATH
 
FW_DLL_ROOT_DIR
 "lib≤547_fw_∂©f‹m" 
FW_DLL_EXTENSION


	)

43 
	#PKU_LIB_PATH
 
FW_DLL_ROOT_DIR
 "lib≤547_fw_pku" 
FW_DLL_EXTENSION


	)

46 
	#NXP_MW_VERSION_MAJ
 (3U)

	)

47 
	#NXP_MW_VERSION_MIN
 (1U)

	)

55 
	#CLK_SRC_UNDEF
 0

	)

56 
	#CLK_SRC_XTAL
 1

	)

57 
	#CLK_SRC_PLL
 2

	)

58 
	#CLK_SRC_PADDIRECT
 3

	)

61 
	#NXP_SYS_CLK_SRC_SEL
 
CLK_SRC_PLL


	)

70 
	#CLK_FREQ_UNDEF
 0

	)

71 
	#CLK_FREQ_13MHZ
 1

	)

72 
	#CLK_FREQ_19_2MHZ
 2

	)

73 
	#CLK_FREQ_24MHZ
 3

	)

74 
	#CLK_FREQ_26MHZ
 4

	)

75 
	#CLK_FREQ_38_4MHZ
 5

	)

76 
	#CLK_FREQ_52MHZ
 6

	)

78 
	#NXP_SYS_CLK_FREQ_SEL
 
CLK_FREQ_19_2MHZ


	)

80 
	#CLK_TO_CFG_DEF
 1

	)

81 
	#CLK_TO_CFG_MAX
 25

	)

85 
	sphOßlNfc_C⁄fig


87 
uöt8_t
 *
	mpLogFûe
;

88 
uöçå_t
 
	mdwCÆlbackThªadId
;

89 }
	tphOßlNfc_C⁄fig_t
, *
	tµhOßlNfc_C⁄fig_t
 ;

97 (*
	tµhOßlNfc_De„rFuncPoöãr_t
) (*);

103 
	sphOßlNfc_De„ªdCÆlInfo


105 
µhOßlNfc_De„rFuncPoöãr_t
 
pDe„ªdCÆl
;

106 *
pP¨am
;

107 }
	tphOßlNfc_De„ªdCÆlInfo_t
;

115 
eTimîIdÀ
 = 0,

116 
eTimîRu¬ög
 = 1,

117 
eTimîSt›≥d
 = 2

118 }
	tphOßlNfc_TimîSèãs_t
;

123 
	sphOßlNfc_TimîH™dÀ


125 
uöt32_t
 
TimîId
;

126 
timî_t
 
hTimîH™dÀ
;

127 
µhOßlNfc_TimîCÆlbck_t
 
Aµliˇti⁄_ˇŒback
;

128 *
pC⁄ãxt
;

129 
phOßlNfc_TimîSèãs_t
 
eSèã
;

130 
phLibNfc_Mesßge_t
 
tOßlMesßge
;

131 
phOßlNfc_De„ªdCÆlInfo_t
 
tDe„ªdCÆlInfo
;

132 }
	tphOßlNfc_TimîH™dÀ_t
,*
	tµhOßlNfc_TimîH™dÀ_t
;

	@common/phNfcCompId.h

21 #i‚de‡
PHNFCCOMPID_H


22 
	#PHNFCCOMPID_H


	)

40 
	#CID_NFC_NONE
 0x00

	)

41 
	#CID_NFC_TML
 0x01

	)

42 
	#CID_NFC_LLC
 0x07

	)

43 
	#CID_NFC_NCI
 0x08

	)

44 
	#CID_NFC_DNLD
 0x09

	)

45 
	#CID_NFC_HAL
 0x10

	)

46 
	#CID_NFC_OSAL
 
CID_NFC_NONE


	)

47 
	#CID_FRI_NFC_OVR_HAL
 0x20

	)

48 
	#CID_FRI_NFC_NDEF_RECORD
 0x22

	)

49 
	#CID_FRI_NFC_NDEF_MAP
 0x23

	)

50 
	#CID_FRI_NFC_NDEF_REGISTRY
 0x24

	)

51 
	#CID_FRI_NFC_AUTO_DEV_DIS
 0x25

	)

52 
	#CID_FRI_NFC_NDEF_SMTCRDFMT
 0x26

	)

53 
	#CID_NFC_LIB
 0x30

	)

54 
	#CID_MAX_VALUE
 0xF0

	)

55 
	#CID_FRI_NFC_LLCP
 0x40

	)

56 
	#CID_FRI_NFC_LLCP_TRANSPORT
 0x50

	)

57 
	#CID_FRI_NFC_LLCP_MAC
 0x60

	)

	@common/phNfcStatus.h

21 #i‚de‡
PHNFCSTATUS_H


22 
	#PHNFCSTATUS_H


	)

24 
	~<phNfcTy≥s.h
>

27 
	#PHNFCSTSHL8
 (8U)

	)

29 
	#PHNFCSTBLOWER
 ((
NFCSTATUS
)(0x00FFU))

	)

45 
	#PHNFCSTVAL
(
phNfcCompID
, 
phNfcSètus
) \

46 –((
phNfcSètus
Ë=(
NFCSTATUS_SUCCESS
)) ? (NFCSTATUS_SUCCESS) : \

47 –(((
NFCSTATUS
)(
phNfcSètus
)Ë& (
PHNFCSTBLOWER
)) | \

48 (((
uöt16_t
)(
phNfcCompID
)Ë<< (
PHNFCSTSHL8
)ËË)

	)

54 
	#PHNFCSTATUS
(
phNfcSètus
Ë(’hNfcSètusË& 0x00FFU)

	)

55 
	#PHNFCCID
(
phNfcSètus
Ë((’hNfcSètusË& 0xFF00U)>>8)

	)

71 
	#NFCSTATUS_SUCCESS
 (0x0000)

	)

76 
	#NFCSTATUS_OK
 (
NFCSTATUS_SUCCESS
)

	)

81 
	#NFCSTATUS_INVALID_PARAMETER
 (0x0001)

	)

86 
	#NFCSTATUS_BUFFER_TOO_SMALL
 (0x0003)

	)

91 
	#NFCSTATUS_INVALID_DEVICE
 (0x0006)

	)

97 
	#NFCSTATUS_MORE_INFORMATION
 (0x0008)

	)

102 
	#NFCSTATUS_RF_TIMEOUT
 (0x0009)

	)

107 
	#NFCSTATUS_RF_ERROR
 (0x000A)

	)

112 
	#NFCSTATUS_INSUFFICIENT_RESOURCES
 (0x000C)

	)

118 
	#NFCSTATUS_PENDING
 (0x000D)

	)

124 
	#NFCSTATUS_BOARD_COMMUNICATION_ERROR
 (0x000F)

	)

129 
	#NFCSTATUS_INVALID_STATE
 (0x0011)

	)

135 
	#NFCSTATUS_NOT_INITIALISED
 (0x0031)

	)

141 
	#NFCSTATUS_ALREADY_INITIALISED
 (0x0032)

	)

147 
	#NFCSTATUS_FEATURE_NOT_SUPPORTED
 (0x0033)

	)

152 
	#NFCSTATUS_NOT_REGISTERED
 (0x0034)

	)

158 
	#NFCSTATUS_ALREADY_REGISTERED
 (0x0035)

	)

162 
	#NFCSTATUS_MULTIPLE_PROTOCOLS
 (0x0036)

	)

167 
	#NFCSTATUS_MULTIPLE_TAGS
 (0x0037)

	)

172 
	#NFCSTATUS_DESELECTED
 (0x0038)

	)

177 
	#NFCSTATUS_RELEASED
 (0x0039)

	)

182 
	#NFCSTATUS_NOT_ALLOWED
 (0x003A)

	)

187 
	#NFCSTATUS_BUSY
 (0x006F)

	)

193 
	#NFCSTATUS_INVALID_REMOTE_DEVICE
 (0x001D)

	)

196 
	#NFCSTATUS_READ_FAILED
 (0x0014)

	)

201 
	#NFCSTATUS_WRITE_FAILED
 (0x0015)

	)

204 
	#NFCSTATUS_NO_NDEF_SUPPORT
 (0x0016)

	)

207 
	#NFCSTATUS_EOF_NDEF_CONTAINER_REACHED
 (0x001A)

	)

210 
	#NFCSTATUS_INVALID_RECEIVE_LENGTH
 (0x001B)

	)

213 
	#NFCSTATUS_INVALID_FORMAT
 (0x001C)

	)

217 
	#NFCSTATUS_INSUFFICIENT_STORAGE
 (0x001F)

	)

220 
	#NFCSTATUS_FORMAT_ERROR
 (0x0023)

	)

223 
	#NFCSTATUS_CREDIT_TIMEOUT
 (0x0024)

	)

228 
	#NFCSTATUS_RESPONSE_TIMEOUT
 (0x0025)

	)

233 
	#NFCSTATUS_ALREADY_CONNECTED
 (0x0026)

	)

238 
	#NFCSTATUS_ANOTHER_DEVICE_CONNECTED
 (0x0027)

	)

243 
	#NFCSTATUS_SINGLE_TAG_ACTIVATED
 (0x0028)

	)

248 
	#NFCSTATUS_SINGLE_TAG_DISCOVERED
 (0x0029)

	)

253 
	#NFCSTATUS_SECURE_ELEMENT_ACTIVATED
 (0x0028)

	)

258 
	#NFCSTATUS_UNKNOWN_ERROR
 (0x00FE)

	)

263 
	#NFCSTATUS_FAILED
 (0x00FF)

	)

268 
	#NFCSTATUS_CMD_ABORTED
 (0x0002)

	)

273 
	#NFCSTATUS_NO_TARGET_FOUND
 (0x000A)

	)

276 
	#NFCSTATUS_NO_DEVICE_CONNECTED
 (0x000B)

	)

279 
	#NFCSTATUS_EXTERNAL_RF_DETECTED
 (0x000E)

	)

284 
	#NFCSTATUS_MSG_NOT_ALLOWED_BY_FSM
 (0x0010)

	)

289 
	#NFCSTATUS_ACCESS_DENIED
 (0x001E)

	)

292 
	#NFCSTATUS_NODE_NOT_FOUND
 (0x0017)

	)

295 
	#NFCSTATUS_SMX_BAD_STATE
 (0x00F0)

	)

299 
	#NFCSTATUS_ABORT_FAILED
 (0x00F2)

	)

305 
	#NFCSTATUS_REG_OPMODE_NOT_SUPPORTED
 (0x00F5)

	)

310 
	#NFCSTATUS_SHUTDOWN
 (0x0091)

	)

315 
	#NFCSTATUS_TARGET_LOST
 (0x0092)

	)

320 
	#NFCSTATUS_REJECTED
 (0x0093)

	)

325 
	#NFCSTATUS_TARGET_NOT_CONNECTED
 (0x0094)

	)

330 
	#NFCSTATUS_INVALID_HANDLE
 (0x0095)

	)

335 
	#NFCSTATUS_ABORTED
 (0x0096)

	)

340 
	#NFCSTATUS_COMMAND_NOT_SUPPORTED
 (0x0097)

	)

345 
	#NFCSTATUS_NON_NDEF_COMPLIANT
 (0x0098)

	)

350 
	#NFCSTATUS_NOT_ENOUGH_MEMORY
 (0x001F)

	)

355 
	#NFCSTATUS_INCOMING_CONNECTION
 (0x0045)

	)

360 
	#NFCSTATUS_CONNECTION_SUCCESS
 (0x0046)

	)

365 
	#NFCSTATUS_CONNECTION_FAILED
 (0x0047)

	)

	@common/phNfcTypes.h

17 #i‚de‡
PHNFCTYPES_H


18 
	#PHNFCTYPES_H


	)

20 
	~<°döt.h
>

21 
	~<°rög.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<uni°d.h
>

26 #i‚de‡
TRUE


27 
	#TRUE
 (0x01Ë

	)

29 #i‚de‡
FALSE


30 
	#FALSE
 (0x00Ë

	)

32 
uöt8_t
 
	tutf8_t
;

33 
uöt8_t
 
	tboﬁ_t
;

34 
uöt16_t
 
	tNFCSTATUS
;

35 
	#STATIC
 

	)

37 
	#PHNFC_MAX_UID_LENGTH
 0x0AU

	)

38 
	#PHNFC_MAX_ATR_LENGTH
 0x30U

	)

39 
	#PHNFC_NFCID_LENGTH
 0x0AU

	)

40 
	#PHNFC_ATQA_LENGTH
 0x02U

	)

45 
	sphNfc_sD©a


47 
uöt8_t
 *
	mbuf„r
;

48 
uöt32_t
 
	mÀngth
;

49 } 
	tphNfc_sD©a_t
;

57 
	mENUM_LINK_TYPE_COM1
,

58 
	mENUM_LINK_TYPE_COM2
,

59 
	mENUM_LINK_TYPE_COM3
,

60 
	mENUM_LINK_TYPE_COM4
,

61 
	mENUM_LINK_TYPE_COM5
,

62 
	mENUM_LINK_TYPE_COM6
,

63 
	mENUM_LINK_TYPE_COM7
,

64 
	mENUM_LINK_TYPE_COM8
,

65 
	mENUM_LINK_TYPE_I2C
,

66 
	mENUM_LINK_TYPE_SPI
,

67 
	mENUM_LINK_TYPE_USB
,

68 
	mENUM_LINK_TYPE_TCP
,

69 
	mENUM_LINK_TYPE_NB


70 } 
	tphLibNfc_eC⁄figLökTy≥
;

76 
	#PH_LIBNFC_DEFERREDCALL_MSG
 (0x311)

	)

83 (*
	tµhLibNfc_De„ºedCÆlback_t
) (*);

90 *
	tµhLibNfc_De„ºedP¨amëî_t
;

97 
	sphLibNfc_sC⁄fig


99 
uöt8_t
 *
pLogFûe
;

101 
phLibNfc_eC⁄figLökTy≥
 
nLökTy≥
;

103 
uöçå_t
 
nClõ¡Id
;

104 } 
	tphLibNfc_sC⁄fig_t
, *
	tµhLibNfc_sC⁄fig_t
;

110 
	sphLibNfc_Mesßge


112 
uöt32_t
 
eMsgTy≥
;

113 * 
pMsgD©a
;

114 
uöt32_t
 
Size
;

115 } 
	tphLibNfc_Mesßge_t
,*
	tµhLibNfc_Mesßge_t
;

122 
	sphLibNfc_De„ºedCÆl


124 
µhLibNfc_De„ºedCÆlback_t
 
pCÆlback
;

125 
µhLibNfc_De„ºedP¨amëî_t
 
pP¨amëî
;

126 } 
	tphLibNfc_De„ºedCÆl_t
;

131 
	sphNfc_sSupPrŸocﬁ


133 
MiÁªUL
 : 1;

134 
MiÁªStd
 : 1;

135 
ISO14443_4A
 : 1;

136 
ISO14443_4B
 : 1;

137 
ISO15693
 : 1;

138 
Fñiˇ
 : 1;

139 
NFC
 : 1;

140 
Jewñ
 : 1;

141 
Desfúe
 : 1;

143 
Kovio
 : 1;

144 
HID
 : 1;

145 
B¥ime
 : 1;

146 
EPCGEN2
 : 1;

147 }
	tphNfc_sSupPrŸocﬁ_t
;

153 
	ephNfc_eMiÁªCmdLi°


155 
phNfc_eMiÁªRaw
 = 0x00U,

156 
phNfc_eMiÁªAuthítA
 = 0x60U,

157 
phNfc_eMiÁªAuthítB
 = 0x61U,

158 
phNfc_eMiÁªRód16
 = 0x30U,

159 
phNfc_eMiÁªRód
 = 0x30U,

160 
phNfc_eMiÁªWrôe16
 = 0xA0U,

161 
phNfc_eMiÁªWrôe4
 = 0xA2U,

162 
phNfc_eMiÁªInc
 = 0xC1U,

163 
phNfc_eMiÁªDec
 = 0xC0U,

164 
phNfc_eMiÁªTøns„r
 = 0xB0U,

165 
phNfc_eMiÁªRe°‹e
 = 0xC2U,

166 
phNfc_eMiÁªRódSe˘‹
 = 0x38U,

167 
phNfc_eMiÁªWrôeSe˘‹
= 0xA8U,

169 
phNfc_eMiÁªRódN
 = 0x01,

170 
phNfc_eMiÁªWrôeN
 = 0x02,

171 
phNfc_eMiÁªSe˘‹Sñ
 = 0x03,

172 
phNfc_eMiÁªAuth
 = 0x04,

173 
phNfc_eMiÁªProxCheck
 = 0x05,

174 
phNfc_eMiÁªInvÆidCmd
 = 0xFFU

175 } 
	tphNfc_eMiÁªCmdLi°_t
;

180 
	sphNfc_sIso14443AInfo


182 
uöt8_t
 
Uid
[
PHNFC_MAX_UID_LENGTH
];

184 
uöt8_t
 
UidLígth
;

185 
uöt8_t
 
AµD©a
[
PHNFC_MAX_ATR_LENGTH
];

188 
uöt8_t
 
AµD©aLígth
;

189 
uöt8_t
 
Sak
;

191 
uöt8_t
 
AtqA
[
PHNFC_ATQA_LENGTH
];

193 
uöt8_t
 
MaxD©aR©e
;

195 
uöt8_t
 
Fwi_Sfgt
;

197 }
	tphNfc_sIso14443AInfo_t
;

200 
	uphNfc_uRemŸeDevInfo


202 
phNfc_sIso14443AInfo_t
 
Iso14443A_Info
;

203 }
	tphNfc_uRemŸeDevInfo_t
;

212 
	ephNfc_eRFDevTy≥


214 
phNfc_eUnknown_DevTy≥
 = 0x00U,

216 
phNfc_eISO14443_A_PCD
,

217 
phNfc_eISO14443_B_PCD
,

218 
phNfc_eISO14443_BPrime_PCD
,

219 
phNfc_eFñiˇ_PCD
,

220 
phNfc_eJewñ_PCD
,

221 
phNfc_eISO15693_PCD
,

222 
phNfc_eEpcGí2_PCD
,

223 
phNfc_ePCD_DevTy≥
,

225 
phNfc_ePICC_DevTy≥
,

226 
phNfc_eISO14443_A_PICC
,

227 
phNfc_eISO14443_4A_PICC
,

228 
phNfc_eISO14443_3A_PICC
,

229 
phNfc_eMiÁª_PICC
,

230 
phNfc_eISO14443_B_PICC
,

231 
phNfc_eISO14443_4B_PICC
,

232 
phNfc_eISO14443_BPrime_PICC
,

233 
phNfc_eFñiˇ_PICC
,

234 
phNfc_eJewñ_PICC
,

235 
phNfc_eISO15693_PICC
,

236 
phNfc_eEpcGí2_PICC
,

238 
phNfc_eNfcIP1_T¨gë
,

239 
phNfc_eNfcIP1_Inôüt‹
,

241 
phNfc_eInvÆid_DevTy≥


243 }
	tphNfc_eRFDevTy≥_t
;

249 
phNfc_eRFDevTy≥_t
 
	tphNfc_eRemDevTy≥_t
;

250 
phNfc_eRemDevTy≥_t
 
	tphHÆ_eRemDevTy≥_t
;

256 
	uphNfc_uComm™d


258 
phNfc_eMiÁªCmdLi°_t
 
MfCmd
;

259 }
	tphNfc_uCmdLi°_t
;

265 
	sphNfc_sRemŸeDevInf‹m©i⁄


267 
uöt8_t
 
Sessi⁄O≥√d
;

270 
phNfc_eRemDevTy≥_t
 
RemDevTy≥
;

271 
phNfc_uRemŸeDevInfo_t
 
RemŸeDevInfo
;

272 }
	tphNfc_sRemŸeDevInf‹m©i⁄_t
;

279 
	sphNfc_sTøns˚iveInfo


281 
phNfc_uCmdLi°_t
 
cmd
;

282 
uöt8_t
 
addr
;

283 
uöt8_t
 
NumBlock
;

285 
uöt16_t
 *
Sîvi˚CodeLi°
;

286 
uöt16_t
 *
Blockli°
;

287 
phNfc_sD©a_t
 
sSídD©a
;

288 
phNfc_sD©a_t
 
sRecvD©a
;

290 
uöt32_t
 
dwW‹dPå
;

291 
uöt8_t
 
bW‹dPåLí
;

297 
uöt8_t
 
bW‹dCou¡
;

298 }
	tphNfc_sTøns˚iveInfo_t
;

300 
	#UNUSED
(
X
Ë()X;

	)

	@dnld/phDnldNfc.c

23 
	~<phD∆dNfc_I¡î«l.h
>

24 
	~<phTmlNfc.h
>

25 
	~<phNxpLog.h
>

26 
	~<dlf˙.h
>

28 *
	gpFwLibH™dÀ
;

29 
uöt16_t
 
	gwMwVî
 = 0;

30 
uöt16_t
 
	gwFwVî
 = 0;

31 
µhD∆dNfc_DlC⁄ãxt_t
 
	ggµhD∆dC⁄ãxt
 = 
NULL
;

32 
µhD∆dNfc_R•Cb_t
 
	gU£rCb
;

33 * 
	gU£rCtxt
;

34 #unde‡
EEPROM_Ród_Mem_IMP


37 
phD∆dNfc_RódCom∂ëe
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

55 
NFCSTATUS
 
	$phD∆dNfc_Re£t
(
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

57 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

59 if((
NULL
 =
pNŸify
) ||

60 (
NULL
 =
pC⁄ãxt
)

63 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

64 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

68 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

70 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

71 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

75 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTN⁄e
;

76 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_RESET
;

77 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
NULL
;

78 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
) = 0;

79 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
NULL
;

80 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = 0;

82 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítRe£t
);

84 if(
NFCSTATUS_PENDING
 =
wSètus
)

86 
	`NXPLOG_FWDNLD_D
("Reset Request submitted successfully");

87 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

88 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

92 
	`NXPLOG_FWDNLD_E
("Reset Request Failed!!");

97  
wSètus
;

98 
	}
}

118 
NFCSTATUS
 
	$phD∆dNfc_GëVîsi⁄
(
µhD∆dNfc_Buff_t
 
pVîsi⁄Info
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

120 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

122 if((
NULL
 =
pVîsi⁄Info
Ë|| (NULL =
pNŸify
) ||

123 (
NULL
 =
pC⁄ãxt
)

126 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

127 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

131 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

133 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

134 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

138 if((
NULL
 !
pVîsi⁄Info
->
pBuff
Ë&& (0 !pVîsi⁄Info->
wLí
))

140 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
pVîsi⁄Info
->pBuff;

141 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
pVîsi⁄Info
->wLen;

142 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTN⁄e
;

143 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_GETVERSION
;

144 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
NULL
;

145 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = 0;

147 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítGëVî
);

149 if(
NFCSTATUS_PENDING
 =
wSètus
)

151 
	`NXPLOG_FWDNLD_D
("GetVersion Request submitted successfully");

152 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

153 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

157 
	`NXPLOG_FWDNLD_E
("GetVersion Request Failed!!");

162 
	`NXPLOG_FWDNLD_E
("Invalid Buff Parameters!!");

163 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

168  
wSètus
;

169 
	}
}

188 
NFCSTATUS
 
	$phD∆dNfc_GëSessi⁄Sèã
(
µhD∆dNfc_Buff_t
 
pSessi⁄
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

190 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

192 if((
NULL
 =
pSessi⁄
Ë|| (NULL =
pNŸify
) ||

193 (
NULL
 =
pC⁄ãxt
)

196 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

197 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

201 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

203 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

204 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

208 if((
NULL
 !
pSessi⁄
->
pBuff
Ë&& (0 !pSessi⁄->
wLí
))

210 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
pSessi⁄
->pBuff;

211 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
pSessi⁄
->wLen;

212 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTN⁄e
;

213 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_GETSESSIONSTATE
;

214 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
NULL
;

215 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = 0;

217 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítGëSe¢St
);

219 if(
NFCSTATUS_PENDING
 =
wSètus
)

221 
	`NXPLOG_FWDNLD_D
("GetSessionState Request submitted successfully");

222 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

223 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

227 
	`NXPLOG_FWDNLD_E
("GetSessionState Request Failed!!");

232 
	`NXPLOG_FWDNLD_E
("Invalid Buff Parameters!!");

233 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

238  
wSètus
;

239 
	}
}

262 
NFCSTATUS
 
	$phD∆dNfc_CheckI¡egrôy
(
uöt8_t
 
bChùVî
, 
µhD∆dNfc_Buff_t
 
pCRCD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

264 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

266 if((
NULL
 =
pNŸify
) ||

267 (
NULL
 =
pC⁄ãxt
)

270 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

271 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

275 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

277 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

278 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

282 if((
PHDNLDNFC_HWVER_MRA2_1
 =
bChùVî
Ë|| (
PHDNLDNFC_HWVER_MRA2_2
 == bChipVer))

284 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_ChkI¡g
;

288 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTN⁄e
;

291 if((
NULL
 !
pCRCD©a
->
pBuff
Ë&& (0 !pCRCD©a->
wLí
))

293 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
pCRCD©a
->pBuff;

294 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
pCRCD©a
->wLen;

295 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_CHECKINTEGRITY
;

296 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
NULL
;

297 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = 0;

299 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítI¡egChk
);

301 if(
NFCSTATUS_PENDING
 =
wSètus
)

303 
	`NXPLOG_FWDNLD_D
("CheckIntegrity Request submitted successfully");

304 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

305 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

309 
	`NXPLOG_FWDNLD_E
("CheckIntegrity Request Failed!!");

314 
	`NXPLOG_FWDNLD_E
("Invalid Buff Parameters!!");

315 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

320  
wSètus
;

321 
	}
}

339 
NFCSTATUS
 
	$phD∆dNfc_RódLog
(
µhD∆dNfc_Buff_t
 
pD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

341 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

343 if((
NULL
 =
pNŸify
Ë|| (NULL =
pD©a
) ||

344 (
NULL
 =
pC⁄ãxt
)

347 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

348 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

352 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

354 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

355 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

359 if((
NULL
 !
pD©a
->
pBuff
Ë&& (0 !pD©a->
wLí
))

361 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_READ
;

362 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTRód
;

363 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
dwAddr
Ë
PHDNLDNFC_EEPROM_LOG_START_ADDR
;

364 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
pD©a
->pBuff;

365 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
pD©a
->wLen;

366 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
NULL
;

367 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = 0;

369 
	`mem£t
(&(
gµhD∆dC⁄ãxt
->
tRWInfo
),0,(gpphDnldContext->tRWInfo));

371 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítRód
);

373 if(
NFCSTATUS_PENDING
 =
wSètus
)

375 
	`NXPLOG_FWDNLD_D
("Read Request submitted successfully");

376 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

377 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

381 
	`NXPLOG_FWDNLD_E
("Read Request Failed!!");

386 
	`NXPLOG_FWDNLD_E
("Invalid Buff Parameters!!");

387 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

392  
wSètus
;

393 
	}
}

413 
NFCSTATUS
 
	$phD∆dNfc_Wrôe
(
boﬁ_t
 
bRecovîSeq
, 
µhD∆dNfc_Buff_t
 
pD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

415 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

416 
uöt8_t
 *
pImgPå
 = 
NULL
;

417 
uöt16_t
 
wLí
 = 0;

418 
phD∆dNfc_Buff_t
 
tImgBuff
;

420 if((
NULL
 =
pNŸify
Ë|| (NULL =
pC⁄ãxt
))

422 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

423 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

427 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

429 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

430 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

434 if(
NULL
 !
pD©a
)

436 
pImgPå
 = 
pD©a
->
pBuff
;

437 
wLí
 = 
pD©a
->wLen;

441 if(
FALSE
 =
bRecovîSeq
)

444 
pImgPå
 = (
uöt8_t
 *)
gµhD∆dC⁄ãxt
->
nxp_nfc_fw
;

445 
wLí
 = 
gµhD∆dC⁄ãxt
->
nxp_nfc_fw_Àn
;

450 if(
PH_DL_STATUS_PLL_ERROR
 =(
gµhD∆dC⁄ãxt
->
tLa°Sètus
))

452 
wSètus
 = 
	`phD∆dNfc_LﬂdRecInfo
();

454 if(
PH_DL_STATUS_SIGNATURE_ERROR
 =(
gµhD∆dC⁄ãxt
->
tLa°Sètus
))

456 
wSètus
 = 
	`phD∆dNfc_LﬂdPKInfo
();

462 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

464 
pImgPå
 = (
uöt8_t
 *)
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp
;

465 
wLí
 = 
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp_Àn
;

469 
	`NXPLOG_FWDNLD_E
("Platform Recovery ImageÉxtraction Failed!!");

470 
pImgPå
 = 
NULL
;

471 
wLí
 = 0;

476 if((
NULL
 !
pImgPå
Ë&& (0 !
wLí
))

478 
tImgBuff
.
pBuff
 = 
pImgPå
;

479 
tImgBuff
.
wLí
 = wLen;

481 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_WRITE
;

482 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTWrôe
;

483 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
NULL
;

484 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
) = 0;

485 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
pImgPå
;

486 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = wLen;

487 (
gµhD∆dC⁄ãxt
->
bRe£ndLa°Føme
Ë
FALSE
;

489 
	`mem£t
(&(
gµhD∆dC⁄ãxt
->
tRWInfo
),0,(gpphDnldContext->tRWInfo));

490 (
gµhD∆dC⁄ãxt
->
tRWInfo
.
bFú°WrReq
Ë
TRUE
;

492 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítWrôe
);

494 if(
NFCSTATUS_PENDING
 =
wSètus
)

496 
	`NXPLOG_FWDNLD_D
("Write Request submitted successfully");

497 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

498 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

502 
	`NXPLOG_FWDNLD_E
("Write Request Failed!!");

507 
	`NXPLOG_FWDNLD_E
("Download Image PrimitivesÉxtraction failed!!");

508 
wSètus
 = 
NFCSTATUS_FAILED
;

513  
wSètus
;

514 
	}
}

533 
NFCSTATUS
 
	$phD∆dNfc_Log
(
µhD∆dNfc_Buff_t
 
pD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

535 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

537 if((
NULL
 =
pNŸify
Ë|| (NULL =
pD©a
) ||

538 (
NULL
 =
pC⁄ãxt
)

541 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

542 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

546 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

548 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

549 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

553 if((
NULL
 !(
pD©a
->
pBuff
)Ë&& ((0 !’D©a->
wLí
Ë&& (
PHDNLDNFC_MAX_LOG_SIZE
 >= (pData->wLen)))))

555 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_LOG
;

556 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTLog
;

557 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
NULL
;

558 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
) = 0;

559 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë(
pD©a
->pBuff);

560 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
Ë(
pD©a
->wLen);

562 
	`mem£t
(&(
gµhD∆dC⁄ãxt
->
tRWInfo
),0,(gpphDnldContext->tRWInfo));

564 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítLog
);

566 if(
NFCSTATUS_PENDING
 =
wSètus
)

568 
	`NXPLOG_FWDNLD_D
("Log Request submitted successfully");

569 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

570 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

574 
	`NXPLOG_FWDNLD_E
("Log Request Failed!!");

579 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters for Log!!");

580 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

585  
wSètus
;

586 
	}
}

606 
NFCSTATUS
 
	$phD∆dNfc_F‹˚
(
µhD∆dNfc_Buff_t
 
pI≈uts
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

608 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

609 
uöt8_t
 
bClkSrc
 = 0x00,
bClkFªq
 = 0x00;

610 
uöt8_t
 
bPldVÆ
[3] = {0x11,0x00,0x00};

612 if((
NULL
 =
pNŸify
Ë|| (NULL =
pC⁄ãxt
))

614 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

615 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

619 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

621 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

622 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

626 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_FORCE
;

627 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTF‹˚
;

628 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
NULL
;

629 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
) = 0;

631 if((0 !(
pI≈uts
->
wLí
)Ë|| (
NULL
 !’I≈uts->
pBuff
)))

633 if(
CLK_SRC_XTAL
 =(
pI≈uts
->
pBuff
[0]))

635 
bClkSrc
 = 
phD∆dNfc_ClkSrcXèl
;

637 if(
CLK_SRC_PLL
 =(
pI≈uts
->
pBuff
[0]))

639 
bClkSrc
 = 
phD∆dNfc_ClkSrcPLL
;

640 if(
CLK_FREQ_13MHZ
 =(
pI≈uts
->
pBuff
[1]))

642 
bClkFªq
 = 
phD∆dNfc_ClkFªq_13Mhz
;

644 if(
CLK_FREQ_19_2MHZ
 =(
pI≈uts
->
pBuff
[1]))

646 
bClkFªq
 = 
phD∆dNfc_ClkFªq_19_2Mhz
;

648 if(
CLK_FREQ_24MHZ
 =(
pI≈uts
->
pBuff
[1]))

650 
bClkFªq
 = 
phD∆dNfc_ClkFªq_24Mhz
;

652 if(
CLK_FREQ_26MHZ
 =(
pI≈uts
->
pBuff
[1]))

654 
bClkFªq
 = 
phD∆dNfc_ClkFªq_26Mhz
;

656 if(
CLK_FREQ_38_4MHZ
 =(
pI≈uts
->
pBuff
[1]))

658 
bClkFªq
 = 
phD∆dNfc_ClkFªq_38_4Mhz
;

660 if(
CLK_FREQ_52MHZ
 =(
pI≈uts
->
pBuff
[1]))

662 
bClkFªq
 = 
phD∆dNfc_ClkFªq_52Mhz
;

666 
	`NXPLOG_FWDNLD_E
("Invalid Clk Frequency !! Using default value of 19.2Mhz..");

667 
bClkFªq
 = 
phD∆dNfc_ClkFªq_19_2Mhz
;

671 if(
CLK_SRC_PADDIRECT
 =(
pI≈uts
->
pBuff
[0]))

673 
bClkSrc
 = 
phD∆dNfc_ClkSrcPad
;

677 
	`NXPLOG_FWDNLD_E
("Invalid Clk src !! Using default value of PLL..");

678 
bClkSrc
 = 
phD∆dNfc_ClkSrcPLL
;

681 
bPldVÆ
[0] = 0U;

682 
bPldVÆ
[0] = ((
bClkSrc
 << 3UË| 
bClkFªq
);

686 
	`NXPLOG_FWDNLD_E
("Clk src inputsÇotÖrovided!! Using default values..");

689 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
bPldVÆ
;

690 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
Ë(
bPldVÆ
);

692 
	`mem£t
(&(
gµhD∆dC⁄ãxt
->
tRWInfo
),0,(gpphDnldContext->tRWInfo));

694 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítF‹˚
);

696 if(
NFCSTATUS_PENDING
 =
wSètus
)

698 
	`NXPLOG_FWDNLD_D
("Force Command Request submitted successfully");

699 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

700 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

704 
	`NXPLOG_FWDNLD_E
("Force Command Request Failed!!");

709  
wSètus
;

710 
	}
}

723 
	$phD∆dNfc_SëHwDevH™dÀ
()

725 
µhD∆dNfc_DlC⁄ãxt_t
 
psD∆dC⁄ãxt
 = 
NULL
;

727 if(
NULL
 =
gµhD∆dC⁄ãxt
)

729 
	`NXPLOG_FWDNLD_D
("Allocating Mem for Dnld Context..");

731 
psD∆dC⁄ãxt
 = (
µhD∆dNfc_DlC⁄ãxt_t
)

732 
	`mÆloc
((
phD∆dNfc_DlC⁄ãxt_t
));

734 if(
psD∆dC⁄ãxt
 !
NULL
)

736 (Ë
	`mem£t
((*)
psD∆dC⁄ãxt
,0,

737 (
phD∆dNfc_DlC⁄ãxt_t
));

739 
gµhD∆dC⁄ãxt
 = 
psD∆dC⁄ãxt
;

745 
	`NXPLOG_FWDNLD_E
("Error Allocating Mem for Dnld Context..")

750 (Ë
	`mem£t
((*)
gµhD∆dC⁄ãxt
,0,

751 (
phD∆dNfc_DlC⁄ãxt_t
));

755 
	}
}

768 
	$phD∆dNfc_ReSëHwDevH™dÀ
()

770 i‡(
gµhD∆dC⁄ãxt
 !
NULL
)

772 
	`NXPLOG_FWDNLD_E
("Freeing Mem for Dnld Context..")

773 
	`‰ì
(
gµhD∆dC⁄ãxt
);

774 
gµhD∆dC⁄ãxt
 = 
NULL
;

776 
	}
}

798 
NFCSTATUS
 
	$phD∆dNfc_RawReq
(
µhD∆dNfc_Buff_t
 
pFømeD©a
,ÖphD∆dNfc_Buff_à
pR•D©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

800 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

802 if((
NULL
 =
pFømeD©a
Ë|| (NULL =
pNŸify
Ë|| (NULL =
pR•D©a
) ||

803 (
NULL
 =
pC⁄ãxt
)

806 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

807 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

811 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

813 
	`NXPLOG_FWDNLD_E
("Raw Cmd Request in Progress..Cannot Continue!!");

814 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

818 if(((
NULL
 !
pFømeD©a
->
pBuff
Ë&& (0 !pFømeD©a->
wLí
)) &&

819 ((
NULL
 !
pR•D©a
->
pBuff
Ë&& (0 !pR•D©a->
wLí
))

822 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
pR•D©a
->pBuff;

823 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
pR•D©a
->wLen;

824 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTRaw
;

825 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_NONE
;

826 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
pFømeD©a
->pBuff;

827 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
Ë
pFømeD©a
->wLen;

829 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítRaw
);

831 if(
NFCSTATUS_PENDING
 =
wSètus
)

833 
	`NXPLOG_FWDNLD_D
("RawFrame Request submitted successfully");

834 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

835 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

839 
	`NXPLOG_FWDNLD_E
("RawFrame Request Failed!!");

844 
	`NXPLOG_FWDNLD_E
("Invalid Buff Parameters!!");

845 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

850  
wSètus
;

851 
	}
}

865 
NFCSTATUS
 
	$phD∆dNfc_InôImgInfo
()

867 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

868 
uöt8_t
 *
pImageInfo
 = 
NULL
;

869 
uöt16_t
 
ImageInfoLí
 = 0;

872 
	`phD∆dNfc_SëHwDevH™dÀ
();

875 
wSètus
 = 
	`phD∆dNfc_LﬂdFW
(
FW_LIB_PATH
, &
pImageInfo
, &
ImageInfoLí
);

877 
	`NXPLOG_FWDNLD_D
("FW ImagêLígth - ImageInfoLí %d",
ImageInfoLí
);

878 
	`NXPLOG_FWDNLD_D
("FW ImagêInfÿPoöã∏-ÖImageInfÿ%p",(
öçå_t
)
pImageInfo
);

880 if((
pImageInfo
 =
NULL
Ë|| (
ImageInfoLí
 == 0))

882 
	`NXPLOG_FWDNLD_E
("ImageÉxtraction Failed - invalid imginfo or imginfolen!!");

883 
wSètus
 = 
NFCSTATUS_FAILED
;

886 i‡(
wSètus
 !
NFCSTATUS_SUCCESS
)

888 
	`NXPLOG_FWDNLD_E
("ErrorÜoadingÜibpn547_fw !!\n");

892 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

894 
	`NXPLOG_FWDNLD_D
("MW Maj‹ Vîsi⁄ Num - %x",
NXP_MW_VERSION_MAJ
);

895 
	`NXPLOG_FWDNLD_D
("MW Mö‹ Vîsi⁄ Num - %x",
NXP_MW_VERSION_MIN
);

896 
wMwVî
 = (((
uöt16_t
)(
NXP_MW_VERSION_MAJ
Ë<< 8UË| (
NXP_MW_VERSION_MIN
));

899 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

901 
gµhD∆dC⁄ãxt
->
nxp_nfc_fw
 = (
uöt8_t
*)
pImageInfo
;

902 
gµhD∆dC⁄ãxt
->
nxp_nfc_fw_Àn
 = 
ImageInfoLí
;

903 if((
NULL
 !
gµhD∆dC⁄ãxt
->
nxp_nfc_fw
Ë&& (0 !gµhD∆dC⁄ãxt->
nxp_nfc_fw_Àn
))

905 
	`NXPLOG_FWDNLD_D
("FW Maj‹ Vîsi⁄ Num - %x",
gµhD∆dC⁄ãxt
->
nxp_nfc_fw
[5]);

906 
	`NXPLOG_FWDNLD_D
("FW Mö‹ Vîsi⁄ Num - %x",
gµhD∆dC⁄ãxt
->
nxp_nfc_fw
[4]);

907 
	`NXPLOG_FWDNLD_D
("FW ImagêLígth - %d",
ImageInfoLí
);

908 
	`NXPLOG_FWDNLD_D
("FW ImagêInfÿPoöã∏- %p",(
öçå_t
)
pImageInfo
);

911 
wFwVî
 = (((
uöt16_t
)(
gµhD∆dC⁄ãxt
->
nxp_nfc_fw
[5]) << 8U) | (gpphDnldContext->nxp_nfc_fw[4]));

912 
wSètus
 = 
NFCSTATUS_SUCCESS
;

916 
	`NXPLOG_FWDNLD_E
("Image detailsÉxtraction Failed!!");

917 
wSètus
 = 
NFCSTATUS_FAILED
;

921  
wSètus
;

922 
	}
}

937 
NFCSTATUS
 
	$phD∆dNfc_LﬂdRecInfo
()

939 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

940 
uöt8_t
 *
pImageInfo
 = 
NULL
;

941 
uöt16_t
 
ImageInfoLí
 = 0;

944 
	`phD∆dNfc_SëHwDevH™dÀ
();

946 
wSètus
 = 
	`phD∆dNfc_LﬂdFW
(
PLATFORM_LIB_PATH
, &
pImageInfo
, &
ImageInfoLí
);

948 if((
pImageInfo
 =
NULL
Ë|| (
ImageInfoLí
 == 0))

950 
	`NXPLOG_FWDNLD_E
("ImageÉxtraction Failed - invalid imginfo or imginfolen!!");

951 
wSètus
 = 
NFCSTATUS_FAILED
;

955 i‡(
wSètus
 !
NFCSTATUS_SUCCESS
)

957 
	`NXPLOG_FWDNLD_E
("ErrorÜoadingÜibpn547_fw_platform !!\n");

960 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

963 
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp
 = (
uöt8_t
*)
pImageInfo
;

964 
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp_Àn
 = 
ImageInfoLí
;

965 if((
NULL
 !
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp
Ë&& (0 !gµhD∆dC⁄ãxt->
nxp_nfc_fwp_Àn
))

967 
	`NXPLOG_FWDNLD_D
("Recovîy ImagêLígth - %d",
ImageInfoLí
);

968 
	`NXPLOG_FWDNLD_D
("Recovîy ImagêInfÿPoöã∏- %p",(
öçå_t
)
pImageInfo
);

969 
wSètus
 = 
NFCSTATUS_SUCCESS
;

973 
	`NXPLOG_FWDNLD_E
("Recovery Image detailsÉxtraction Failed!!");

974 
wSètus
 = 
NFCSTATUS_FAILED
;

978  
wSètus
;

979 
	}
}

993 
NFCSTATUS
 
	$phD∆dNfc_LﬂdPKInfo
()

995 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

996 
uöt8_t
 *
pImageInfo
 = 
NULL
;

997 
uöt16_t
 
ImageInfoLí
 = 0;

1000 
	`phD∆dNfc_SëHwDevH™dÀ
();

1003 
wSètus
 = 
	`phD∆dNfc_LﬂdFW
(
PKU_LIB_PATH
, &
pImageInfo
, &
ImageInfoLí
);

1005 if((
pImageInfo
 =
NULL
Ë|| (
ImageInfoLí
 == 0))

1007 
	`NXPLOG_FWDNLD_E
("ImageÉxtraction Failed - invalid imginfo or imginfolen!!");

1008 
wSètus
 = 
NFCSTATUS_FAILED
;

1011 i‡(
wSètus
 !
NFCSTATUS_SUCCESS
)

1013 
	`NXPLOG_FWDNLD_E
("ErrorÜoadingÜibpn547_fw_pku !!\n");

1016 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1019 
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp
 = (
uöt8_t
*)
pImageInfo
;

1020 
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp_Àn
 = 
ImageInfoLí
;

1022 if((
NULL
 !
gµhD∆dC⁄ãxt
->
nxp_nfc_fwp
Ë&& (0 !gµhD∆dC⁄ãxt->
nxp_nfc_fwp_Àn
))

1024 
	`NXPLOG_FWDNLD_D
("PKU ImagêLígth - %d",
ImageInfoLí
);

1025 
	`NXPLOG_FWDNLD_D
("PKU ImagêInfÿPoöã∏- %p",(
öçå_t
)
pImageInfo
);

1026 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1030 
	`NXPLOG_FWDNLD_E
("PKU Image detailsÉxtraction Failed!!");

1031 
wSètus
 = 
NFCSTATUS_FAILED
;

1035  
wSètus
;

1036 
	}
}

1050 
	$phD∆dNfc_Clo£FwLibH™dÀ
()

1052 
NFCSTATUS
 
wSètus
;

1054 
wSètus
 = 
	`phD∆dNfc_U∆ﬂdFW
();

1055 if(
wSètus
 !
NFCSTATUS_SUCCESS
)

1057 
	`NXPLOG_FWDNLD_E
("freeÜibrary FAILED !!\n");

1061 
	`NXPLOG_FWDNLD_E
("freeÜibrary SUCCESS !!\n");

1064 
	}
}

1079 
NFCSTATUS
 
	$phD∆dNfc_LﬂdFW
(c⁄° * 
∑thName
, 
uöt8_t
 **
pImgInfo
, 
uöt16_t
* 
pImgInfoLí
)

1081 * 
pImageInfo
 = 
NULL
;

1082 * 
pImageInfoLí
 = 
NULL
;

1085 if(
∑thName
 =
NULL
)

1087 
∑thName
 = "/system/vendor/firmware/libpn547_fw.so";

1091 if(
pFwLibH™dÀ
 !
NULL
)

1093 
	`phD∆dNfc_U∆ﬂdFW
();

1094 
pFwLibH™dÀ
 = 
NULL
;

1098 
pFwLibH™dÀ
 = 
	`dl›í
(
∑thName
, 
RTLD_LAZY
);

1099 
	`NXPLOG_FWDNLD_D
 ("@@@%s", 
∑thName
);

1102 if(
pFwLibH™dÀ
 =
NULL
)

1104 
	`NXPLOG_FWDNLD_E
("NULL handler : unableÅoÜoadÅheÜibrary file, specify correctÖath");

1105  
NFCSTATUS_FAILED
;

1108 
	`dÀº‹
();

1111 
pImageInfo
 = (*)
	`dlsym
(
pFwLibH™dÀ
,"gphDnldNfc_DlSeq");

1113 if(
	`dÀº‹
()|| (
NULL
 =
pImageInfo
))

1115 
	`NXPLOG_FWDNLD_E
("ProblemÜoading symbol : gphDnldNfc_DlSeq");

1116  
NFCSTATUS_FAILED
;

1118 (*
pImgInfo
Ë(*(
uöt8_t
**)
pImageInfo
);

1120 
pImageInfoLí
 = (*)
	`dlsym
(
pFwLibH™dÀ
,"gphDnldNfc_DlSeqSz");

1121 if(
	`dÀº‹
(Ë|| (
NULL
 =
pImageInfoLí
))

1123 
	`NXPLOG_FWDNLD_E
("ProblemÜoading symbol : gphDnldNfc_DlSeqSz");

1124  
NFCSTATUS_FAILED
;

1127 (*
pImgInfoLí
Ë(
uöt16_t
)(*((uöt16_t*)
pImageInfoLí
));

1129  
NFCSTATUS_SUCCESS
;

1130 
	}
}

1144 
NFCSTATUS
 
	$phD∆dNfc_U∆ﬂdFW
()

1146 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1147 
öt32_t
 
°©us
;

1150 if(
pFwLibH™dÀ
 !
NULL
)

1152 
°©us
 = 
	`dl˛o£
(
pFwLibH™dÀ
);

1153 
pFwLibH™dÀ
 = 
NULL
;

1155 
	`dÀº‹
();

1156 if(
°©us
 != 0)

1158 
wSètus
 = 
NFCSTATUS_FAILED
;

1159 
	`NXPLOG_FWDNLD_E
("FreeÜibrary file failed");

1163  
wSètus
;

1164 
	}
}

1166 #ifde‡
EEPROM_Ród_Mem_IMP


1184 
NFCSTATUS
 
	$phD∆dNfc_RódMem
(*
pHwRef
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

1186 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1187 
uöt32_t
 
wAddr
 = 0x2011C0;

1188 
uöt32_t
 
wRdAddr
 = 0;

1189 
uöt8_t
 *
pAddr
;

1190 
uöt8_t
 
bRdD©a
[3519];

1191 
phD∆dNfc_Buff_t
 
D©a
;

1193 if((
NULL
 =
pNŸify
Ë|| (NULL =
pC⁄ãxt
))

1195 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

1196 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

1201 
wSètus
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀDow∆ﬂdMode
);

1203 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1206 
	`phD∆dNfc_SëHwDevH™dÀ
();

1210 
wSètus
 = 
NFCSTATUS_FAILED
;

1213 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1215 
pAddr
 = (
uöt8_t
 *)&
wAddr
;

1217 
wRdAddr
 = (
pAddr
[3]);

1218 
wRdAddr
 <<= 8;

1219 
wRdAddr
 |(
pAddr
[2]);

1220 
wRdAddr
 <<= 8;

1221 
wRdAddr
 |(
pAddr
[1]);

1222 
wRdAddr
 <<= 8;

1223 
wRdAddr
 |(
pAddr
[0]);

1225 
D©a
.
pBuff
 = 
bRdD©a
;

1226 
D©a
.
wLí
 = (
bRdD©a
);

1228 
wSètus
 = 
	`phD∆dNfc_Ród
(&
D©a
, 
wRdAddr
,(
µhD∆dNfc_R•Cb_t
)
phD∆dNfc_RódCom∂ëe
,
gµhD∆dC⁄ãxt
);

1232 
D©a
.
pBuff
 = 
NULL
;

1233 
D©a
.
wLí
 = 0;

1234 
wSètus
 = 
NFCSTATUS_FAILED
;

1237 if(
NFCSTATUS_PENDING
 =
wSètus
)

1239 
	`NXPLOG_FWDNLD_D
("Read Request submitted successfully..");

1240 
U£rCb
 = 
pNŸify
;

1241 
U£rCtxt
 = 
pC⁄ãxt
;

1245 
	`NXPLOG_FWDNLD_E
("Read Request submission failed!!");

1249  
wSètus
;

1250 
	}
}

1265 
	$phD∆dNfc_RódCom∂ëe
(* 
pC⁄ãxt
,
NFCSTATUS
 
°©us
,* 
pInfo
)

1267 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1268 
	`UNUSED
(
pC⁄ãxt
);

1271 
wSètus
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀN‹mÆMode
);

1273 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1275 
	`NXPLOG_FWDNLD_D
("Read Done!!");

1278 
	`U£rCb
(&
U£rCtxt
,
°©us
,
pInfo
);

1281 
	}
}

1301 
NFCSTATUS
 
	$phD∆dNfc_Ród
(
µhD∆dNfc_Buff_t
 
pD©a
, 
uöt32_t
 
dwRdAddr
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
)

1303 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1305 if((
NULL
 =
pNŸify
Ë|| (NULL =
pD©a
) ||

1306 (
NULL
 =
pC⁄ãxt
)

1309 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

1310 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

1314 if(
phD∆dNfc_Tønsôi⁄IdÀ
 !
gµhD∆dC⁄ãxt
->
tD∆dInProgªss
)

1316 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request in Progress..Cannot Continue!!");

1317 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_BUSY
);

1321 if((
NULL
 !
pD©a
->
pBuff
Ë&& (0 !pD©a->
wLí
))

1323 (
gµhD∆dC⁄ãxt
->
tCmdId
Ë
PH_DL_CMD_READ
;

1324 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
Ty≥
Ë
phD∆dNfc_FTRód
;

1325 (
gµhD∆dC⁄ãxt
->
FømeI≈
.
dwAddr
Ë
dwRdAddr
;

1326 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
pBuff
Ë
pD©a
->pBuff;

1327 (
gµhD∆dC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
pD©a
->wLen;

1328 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
pBuff
Ë
NULL
;

1329 (
gµhD∆dC⁄ãxt
->
tU£rD©a
.
wLí
) = 0;

1331 
	`mem£t
(&(
gµhD∆dC⁄ãxt
->
tRWInfo
),0,(gpphDnldContext->tRWInfo));

1333 
wSètus
 = 
	`phD∆dNfc_CmdH™dÀr
(
gµhD∆dC⁄ãxt
,
phD∆dNfc_EvítRód
);

1335 if(
NFCSTATUS_PENDING
 =
wSètus
)

1337 
	`NXPLOG_FWDNLD_D
("Read Request submitted successfully");

1338 (
gµhD∆dC⁄ãxt
->
U£rCb
Ë
pNŸify
;

1339 (
gµhD∆dC⁄ãxt
->
U£rCtxt
Ë
pC⁄ãxt
;

1343 
	`NXPLOG_FWDNLD_E
("Read Request Failed!!");

1348 
	`NXPLOG_FWDNLD_E
("Invalid Buff Parameters!!");

1349 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_INVALID_PARAMETER
);

1354  
wSètus
;

1355 
	}
}

	@dnld/phDnldNfc.h

20 #i‚de‡
PHDNLDNFC_H


21 
	#PHDNLDNFC_H


	)

23 
	~<phNfcSètus.h
>

33 (*
	tµhD∆dNfc_R•Cb_t
)(* 
	tpC⁄ãxt
, 
	tNFCSTATUS
 
	twSètus
,* 
	tpInfo
);

35 
	#PHLIBNFC_FWDNLD_SESSNOPEN
 (0x01UË

	)

36 
	#PHLIBNFC_FWDNLD_SESSNCLOSED
 (0x00UË

	)

38 
	#PHDNLDNFC_HWVER_MRA1_0
 (0x01UË

	)

39 
	#PHDNLDNFC_HWVER_MRA1_1
 (0x02UË

	)

40 
	#PHDNLDNFC_HWVER_MRA2_0
 (0x03UË

	)

41 
	#PHDNLDNFC_HWVER_MRA2_1
 (0x04UË

	)

42 
	#PHDNLDNFC_HWVER_MRA2_2
 (0x05UË

	)

47 
	ephD∆dNfc_LC
{

48 
phD∆dNfc_LCCª©
 = 11,

49 
phD∆dNfc_LCInô
 = 13,

50 
phD∆dNfc_LCO≥r
 = 17,

51 
phD∆dNfc_LCTîm
 = 19

52 }
	tphD∆dNfc_LC_t
;

57 
	ephD∆dNfc_ClkSrc
{

58 
phD∆dNfc_ClkSrcXèl
 = 1U,

59 
phD∆dNfc_ClkSrcPLL
 = 2U,

60 
phD∆dNfc_ClkSrcPad
 = 3U

61 }
	tphD∆dNfc_ClkSrc_t
;

66 
	ephD∆dNfc_ClkFªq
{

67 
phD∆dNfc_ClkFªq_13Mhz
 = 0U,

68 
phD∆dNfc_ClkFªq_19_2Mhz
 = 1U,

69 
phD∆dNfc_ClkFªq_24Mhz
 = 2U,

70 
phD∆dNfc_ClkFªq_26Mhz
 = 3U,

71 
phD∆dNfc_ClkFªq_38_4Mhz
 = 4U,

72 
phD∆dNfc_ClkFªq_52Mhz
 = 5U

73 }
	tphD∆dNfc_ClkFªq_t
;

78 
	sphD∆dNfc_Buff


80 
uöt8_t
 *
pBuff
;

81 
uöt16_t
 
wLí
;

82 }
	tphD∆dNfc_Buff_t
, *
	tµhD∆dNfc_Buff_t
;

88 
NFCSTATUS
 
	`phD∆dNfc_Re£t
(
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

89 
NFCSTATUS
 
	`phD∆dNfc_GëVîsi⁄
(
µhD∆dNfc_Buff_t
 
pVîsi⁄Info
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

90 
NFCSTATUS
 
	`phD∆dNfc_CheckI¡egrôy
(
uöt8_t
 
bChùVî
, 
µhD∆dNfc_Buff_t
 
pCRCD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

91 
NFCSTATUS
 
	`phD∆dNfc_GëSessi⁄Sèã
(
µhD∆dNfc_Buff_t
 
pSessi⁄
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

92 
NFCSTATUS
 
	`phD∆dNfc_F‹˚
(
µhD∆dNfc_Buff_t
 
pI≈uts
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
,*
pC⁄ãxt
);

93 
NFCSTATUS
 
	`phD∆dNfc_Ród
(
µhD∆dNfc_Buff_t
 
pD©a
, 
uöt32_t
 
dwRdAddr
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

94 
NFCSTATUS
 
	`phD∆dNfc_RódLog
(
µhD∆dNfc_Buff_t
 
pD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

95 
NFCSTATUS
 
	`phD∆dNfc_Wrôe
(
boﬁ_t
 
bRecovîSeq
, 
µhD∆dNfc_Buff_t
 
pD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

96 
NFCSTATUS
 
	`phD∆dNfc_Log
(
µhD∆dNfc_Buff_t
 
pD©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

97 
	`phD∆dNfc_SëHwDevH™dÀ
();

98 
	`phD∆dNfc_ReSëHwDevH™dÀ
();

99 
NFCSTATUS
 
	`phD∆dNfc_RódMem
(*
pHwRef
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

100 
NFCSTATUS
 
	`phD∆dNfc_RawReq
(
µhD∆dNfc_Buff_t
 
pFømeD©a
,ÖphD∆dNfc_Buff_à
pR•D©a
, 
µhD∆dNfc_R•Cb_t
 
pNŸify
, *
pC⁄ãxt
);

101 
NFCSTATUS
 
	`phD∆dNfc_InôImgInfo
();

102 
NFCSTATUS
 
	`phD∆dNfc_LﬂdRecInfo
();

103 
NFCSTATUS
 
	`phD∆dNfc_LﬂdPKInfo
();

104 
	`phD∆dNfc_Clo£FwLibH™dÀ
();

105 
NFCSTATUS
 
	`phD∆dNfc_LﬂdFW
(c⁄° * 
∑thName
, 
uöt8_t
 **
pImgInfo
, 
uöt16_t
* 
pImgInfoLí
);

106 
NFCSTATUS
 
	`phD∆dNfc_U∆ﬂdFW
();

	@dnld/phDnldNfc_Cmd.h

21 #i‚de‡
PHDNLDNFC_CMD_H


22 
	#PHDNLDNFC_CMD_H


	)

24 
	~<phNfcSètus.h
>

29 
	ephD∆dNfc_CmdId


31 
	mPH_DL_CMD_NONE
 = 0x00,

32 
	mPH_DL_CMD_RESET
 = 0xF0,

33 
	mPH_DL_CMD_GETVERSION
 = 0xF1,

34 
	mPH_DL_CMD_CHECKINTEGRITY
 = 0xE0,

35 
	mPH_DL_CMD_WRITE
 = 0xC0,

36 
	mPH_DL_CMD_READ
 = 0xA2,

37 
	mPH_DL_CMD_LOG
 = 0xA7,

38 
	mPH_DL_CMD_FORCE
 = 0xD0,

39 
	mPH_DL_CMD_GETSESSIONSTATE
 = 0xF2

40 }
	tphD∆dNfc_CmdId_t
;

	@dnld/phDnldNfc_Internal.c

22 
	~<phD∆dNfc_I¡î«l.h
>

23 
	~<phD∆dNfc_Utûs.h
>

24 
	~<phTmlNfc.h
>

25 
	~<phNxpLog.h
>

26 
	~<phNxpNciHÆ_utûs.h
>

28 
	#PHDNLDNFC_MIN_PLD_LEN
 (0x04UË

	)

30 
	#PHDNLDNFC_FRAME_HDR_OFFSET
 (0x00Ë

	)

31 
	#PHDNLDNFC_FRAMEID_OFFSET
 (
PHDNLDNFC_FRAME_HDR_LEN
Ë

	)

32 
	#PHDNLDNFC_FRAMESTATUS_OFFSET
 
PHDNLDNFC_FRAMEID_OFFSET


	)

33 
	#PHDNLDNFC_PLD_OFFSET
 (
PHDNLDNFC_MIN_PLD_LEN
 - 1Ë

	)

35 
	#PHDNLDNFC_FRAME_RDDATA_OFFSET
 ((
PHDNLDNFC_FRAME_HDR_LEN
) + \

36 (
PHDNLDNFC_MIN_PLD_LEN
)Ë

	)

38 
	#PHDNLDNFC_FRAME_SIGNATURE_SIZE
 (0xC0UË

	)

39 
	#PHDNLDNFC_FIRST_FRAME_PLD_SIZE
 (0xE4UË

	)

41 
	#PHDNLDNFC_FIRST_FRAGFRAME_RESP
 (0x2DUË

	)

42 
	#PHDNLDNFC_NEXT_FRAGFRAME_RESP
 (0x2EUË

	)

44 
	#PHDNLDNFC_SET_HDR_FRAGBIT
(
n
Ë(“Ë| (1<<10)Ë

	)

45 
	#PHDNLDNFC_CLR_HDR_FRAGBIT
(
n
Ë(“Ë& ~(1U<<10)Ë

	)

46 
	#PHDNLDNFC_CHK_HDR_FRAGBIT
(
n
Ë(“Ë& 0x04Ë

	)

48 
	#PHDNLDNFC_RSP_TIMEOUT
 (2500Ë

	)

49 
	#PHDNLDNFC_RETRY_FRAME_WRITE
 (50Ë

	)

51 
	#PHDNLDNFC_USERDATA_EEPROM_LENSIZE
 (0x02UË

	)

52 
	#PHDNLDNFC_USERDATA_EEPROM_OFFSIZE
 (0x02UË

	)

54 #ifde‡ 
NXP_PN547C1_DOWNLOAD


56 
	#PHDNLDNFC_USERDATA_EEPROM_OFFSET
 (0x003CUË

	)

57 
	#PHDNLDNFC_USERDATA_EEPROM_LEN
 (0x0DC0UË

	)

60 
	#PHDNLDNFC_USERDATA_EEPROM_OFFSET
 (0x023CUË

	)

61 
	#PHDNLDNFC_USERDATA_EEPROM_LEN
 (0x0C80UË

	)

63 
	#PH_LIBNFC_VEN_RESET_ON_DOWNLOAD_TIMEOUT
 (1)

	)

66 
phD∆dNfc_Pro˚ssSeqSèã
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

67 
phD∆dNfc_Pro˚ssRWSeqSèã
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

68 
NFCSTATUS
 
phD∆dNfc_Pro˚ssFøme
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

69 
NFCSTATUS
 
phD∆dNfc_Pro˚ssRecvInfo
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

70 
NFCSTATUS
 
phD∆dNfc_BuûdFømePkt
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
);

71 
NFCSTATUS
 
phD∆dNfc_Cª©eFømePld
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
);

72 
NFCSTATUS
 
phD∆dNfc_SëupRe£ndTimî
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
);

73 
NFCSTATUS
 
phD∆dNfc_Upd©eR•
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
, 
uöt16_t
 
wPldLí
);

74 
phD∆dNfc_R•TimeOutCb
(
uöt32_t
 
TimîId
, *
pC⁄ãxt
);

75 
phD∆dNfc_Re£ndTimeOutCb
(
uöt32_t
 
TimîId
, *
pC⁄ãxt
);

100 
NFCSTATUS
 
	$phD∆dNfc_CmdH™dÀr
(*
pC⁄ãxt
, 
phD∆dNfc_Evít_t
 
TrigEvít
)

102 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

103 
µhD∆dNfc_DlC⁄ãxt_t
 
pDlCtxt
 = (µhD∆dNfc_DlC⁄ãxt_t)
pC⁄ãxt
;

105 if(
NULL
 =
pDlCtxt
)

107 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter!!");

108 
°©us
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

112 
TrigEvít
)

114 
phD∆dNfc_EvítRe£t
:

115 
phD∆dNfc_EvítGëVî
:

116 
phD∆dNfc_EvítI¡egChk
:

117 
phD∆dNfc_EvítGëSe¢St
:

118 
phD∆dNfc_EvítRaw
:

120 if(
phD∆dNfc_EvítInvÆid
 =(
pDlCtxt
->
tCuºEvít
))

122 
	`NXPLOG_FWDNLD_D
("Processing Normal Sequence..");

123 
pDlCtxt
->
tCuºEvít
 = 
TrigEvít
;

124 
pDlCtxt
->
tD∆dInProgªss
 = 
phD∆dNfc_Tønsôi⁄Busy
;

126 
	`phD∆dNfc_Pro˚ssSeqSèã
(
pDlCtxt
,
NULL
);

128 
°©us
 = 
pDlCtxt
->
wCmdSídSètus
;

132 
	`NXPLOG_FWDNLD_E
("Prev Norml SequenceÇot completed/restored!!");

133 
°©us
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

137 
phD∆dNfc_EvítWrôe
:

138 
phD∆dNfc_EvítRód
:

139 
phD∆dNfc_EvítLog
:

140 
phD∆dNfc_EvítF‹˚
:

142 if(
phD∆dNfc_EvítInvÆid
 =(
pDlCtxt
->
tCuºEvít
))

144 
	`NXPLOG_FWDNLD_D
("Processing R/W Sequence..");

145 
pDlCtxt
->
tCuºEvít
 = 
TrigEvít
;

146 
pDlCtxt
->
tD∆dInProgªss
 = 
phD∆dNfc_Tønsôi⁄Busy
;

148 
	`phD∆dNfc_Pro˚ssRWSeqSèã
(
pDlCtxt
,
NULL
);

150 
°©us
 = 
pDlCtxt
->
wCmdSídSètus
;

154 
	`NXPLOG_FWDNLD_E
("Prev R/W SequenceÇot completed/restored!!");

155 
°©us
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

162 
	`NXPLOG_FWDNLD_E
("Unknown Event Parameter!!");

163 
°©us
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

169  
°©us
;

170 
	}
}

184 
	$phD∆dNfc_Pro˚ssSeqSèã
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

186 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

187 
NFCSTATUS
 
wI¡Sètus
;

188 
uöt32_t
 
TimîId
;

189 
µhD∆dNfc_DlC⁄ãxt_t
 
pDlCtxt
 = (µhD∆dNfc_DlC⁄ãxt_t)
pC⁄ãxt
;

191 if(
NULL
 =
pDlCtxt
)

193 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter!!");

194 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

198 
pDlCtxt
->
tCuºSèã
)

200 
phD∆dNfc_SèãInô
:

202 
	`NXPLOG_FWDNLD_D
("Initializing Sequence..");

204 if(0 =(
pDlCtxt
->
TimîInfo
.
dwR•TimîId
))

206 
TimîId
 = 
	`phOßlNfc_Timî_Cª©e
();

208 i‡(0 =
TimîId
)

210 
	`NXPLOG_FWDNLD_W
("Response Timer Create failed!!");

211 
wSètus
 = 
NFCSTATUS_INSUFFICIENT_RESOURCES
;

212 
pDlCtxt
->
wCmdSídSètus
 = 
wSètus
;

217 
	`NXPLOG_FWDNLD_D
("Response Timer Created Successfully");

218 (
pDlCtxt
->
TimîInfo
.
dwR•TimîId
Ë
TimîId
;

219 (
pDlCtxt
->
TimîInfo
.
TimîSètus
) = 0;

220 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

223 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãSíd
;

225 
phD∆dNfc_SèãSíd
:

227 
wSètus
 = 
	`phD∆dNfc_BuûdFømePkt
(
pDlCtxt
);

229 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

231 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRecv
;

233 
wSètus
 = 
	`phTmlNfc_Wrôe
–(
pDlCtxt
->
tCmdR•FømeInfo
.
aFømeBuff
),

234 (
uöt16_t
)(
pDlCtxt
->
tCmdR•FømeInfo
.
dwSídÀngth
),

235 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
)&
phD∆dNfc_Pro˚ssSeqSèã
,

236 
pDlCtxt
);

238 
pDlCtxt
->
wCmdSídSètus
 = 
wSètus
;

241 
phD∆dNfc_SèãRecv
:

243 
wSètus
 = 
	`phD∆dNfc_Pro˚ssRecvInfo
(
pC⁄ãxt
,
pInfo
);

245 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

247 
wSètus
 = 
	`phOßlNfc_Timî_Sèπ
((
pDlCtxt
->
TimîInfo
.
dwR•TimîId
),

248 
PHDNLDNFC_RSP_TIMEOUT
,

249 &
phD∆dNfc_R•TimeOutCb
,

250 
pDlCtxt
);

252 i‡(
NFCSTATUS_SUCCESS
 =
wSètus
)

254 
	`NXPLOG_FWDNLD_D
("ResponseÅimer started");

255 
pDlCtxt
->
TimîInfo
.
TimîSètus
 = 1;

256 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãTimî
;

260 
	`NXPLOG_FWDNLD_W
("ResponseÅimerÇot started");

261 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

264 
wSètus
 = 
	`phTmlNfc_Ród
(

265 
pDlCtxt
->
tCmdR•FømeInfo
.
aFømeBuff
,

266 (
uöt16_t
 )
PHDNLDNFC_CMDRESP_MAX_BUFF_SIZE
,

267 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
)&
phD∆dNfc_Pro˚ssSeqSèã
,

268 (*)
pDlCtxt
);

275 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
Ë
NFCSTATUS_RF_TIMEOUT
;

276 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

279 
phD∆dNfc_SèãTimî
:

281 i‡(1 =(
pDlCtxt
->
TimîInfo
.
TimîSètus
))

284 ()
	`phOßlNfc_Timî_St›
(
pDlCtxt
->
TimîInfo
.
dwR•TimîId
);

285 (
pDlCtxt
->
TimîInfo
.
TimîSètus
) = 0;

287 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

289 
phD∆dNfc_SèãRe•⁄£
:

291 if(
NFCSTATUS_RF_TIMEOUT
 !(
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
))

294 
wSètus
 = 
	`phD∆dNfc_Pro˚ssFøme
(
pC⁄ãxt
,
pInfo
);

298 if(
phD∆dNfc_EvítRe£t
 !
pDlCtxt
->
tCuºEvít
)

300 
wSètus
 = (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
);

304 
wSètus
 = 
NFCSTATUS_SUCCESS
;

306 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

310 
wI¡Sètus
 = 
	`phTmlNfc_RódAb‹t
();

312 if(
NFCSTATUS_SUCCESS
 !
wI¡Sètus
)

315 
	`NXPLOG_FWDNLD_W
("Tml Read Abort failed!!");

318 
pDlCtxt
->
tCuºEvít
 = 
phD∆dNfc_EvítInvÆid
;

319 
pDlCtxt
->
tD∆dInProgªss
 = 
phD∆dNfc_Tønsôi⁄IdÀ
;

320 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãInô
;

323 ()
	`phOßlNfc_Timî_Dñëe
(
pDlCtxt
->
TimîInfo
.
dwR•TimîId
);

324 (
pDlCtxt
->
TimîInfo
.
dwR•TimîId
) = 0;

325 (
pDlCtxt
->
TimîInfo
.
TimîSètus
) = 0;

326 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

328 if((
NULL
 !(
pDlCtxt
->
U£rCb
)Ë&& (NULL !’DlCtxt->
U£rCtxt
)))

330 
pDlCtxt
->
	`U£rCb
(’DlCtxt->
U£rCtxt
),
wSètus
,&’DlCtxt->
tR•BuffInfo
));

336 
pDlCtxt
->
tCuºEvít
 = 
phD∆dNfc_EvítInvÆid
;

337 
pDlCtxt
->
tD∆dInProgªss
 = 
phD∆dNfc_Tønsôi⁄IdÀ
;

344 
	}
}

358 
	$phD∆dNfc_Pro˚ssRWSeqSèã
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

360 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

361 
NFCSTATUS
 
wI¡Sètus
 = 
wSètus
;

362 
uöt32_t
 
TimîId
;

363 
µhD∆dNfc_DlC⁄ãxt_t
 
pDlCtxt
 = (µhD∆dNfc_DlC⁄ãxt_t)
pC⁄ãxt
;

365 if(
NULL
 =
pDlCtxt
)

367 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter!!");

368 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

372 
pDlCtxt
->
tCuºSèã
)

374 
phD∆dNfc_SèãInô
:

376 if(0 =(
pDlCtxt
->
TimîInfo
.
dwR•TimîId
))

378 
TimîId
 = 
	`phOßlNfc_Timî_Cª©e
();

380 i‡(0 =
TimîId
)

382 
	`NXPLOG_FWDNLD_E
("Response Timer Create failed!!");

383 
wSètus
 = 
NFCSTATUS_INSUFFICIENT_RESOURCES
;

387 
	`NXPLOG_FWDNLD_D
("Response Timer Created Successfully");

388 (
pDlCtxt
->
TimîInfo
.
dwR•TimîId
Ë
TimîId
;

389 (
pDlCtxt
->
TimîInfo
.
TimîSètus
) = 0;

390 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

393 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãSíd
;

395 
phD∆dNfc_SèãSíd
:

397 if(
FALSE
 =
pDlCtxt
->
bRe£ndLa°Føme
)

399 
wSètus
 = 
	`phD∆dNfc_BuûdFømePkt
(
pDlCtxt
);

403 
pDlCtxt
->
bRe£ndLa°Føme
 = 
FALSE
;

406 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

408 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRecv
;

410 
wSètus
 = 
	`phTmlNfc_Wrôe
((
pDlCtxt
->
tCmdR•FømeInfo
.
aFømeBuff
),

411 (
uöt16_t
)(
pDlCtxt
->
tCmdR•FømeInfo
.
dwSídÀngth
),

412 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
)&
phD∆dNfc_Pro˚ssRWSeqSèã
,

413 
pDlCtxt
);

415 
pDlCtxt
->
wCmdSídSètus
 = 
wSètus
;

418 
phD∆dNfc_SèãRecv
:

420 
wSètus
 = 
	`phD∆dNfc_Pro˚ssRecvInfo
(
pC⁄ãxt
,
pInfo
);

422 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

425 
wSètus
 = 
	`phOßlNfc_Timî_Sèπ
((
pDlCtxt
->
TimîInfo
.
dwR•TimîId
),

426 
PHDNLDNFC_RSP_TIMEOUT
,

427 &
phD∆dNfc_R•TimeOutCb
,

428 
pDlCtxt
);

430 i‡(
NFCSTATUS_SUCCESS
 =
wSètus
)

432 
	`NXPLOG_FWDNLD_D
("ResponseÅimer started");

433 
pDlCtxt
->
TimîInfo
.
TimîSètus
 = 1;

434 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãTimî
;

438 
	`NXPLOG_FWDNLD_W
("ResponseÅimerÇot started");

439 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

443 
wSètus
 = 
	`phTmlNfc_Ród
(

444 
pDlCtxt
->
tCmdR•FømeInfo
.
aFømeBuff
,

445 (
uöt16_t
 )
PHDNLDNFC_CMDRESP_MAX_BUFF_SIZE
,

446 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
)&
phD∆dNfc_Pro˚ssRWSeqSèã
,

447 (*)
pDlCtxt
);

454 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
Ë
NFCSTATUS_RF_TIMEOUT
;

455 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

458 
phD∆dNfc_SèãTimî
:

460 i‡(1 =(
pDlCtxt
->
TimîInfo
.
TimîSètus
))

463 ()
	`phOßlNfc_Timî_St›
(
pDlCtxt
->
TimîInfo
.
dwR•TimîId
);

464 (
pDlCtxt
->
TimîInfo
.
TimîSètus
) = 0;

466 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

468 
phD∆dNfc_SèãRe•⁄£
:

470 if(
NFCSTATUS_RF_TIMEOUT
 !(
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
))

473 
wSètus
 = 
	`phD∆dNfc_Pro˚ssFøme
(
pC⁄ãxt
,
pInfo
);

475 if(
NFCSTATUS_BUSY
 =
wSètus
)

478 
wI¡Sètus
 = 
wSètus
;

481 
wSètus
 = 
	`phD∆dNfc_SëupRe£ndTimî
(
pDlCtxt
);

483 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

486 
wSètus
 = 
wI¡Sètus
;

492 
wSètus
 = (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
);

493 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

496 if((0 !(
pDlCtxt
->
tRWInfo
.
wRemByãs
)Ë&& (
NFCSTATUS_SUCCESS
 =
wSètus
))

499 
wI¡Sètus
 = 
	`phTmlNfc_RódAb‹t
();

501 if(
NFCSTATUS_SUCCESS
 !
wI¡Sètus
)

503 
	`NXPLOG_FWDNLD_W
("TmlÑeadábort failed!");

506 
wSètus
 = 
	`phD∆dNfc_BuûdFømePkt
(
pDlCtxt
);

508 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

510 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRecv
;

511 
wSètus
 = 
	`phTmlNfc_Wrôe
((
pDlCtxt
->
tCmdR•FømeInfo
.
aFømeBuff
),

512 (
uöt16_t
)(
pDlCtxt
->
tCmdR•FømeInfo
.
dwSídÀngth
),

513 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
)&
phD∆dNfc_Pro˚ssRWSeqSèã
,

514 
pDlCtxt
);

520 if(
NFCSTATUS_BUSY
 =
wSètus
)

526 (
pDlCtxt
->
tRWInfo
.
bFømesSegmíãd
Ë
FALSE
;

528 
wI¡Sètus
 = 
	`phTmlNfc_RódAb‹t
();

530 if(
NFCSTATUS_SUCCESS
 !
wI¡Sètus
)

532 
	`NXPLOG_FWDNLD_W
("TmlÑeadábort failed!");

535 
pDlCtxt
->
tCuºEvít
 = 
phD∆dNfc_EvítInvÆid
;

536 
pDlCtxt
->
tD∆dInProgªss
 = 
phD∆dNfc_Tønsôi⁄IdÀ
;

537 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãInô
;

538 
pDlCtxt
->
bRe£ndLa°Føme
 = 
FALSE
;

541 ()
	`phOßlNfc_Timî_Dñëe
(
pDlCtxt
->
TimîInfo
.
dwR•TimîId
);

542 (
pDlCtxt
->
TimîInfo
.
dwR•TimîId
) = 0;

543 (
pDlCtxt
->
TimîInfo
.
TimîSètus
) = 0;

544 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

546 if((
NULL
 !(
pDlCtxt
->
U£rCb
)Ë&& (NULL !’DlCtxt->
U£rCtxt
)))

548 
pDlCtxt
->
	`U£rCb
(’DlCtxt->
U£rCtxt
),
wSètus
,&’DlCtxt->
tR•BuffInfo
));

555 
pDlCtxt
->
tCuºEvít
 = 
phD∆dNfc_EvítInvÆid
;

556 
pDlCtxt
->
tD∆dInProgªss
 = 
phD∆dNfc_Tønsôi⁄IdÀ
;

563 
	}
}

576 
NFCSTATUS
 
	$phD∆dNfc_BuûdFømePkt
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
)

578 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

579 
uöt16_t
 
wFømeLí
 = 0;

580 
uöt16_t
 
wCrcVÆ
;

581 
uöt8_t
 *
pFømeByã
;

583 if(
NULL
 =
pDlC⁄ãxt
)

585 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter!!");

586 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

590 if(
phD∆dNfc_FTWrôe
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

592 if((0 =(
pDlC⁄ãxt
->
tU£rD©a
.
wLí
)Ë|| (
NULL
 =’DlC⁄ãxt->tU£rD©a.
pBuff
)))

594 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter(s) for Write!!");

595 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

599 if(
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°WrReq
))

601 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
Ë’DlC⁄ãxt->
tU£rD©a
.
wLí
);

602 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
) = 0;

606 if(
phD∆dNfc_FTRód
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

608 if((0 =(
pDlC⁄ãxt
->
tR•BuffInfo
.
wLí
)Ë|| (
NULL
 =’DlC⁄ãxt->tR•BuffInfo.
pBuff
)))

610 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter(s) for Read!!");

611 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

615 if(
FALSE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
))

617 
	`NXPLOG_FWDNLD_D
("Verifying RspBuffInfo for Read Request..");

618 
wFømeLí
 = (
pDlC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë+ 
PHDNLDNFC_MIN_PLD_LEN
;

620 (
pDlC⁄ãxt
->
tRWInfo
.
wRWPldSize
Ë(
PHDNLDNFC_CMDRESP_MAX_PLD_SIZE
 - 
PHDNLDNFC_MIN_PLD_LEN
);

621 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
Ë’DlC⁄ãxt->
tR•BuffInfo
.
wLí
);

622 (
pDlC⁄ãxt
->
tRWInfo
.
dwAddr
Ë’DlC⁄ãxt->
FømeI≈
.dwAddr);

623 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
) = 0;

624 (
pDlC⁄ãxt
->
tRWInfo
.
wByãsRód
) = 0;

626 if(
PHDNLDNFC_CMDRESP_MAX_PLD_SIZE
 < 
wFømeLí
)

628 (
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
Ë
TRUE
;

633 if(
phD∆dNfc_FTLog
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

635 if((0 =(
pDlC⁄ãxt
->
tU£rD©a
.
wLí
)Ë|| (
NULL
 =’DlC⁄ãxt->tU£rD©a.
pBuff
)))

637 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter(s) for Log!!");

638 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

645 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

647 
wSètus
 = 
	`phD∆dNfc_Cª©eFømePld
(
pDlC⁄ãxt
);

650 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

652 
wFømeLí
 = 0;

653 
wFømeLí
 = (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
);

655 if(
phD∆dNfc_FTRaw
 !(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

657 if(
phD∆dNfc_FTWrôe
 !(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

659 
pFømeByã
 = (
uöt8_t
 *)&
wFømeLí
;

661 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAME_HDR_OFFSET
] = 
pFømeByã
[1];

662 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAME_HDR_OFFSET
 + 1] = 
pFømeByã
[0];

664 
	`NXPLOG_FWDNLD_D
("Inserting FrameId ..");

665 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAMEID_OFFSET
] =

666 (
pDlC⁄ãxt
->
tCmdId
);

668 
wFømeLí
 +
PHDNLDNFC_FRAME_HDR_LEN
;

672 if(0 !(
pDlC⁄ãxt
->
tRWInfo
.
wRWPldSize
))

674 if(
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
))

677 
wFømeLí
 = 
	`PHDNLDNFC_SET_HDR_FRAGBIT
(wFrameLen);

680 
pFømeByã
 = (
uöt8_t
 *)&
wFømeLí
;

682 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAME_HDR_OFFSET
] = 
pFømeByã
[1];

683 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAME_HDR_OFFSET
 + 1] = 
pFømeByã
[0];

686 
wFømeLí
 = 
	`PHDNLDNFC_CLR_HDR_FRAGBIT
(wFrameLen);

688 
wFømeLí
 +
PHDNLDNFC_FRAME_HDR_LEN
;

693 
wCrcVÆ
 = 
	`phD∆dNfc_CÆcCrc16
((
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
),
wFømeLí
);

695 
pFømeByã
 = (
uöt8_t
 *)&
wCrcVÆ
;

698 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wFømeLí
] = 
pFømeByã
[1];

699 
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wFømeLí
+ 1] = 
pFømeByã
[0];

701 
wFømeLí
 +
PHDNLDNFC_FRAME_CRC_LEN
;

704 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë
wFømeLí
;

705 
	`NXPLOG_FWDNLD_D
("Frame created successfully");

709 
	`NXPLOG_FWDNLD_E
("Frame creation failed!!");

710 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

714  
wSètus
;

715 
	}
}

728 
NFCSTATUS
 
	$phD∆dNfc_Cª©eFømePld
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
)

730 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

731 
uöt16_t
 
wBuffIdx
 = 0;

732 
uöt16_t
 
wChkI¡gVÆ
 = 0;

733 
uöt16_t
 
wFømeLí
 = 0;

735 if(
NULL
 =
pDlC⁄ãxt
)

737 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter!!");

738 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

742 
	`mem£t
((
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
),0,
PHDNLDNFC_CMDRESP_MAX_BUFF_SIZE
);

743 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
) = 0;

745 if(
phD∆dNfc_FTN⁄e
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

747 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+
PHDNLDNFC_MIN_PLD_LEN
;

749 if(
phD∆dNfc_ChkI¡g
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

751 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+
PHDNLDNFC_MIN_PLD_LEN
;

753 
wChkI¡gVÆ
 = 
PHDNLDNFC_USERDATA_EEPROM_OFFSET
;

754 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAME_RDDATA_OFFSET
]),

755 &
wChkI¡gVÆ
,(wChkIntgVal));

757 
wChkI¡gVÆ
 = 
PHDNLDNFC_USERDATA_EEPROM_LEN
;

758 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAME_RDDATA_OFFSET
 +

759 
PHDNLDNFC_USERDATA_EEPROM_OFFSIZE
]),&
wChkI¡gVÆ
,(wChkIntgVal));

761 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+
PHDNLDNFC_USERDATA_EEPROM_LENSIZE
;

762 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+
PHDNLDNFC_USERDATA_EEPROM_OFFSIZE
;

764 if(
phD∆dNfc_FTWrôe
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

766 
wBuffIdx
 = (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
);

768 if(
FALSE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
))

770 
wFømeLí
 = (
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
[
wBuffIdx
]);

771 
wFømeLí
 <<= 8;

772 
wFømeLí
 |(
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
[
wBuffIdx
 + 1]);

774 (
pDlC⁄ãxt
->
tRWInfo
.
wRWPldSize
Ë
wFømeLí
;

777 if((
pDlC⁄ãxt
->
tRWInfo
.
wRWPldSize
Ë> 
PHDNLDNFC_CMDRESP_MAX_PLD_SIZE
)

779 if(
FALSE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°ChunkRe•
))

781 (
pDlC⁄ãxt
->
tRWInfo
.
wRemChunkByãs
Ë
wFømeLí
;

782 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
Ë+
PHDNLDNFC_FRAME_HDR_LEN
;

783 
wBuffIdx
 = (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
);

786 if(
PHDNLDNFC_CMDRESP_MAX_PLD_SIZE
 < (
pDlC⁄ãxt
->
tRWInfo
.
wRemChunkByãs
))

788 (
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
Ë
PHDNLDNFC_CMDRESP_MAX_PLD_SIZE
;

789 (
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
Ë
TRUE
;

793 (
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
Ë’DlC⁄ãxt->tRWInfo.
wRemChunkByãs
);

794 (
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
Ë
FALSE
;

797 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
PHDNLDNFC_FRAMEID_OFFSET
]),

798 &(
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
[
wBuffIdx
]),’DlC⁄ãxt->
tRWInfo
.
wByãsToSídRecv
));

802 (
pDlC⁄ãxt
->
tRWInfo
.
wRWPldSize
) = 0;

803 (
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
Ë(
wFømeLí
 + 
PHDNLDNFC_FRAME_HDR_LEN
);

805 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[0]),

806 &(
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
[
wBuffIdx
]),’DlC⁄ãxt->
tRWInfo
.
wByãsToSídRecv
));

808 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+’DlC⁄ãxt->
tRWInfo
.
wByãsToSídRecv
);

810 if(
phD∆dNfc_FTRód
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

812 (
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
Ë(’DlC⁄ãxt->tRWInfo.
wRemByãs
) >

813 (
pDlC⁄ãxt
->
tRWInfo
.
wRWPldSize
)) ? (pDlContext->tRWInfo.wRWPldSize) :

814 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
);

816 
wBuffIdx
 = (
PHDNLDNFC_PLD_OFFSET
 + (((
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
))

817 % 
PHDNLDNFC_MIN_PLD_LEN
) - 1);

819 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wBuffIdx
]),

820 &(
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
),((pDlContext->tRWInfo.wBytesToSendRecv)));

822 
wBuffIdx
 +(
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
);

824 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wBuffIdx
]),

825 &(
pDlC⁄ãxt
->
tRWInfo
.
dwAddr
),(pDlContext->tRWInfo.dwAddr));

827 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+(
PHDNLDNFC_MIN_PLD_LEN
 +

828 ((
pDlC⁄ãxt
->
tRWInfo
.
dwAddr
)));

830 if(
phD∆dNfc_FTLog
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

832 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+
PHDNLDNFC_MIN_PLD_LEN
;

834 
wBuffIdx
 = (
PHDNLDNFC_MIN_PLD_LEN
 + 
PHDNLDNFC_FRAME_HDR_LEN
);

836 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wBuffIdx
]),

837 (
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
),’DlC⁄ãxt->tU£rD©a.
wLí
));

839 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+’DlC⁄ãxt->
tU£rD©a
.
wLí
);

841 if(
phD∆dNfc_FTF‹˚
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

843 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+
PHDNLDNFC_MIN_PLD_LEN
;

845 
wBuffIdx
 = 
PHDNLDNFC_PLD_OFFSET
;

847 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wBuffIdx
]),

848 (
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
),’DlC⁄ãxt->tU£rD©a.
wLí
));

850 if(
phD∆dNfc_FTRaw
 =(
pDlC⁄ãxt
->
FømeI≈
.
Ty≥
))

852 if((0 =(
pDlC⁄ãxt
->
tU£rD©a
.
wLí
)Ë|| (
NULL
 =’DlC⁄ãxt->tU£rD©a.
pBuff
)))

854 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameter(s) for Raw Request!!");

855 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

859 
	`mem˝y
(&(
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
aFømeBuff
[
wBuffIdx
]),

860 (
pDlC⁄ãxt
->
tU£rD©a
.
pBuff
),’DlC⁄ãxt->tU£rD©a.
wLí
));

862 (
pDlC⁄ãxt
->
tCmdR•FømeInfo
.
dwSídÀngth
Ë+’DlC⁄ãxt->
tU£rD©a
.
wLí
);

870  
wSètus
;

871 
	}
}

886 
NFCSTATUS
 
	$phD∆dNfc_Pro˚ssFøme
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

888 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

889 
uöt16_t
 
wCrcVÆ
,
wRecvdCrc
,
wRecvdLí
,
wPldLí
;

890 
µhD∆dNfc_DlC⁄ãxt_t
 
pDlCtxt
 = (µhD∆dNfc_DlC⁄ãxt_t)
pC⁄ãxt
;

892 if((
NULL
 =
pDlCtxt
) ||

893 (
NULL
 =
pInfo
)

896 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

897 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

901 if((
PH_DL_STATUS_OK
 !
pInfo
->
wSètus
) ||

902 (0 =
pInfo
->
wLígth
) ||

903 (
NULL
 =
pInfo
->
pBuff
))

905 
	`NXPLOG_FWDNLD_E
("Dnld Cmd Request Failed!!");

906 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

910 if(
phD∆dNfc_FTRaw
 =(
pDlCtxt
->
FømeI≈
.
Ty≥
))

912 if((0 !(
pDlCtxt
->
tR•BuffInfo
.
wLí
)) &&

913 (
NULL
 !(
pDlCtxt
->
tR•BuffInfo
.
pBuff
)))

915 
	`mem˝y
((
pDlCtxt
->
tR•BuffInfo
.
pBuff
),(
pInfo
->pBuff),’Info->
wLígth
));

917 (
pDlCtxt
->
tR•BuffInfo
.
wLí
Ë(
pInfo
->
wLígth
);

921 
	`NXPLOG_FWDNLD_E
("Cannot update Response buff withÑeceived data!!");

927 
wCrcVÆ
 = 
	`phD∆dNfc_CÆcCrc16
((
pInfo
->
pBuff
),(’Info->
wLígth
Ë- 
PHDNLDNFC_FRAME_CRC_LEN
));

929 
wRecvdCrc
 = 0;

930 
wRecvdCrc
 = (((
uöt16_t
)(
pInfo
->
pBuff
[’Info->
wLígth
) - 2]) << 8U) |

931 (
pInfo
->
pBuff
[’Info->
wLígth
) - 1]));

933 if(
wRecvdCrc
 =
wCrcVÆ
)

935 
wRecvdLí
 = (((
uöt16_t
)(
pInfo
->
pBuff
[
PHDNLDNFC_FRAME_HDR_OFFSET
]) << 8U) |

936 (
pInfo
->
pBuff
[
PHDNLDNFC_FRAME_HDR_OFFSET
 + 1]));

938 
wPldLí
 = ((
pInfo
->
wLígth
Ë- (
PHDNLDNFC_FRAME_HDR_LEN
 + 
PHDNLDNFC_FRAME_CRC_LEN
));

940 if(
wRecvdLí
 !
wPldLí
)

942 
	`NXPLOG_FWDNLD_E
("Invalid frameÖayloadÜengthÑeceived");

943 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

947 
wSètus
 = 
	`phD∆dNfc_Upd©eR•
(
pDlCtxt
,
pInfo
,(
wPldLí
 - 1));

952 
	`NXPLOG_FWDNLD_E
("Invalid frameÑeceived");

953 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

959  
wSètus
;

960 
	}
}

975 
NFCSTATUS
 
	$phD∆dNfc_Pro˚ssRecvInfo
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

977 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

979 if(
NULL
 !
pC⁄ãxt
)

981 i‡(
NULL
 =
pInfo
)

983 
	`NXPLOG_FWDNLD_E
("InvalidÖInfoÑeceived from TML!!");

984 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

988 
wSètus
 = 
	`PHNFCSTATUS
(
pInfo
->wStatus);

990 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

992 
	`NXPLOG_FWDNLD_D
("Send Success");

995 
	`NXPLOG_FWDNLD_E
("Tml WriteÉrror!!");

996 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

1002 
	`NXPLOG_FWDNLD_E
("Invalid contextÑeceived from TML!!");

1003 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_FAILED
);

1006  
wSètus
;

1007 
	}
}

1020 
NFCSTATUS
 
	$phD∆dNfc_SëupRe£ndTimî
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
)

1022 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1024 
wSètus
 = 
	`phOßlNfc_Timî_Sèπ
((
pDlC⁄ãxt
->
TimîInfo
.
dwR•TimîId
),

1025 
PHDNLDNFC_RETRY_FRAME_WRITE
,

1026 &
phD∆dNfc_Re£ndTimeOutCb
,

1027 
pDlC⁄ãxt
);

1029 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1031 
	`NXPLOG_FWDNLD_D
("Frame Resend waitÅimer started");

1032 (
pDlC⁄ãxt
->
TimîInfo
.
TimîSètus
) = 1;

1033 
pDlC⁄ãxt
->
tCuºSèã
 = 
phD∆dNfc_SèãTimî
;

1037 
	`NXPLOG_FWDNLD_W
("Frame Resend waitÅimerÇot started");

1038 (
pDlC⁄ãxt
->
TimîInfo
.
TimîSètus
) = 0;

1039 
pDlC⁄ãxt
->
tCuºSèã
 = 
phD∆dNfc_SèãRe•⁄£
;

1043  
wSètus
;

1044 
	}
}

1046 #i‡!
deföed
(
PH_LIBNFC_VEN_RESET_ON_DOWNLOAD_TIMEOUT
)

1047 #îr‹ 
PH_LIBNFC_VEN_RESET_ON_DOWNLOAD_TIMEOUT
 
has
 
to
 
be
 
deföed


1062 
	$phD∆dNfc_R•TimeOutCb
(
uöt32_t
 
TimîId
, *
pC⁄ãxt
)

1064 
µhD∆dNfc_DlC⁄ãxt_t
 
pDlCtxt
 = (µhD∆dNfc_DlC⁄ãxt_t)
pC⁄ãxt
;

1066 i‡(
NULL
 !
pDlCtxt
)

1068 
	`UNUSED
(
TimîId
);

1070 if(1 =
pDlCtxt
->
TimîInfo
.
TimîSètus
)

1073 
pDlCtxt
->
TimîInfo
.
TimîSètus
 = 0;

1075 
	`NXPLOG_FWDNLD_D
("%x",
pDlCtxt
->
tLa°Sètus
);

1077 #i‡
PH_LIBNFC_VEN_RESET_ON_DOWNLOAD_TIMEOUT


1078 i‡–
PH_DL_STATUS_SIGNATURE_ERROR
 =
pDlCtxt
->
tLa°Sètus
 ) {

1080 
	`NXPLOG_FWDNLD_E
("Performingá VEN Reset");

1081 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀN‹mÆMode
);

1082 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀDow∆ﬂdMode
);

1083 
	`NXPLOG_FWDNLD_E
("VEN Reset Done");

1088 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
Ë
NFCSTATUS_RF_TIMEOUT
;

1090 if((
phD∆dNfc_EvítRód
 =
pDlCtxt
->
tCuºEvít
Ë|| (
phD∆dNfc_EvítWrôe
 ==ÖDlCtxt->tCurrEvent))

1092 
	`phD∆dNfc_Pro˚ssRWSeqSèã
(
pDlCtxt
,
NULL
);

1096 
	`phD∆dNfc_Pro˚ssSeqSèã
(
pDlCtxt
,
NULL
);

1102 
	}
}

1116 
	$phD∆dNfc_Re£ndTimeOutCb
(
uöt32_t
 
TimîId
, *
pC⁄ãxt
)

1118 
µhD∆dNfc_DlC⁄ãxt_t
 
pDlCtxt
 = (µhD∆dNfc_DlC⁄ãxt_t)
pC⁄ãxt
;

1120 i‡(
NULL
 !
pDlCtxt
)

1122 
	`UNUSED
(
TimîId
);

1124 if(1 =
pDlCtxt
->
TimîInfo
.
TimîSètus
)

1127 
pDlCtxt
->
TimîInfo
.
TimîSètus
 = 0;

1129 (
pDlCtxt
->
TimîInfo
.
wTimîExpSètus
) = 0;

1131 
pDlCtxt
->
tCuºSèã
 = 
phD∆dNfc_SèãSíd
;

1134 
pDlCtxt
->
bRe£ndLa°Føme
 = 
TRUE
;

1136 
	`phD∆dNfc_Pro˚ssRWSeqSèã
(
pDlCtxt
,
NULL
);

1141 
	}
}

1157 
NFCSTATUS
 
	$phD∆dNfc_Upd©eR•
(
µhD∆dNfc_DlC⁄ãxt_t
 
pDlC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
, 
uöt16_t
 
wPldLí
)

1159 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1160 
uöt16_t
 
wRódLí
 = 0;

1162 if((
NULL
 =
pDlC⁄ãxt
Ë|| (NULL =
pInfo
))

1164 
	`NXPLOG_FWDNLD_E
("Invalid Input Parameters!!");

1165 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
,
NFCSTATUS_INVALID_PARAMETER
);

1169 if(
PH_DL_CMD_WRITE
 =(
pDlC⁄ãxt
->
tCmdId
))

1171 if(
PH_DL_STATUS_OK
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1174 if(
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°WrReq
))

1176 
	`NXPLOG_FWDNLD_D
("First Write Frame Success StatusÑeceived!!");

1177 (
pDlC⁄ãxt
->
tRWInfo
.
bFú°WrReq
Ë
FALSE
;

1180 if(
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°ChunkRe•
))

1182 if(
FALSE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
))

1184 
	`NXPLOG_FWDNLD_D
("Chunked Write Frame Success StatusÑeceived!!");

1185 (
pDlC⁄ãxt
->
tRWInfo
.
wRemChunkByãs
Ë-’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1186 (
pDlC⁄ãxt
->
tRWInfo
.
bFú°ChunkRe•
Ë
FALSE
;

1190 
	`NXPLOG_FWDNLD_E
("UnExpected StatusÑeceived!!");

1191 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_FAILED
);

1195 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1197 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
Ë-’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1198 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
Ë+’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1201 if((
FALSE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°ChunkRe•
)) &&

1202 (
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
)) &&

1203 (
PHDNLDNFC_FIRST_FRAGFRAME_RESP
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
])))

1205 (
pDlC⁄ãxt
->
tRWInfo
.
bFú°ChunkRe•
Ë
TRUE
;

1206 (
pDlC⁄ãxt
->
tRWInfo
.
wRemChunkByãs
Ë-’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1207 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
Ë-(’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
Ë+ 
PHDNLDNFC_FRAME_HDR_LEN
);

1208 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
Ë+’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1211 if(
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°WrReq
))

1213 
	`NXPLOG_FWDNLD_D
("First Write Frame Success StatusÑeceived!!");

1214 (
pDlC⁄ãxt
->
tRWInfo
.
bFú°WrReq
Ë
FALSE
;

1217 if((
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFú°ChunkRe•
)) &&

1218 (
TRUE
 =(
pDlC⁄ãxt
->
tRWInfo
.
bFømesSegmíãd
)) &&

1219 (
PHDNLDNFC_NEXT_FRAGFRAME_RESP
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
])))

1221 (
pDlC⁄ãxt
->
tRWInfo
.
wRemChunkByãs
Ë-’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1222 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
Ë-’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1223 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
Ë+’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1225 if(
PH_DL_STATUS_FIRMWARE_VERSION_ERROR
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1227 
	`NXPLOG_FWDNLD_E
("Firmware Already Up To Date!!");

1228 (
pDlC⁄ãxt
->
tRWInfo
.
bFú°WrReq
Ë
FALSE
;

1230 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
) = 0;

1231 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
) = 0;

1232 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1234 if(
PH_DL_STATUS_PLL_ERROR
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1236 
	`NXPLOG_FWDNLD_E
("PLL Error StatusÑeceived!!");

1237 (
pDlC⁄ãxt
->
tLa°Sètus
Ë
PH_DL_STATUS_PLL_ERROR
;

1238 
wSètus
 = 
NFCSTATUS_WRITE_FAILED
;

1240 if(
PH_DL_STATUS_SIGNATURE_ERROR
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1242 
	`NXPLOG_FWDNLD_E
("Signature Mismatch ErrorÑeceived!!");

1244 (
pDlC⁄ãxt
->
tLa°Sètus
Ë
PH_DL_STATUS_SIGNATURE_ERROR
;

1245 
wSètus
 = 
NFCSTATUS_REJECTED
;

1247 if(
PH_DL_STATUS_MEM_BSY
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1249 
	`NXPLOG_FWDNLD_E
("Mem Busy StatusÑeceived!!");

1250 (
pDlC⁄ãxt
->
tLa°Sètus
Ë
PH_DL_STATUS_MEM_BSY
;

1251 
wSètus
 = 
NFCSTATUS_BUSY
;

1255 
	`NXPLOG_FWDNLD_E
("Unsuccessful StatusÑeceived!!");

1256 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_FAILED
);

1259 if(
PH_DL_CMD_READ
 =(
pDlC⁄ãxt
->
tCmdId
))

1261 if(
PH_DL_STATUS_OK
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1263 
wRódLí
 = (((
uöt16_t
)(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
 + 3]) << 8U) |

1264 (
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
 + 2]));

1266 if(
wRódLí
 !(
pDlC⁄ãxt
->
tRWInfo
.
wByãsToSídRecv
))

1268 
	`NXPLOG_FWDNLD_E
("Desired Length bytesÇotÑeceived!!");

1269 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_FAILED
);

1273 
	`mem˝y
(&(
pDlC⁄ãxt
->
tR•BuffInfo
.
pBuff
[’DlC⁄ãxt->
tRWInfo
.
wOff£t
)]),

1274 &(
pInfo
->
pBuff
[
PHDNLDNFC_FRAME_RDDATA_OFFSET
]),

1275 
wRódLí
);

1277 (
pDlC⁄ãxt
->
tRWInfo
.
wByãsRód
Ë+
wRódLí
;

1279 (
pDlC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë’DlC⁄ãxt->
tRWInfo
.
wByãsRód
);

1281 (
pDlC⁄ãxt
->
tRWInfo
.
wRemByãs
Ë-’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1282 (
pDlC⁄ãxt
->
tRWInfo
.
dwAddr
Ë+’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1283 (
pDlC⁄ãxt
->
tRWInfo
.
wOff£t
Ë+’DlC⁄ãxt->tRWInfo.
wByãsToSídRecv
);

1288 
	`NXPLOG_FWDNLD_E
("Unsuccessful StatusÑeceived!!");

1289 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_FAILED
);

1294 if(
PH_DL_STATUS_OK
 =(
pInfo
->
pBuff
[
PHDNLDNFC_FRAMESTATUS_OFFSET
]))

1296 if((0 !(
pDlC⁄ãxt
->
tR•BuffInfo
.
wLí
)) &&

1297 (
NULL
 !(
pDlC⁄ãxt
->
tR•BuffInfo
.
pBuff
)))

1299 
	`mem˝y
((
pDlC⁄ãxt
->
tR•BuffInfo
.
pBuff
),&(
pInfo
->pBuff[
PHDNLDNFC_FRAMESTATUS_OFFSET
 + 1]),

1300 
wPldLí
);

1302 (
pDlC⁄ãxt
->
tR•BuffInfo
.
wLí
Ë
wPldLí
;

1307 
	`NXPLOG_FWDNLD_E
("Unsuccessful StatusÑeceived!!");

1308 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_DNLD
, 
NFCSTATUS_FAILED
);

1313  
wSètus
;

1314 
	}
}

	@dnld/phDnldNfc_Internal.h

20 #i‚de‡
PHDNLDNFC_INTERNAL_H


21 
	#PHDNLDNFC_INTERNAL_H


	)

23 
	~<phD∆dNfc.h
>

24 
	~<phD∆dNfc_Cmd.h
>

25 
	~<phD∆dNfc_Sètus.h
>

27 
	#PHDNLDNFC_CMDRESP_MAX_BUFF_SIZE
 (0x100UË

	)

29 
	#PHDNLDNFC_WRITERSP_BUFF_SIZE
 (0x08UË

	)

31 
	#PHDNLDNFC_FRAME_HDR_LEN
 (0x02UË

	)

32 
	#PHDNLDNFC_FRAME_CRC_LEN
 (
PHDNLDNFC_FRAME_HDR_LEN
Ë

	)

33 
	#PHDNLDNFC_FRAME_ID_LEN
 (0x01UË

	)

35 
	#PHDNLDNFC_EEFL_ADDR_SIZE
 (0x03UË

	)

36 
	#PHDNLDNFC_DATA_SIZE
 (
PHDNLDNFC_FRAME_HDR_LEN
Ë

	)

38 
	#PHDNLDNFC_EEPROM_LOG_START_ADDR
 (0x201F80UË

	)

39 
	#PHDNLDNFC_EEPROM_LOG_END_ADDR
 (0x201FBFUË

	)

41 
	#PHDNLDNFC_MAX_LOG_SIZE
 ((
PHDNLDNFC_EEPROM_LOG_END_ADDR
 - 
PHDNLDNFC_EEPROM_LOG_START_ADDR
Ë+ 1)

	)

44 
	#PHDNLDNFC_CMDRESP_MAX_PLD_SIZE
 ((
PHDNLDNFC_CMDRESP_MAX_BUFF_SIZE
) - \

45 (
PHDNLDNFC_FRAME_HDR_LEN
 + 
PHDNLDNFC_FRAME_CRC_LEN
))

	)

50 
	ephD∆dNfc_Evít
{

51 
	mphD∆dNfc_EvítInvÆid
 = 0x00,

52 
	mphD∆dNfc_EvítRe£t
,

53 
	mphD∆dNfc_EvítGëVî
,

54 
	mphD∆dNfc_EvítWrôe
,

55 
	mphD∆dNfc_EvítRód
,

56 
	mphD∆dNfc_EvítI¡egChk
,

57 
	mphD∆dNfc_EvítGëSe¢St
,

58 
	mphD∆dNfc_EvítLog
,

59 
	mphD∆dNfc_EvítF‹˚
,

60 
	mphD∆dNfc_EvítRaw
,

61 
	mphD∆dNfc_EVENT_INT_MAX


62 }
	tphD∆dNfc_Evít_t
;

67 
	ephD∆dNfc_Sèã
{

68 
	mphD∆dNfc_SèãInô
=0x00,

69 
	mphD∆dNfc_SèãSíd
,

70 
	mphD∆dNfc_SèãRecv
,

71 
	mphD∆dNfc_SèãTimî
,

72 
	mphD∆dNfc_SèãRe•⁄£
,

73 
	mphD∆dNfc_SèãPùñöed
,

74 
	mphD∆dNfc_SèãInvÆid


75 }
	tphD∆dNfc_Sèã_t
;

80 
	ephD∆dNfc_Tønsôi⁄
{

81 
	mphD∆dNfc_Tønsôi⁄IdÀ
 = 0x00,

82 
	mphD∆dNfc_Tønsôi⁄Busy
,

83 
	mphD∆dNfc_Tønsôi⁄InvÆid


84 }
	tphD∆dNfc_Tønsôi⁄_t
;

91 
	mphD∆dNfc_FTN⁄e
 = 0,

92 
	mphD∆dNfc_ChkI¡g
,

93 
	mphD∆dNfc_FTWrôe
,

94 
	mphD∆dNfc_FTLog
,

95 
	mphD∆dNfc_FTF‹˚
,

96 
	mphD∆dNfc_FTRód
,

97 
	mphD∆dNfc_FTRaw


98 }
	tphD∆dNfc_FømeI≈utTy≥_t
;

103 
	sphD∆dNfc_FømeInfo


105 
uöt16_t
 
	mdwSídÀngth
;

106 
uöt8_t
 
	maFømeBuff
[
PHDNLDNFC_CMDRESP_MAX_BUFF_SIZE
];

107 }
	tphD∆dNfc_FømeInfo_t
,*
	tµhD∆dNfc_FømeInfo_t
;

112 
	sphD∆dNfc_FømeI≈ut


114 
phD∆dNfc_FømeI≈utTy≥_t
 
	mTy≥
;

115 
uöt32_t
 
	mdwAddr
;

116 }
	tphD∆dNfc_FømeI≈ut_t
, *
	tµhD∆dNfc_FømeI≈ut_t
;

121 
	sphD∆dNfc_R•TimîInfo


123 
uöt32_t
 
	mdwR•TimîId
;

124 
uöt8_t
 
	mTimîSètus
;

125 
NFCSTATUS
 
	mwTimîExpSètus
;

126 }
	tphD∆dNfc_R•TimîInfo_t
;

131 
	sphD∆dNfc_RWInfo


133 
uöt32_t
 
	mdwAddr
;

134 
uöt16_t
 
	mwOff£t
;

135 
uöt16_t
 
	mwRemByãs
;

136 
uöt16_t
 
	mwRemChunkByãs
;

137 
uöt16_t
 
	mwRWPldSize
;

138 
uöt16_t
 
	mwByãsToSídRecv
;

139 
uöt16_t
 
	mwByãsRód
;

140 
boﬁ_t
 
	mbFømesSegmíãd
;

141 
boﬁ_t
 
	mbFú°WrReq
;

142 
boﬁ_t
 
	mbFú°ChunkRe•
;

143 }
	tphD∆dNfc_RWInfo_t
, *
	tµhD∆dNfc_RWInfo_t
;

148 
	sphD∆dNfc_DlC⁄ãxt


150 c⁄° 
uöt8_t
 *
	mnxp_nfc_fw
;

151 c⁄° 
uöt8_t
 *
	mnxp_nfc_fwp
;

152 
uöt16_t
 
	mnxp_nfc_fwp_Àn
;

153 
uöt16_t
 
	mnxp_nfc_fw_Àn
;

154 
boﬁ_t
 
	mbRe£ndLa°Føme
;

155 
phD∆dNfc_Tønsôi⁄_t
 
	mtD∆dInProgªss
;

156 
phD∆dNfc_Evít_t
 
	mtCuºEvít
;

157 
phD∆dNfc_Sèã_t
 
	mtCuºSèã
;

158 
µhD∆dNfc_R•Cb_t
 
	mU£rCb
 ;

159 * 
	mU£rCtxt
 ;

160 
phD∆dNfc_Buff_t
 
	mtU£rD©a
;

161 
phD∆dNfc_Buff_t
 
	mtR•BuffInfo
;

162 
phD∆dNfc_FømeInfo_t
 
	mtCmdR•FømeInfo
;

163 
phD∆dNfc_FømeInfo_t
 
	mtPùeLöeWrFømeInfo
;

164 
NFCSTATUS
 
	mwCmdSídSètus
;

165 
phD∆dNfc_CmdId_t
 
	mtCmdId
;

166 
phD∆dNfc_FømeI≈ut_t
 
	mFømeI≈
;

167 
phD∆dNfc_R•TimîInfo_t
 
	mTimîInfo
;

168 
phD∆dNfc_Buff_t
 
	mtTKey
;

169 
phD∆dNfc_RWInfo_t
 
	mtRWInfo
;

170 
phD∆dNfc_Sètus_t
 
	mtLa°Sètus
;

171 }
	tphD∆dNfc_DlC⁄ãxt_t
,*
	tµhD∆dNfc_DlC⁄ãxt_t
;

174 
NFCSTATUS
 
phD∆dNfc_CmdH™dÀr
(*
pC⁄ãxt
, 
phD∆dNfc_Evít_t
 
TrigEvít
);

	@dnld/phDnldNfc_Status.h

20 #i‚de‡
PHDNLDNFC_STATUS_H


21 
	#PHDNLDNFC_STATUS_H


	)

23 
	~<phNfcSètus.h
>

27 
	#NFCSTATUS_ABORTED
 (0x0096Ë

	)

32 
	ephD∆dNfc_Sètus


34 
	mPH_DL_STATUS_PLL_ERROR
 = 0x0D,

35 
	mPH_DL_STATUS_LC_WRONG
 = 0x13,

36 
	mPH_DL_STATUS_LC_TERMINATION_NOT_SUPPORTED
 = 0x14,

37 
	mPH_DL_STATUS_LC_CREATION_NOT_SUPPORTED
 = 0x15,

38 
	mPH_DL_STATUS_LC_UNKNOWN
 = 0x16,

39 
	mPH_DL_STATUS_AUTHENTICATION_ERROR
 = 0x19,

40 
	mPH_DL_STATUS_NOT_AUTHENTICATED
 = 0x1A,

41 
	mPH_DL_STATUS_AUTHENTICATION_LOST
 = 0x1B,

42 
	mPH_DL_STATUS_WRITE_PROTECTED
 = 0x1C,

43 
	mPH_DL_STATUS_READ_PROTECTED
 = 0x1D,

44 
	mPH_DL_STATUS_ADDR_RANGE_OFL_ERROR
 = 0x1E,

45 
	mPH_DL_STATUS_BUFFER_OFL_ERROR
 = 0x1F,

46 
	mPH_DL_STATUS_MEM_BSY
 = 0x20,

47 
	mPH_DL_STATUS_SIGNATURE_ERROR
 = 0x21,

48 
	mPH_DL_STATUS_SESSION_WAS_OPEN
 = 0x22,

49 
	mPH_DL_STATUS_SESSION_WAS_CLOSED
 = 0x23,

52 
	mPH_DL_STATUS_FIRMWARE_VERSION_ERROR
 = 0x24,

53 
	mPH_DL_STATUS_LOOPBACK_DATA_MISSMATCH_ERROR
 = 0x25,

55 
	mPH_DL_STATUS_HOST_PAYLOAD_UFL_ERROR
 = 0x26,

56 
	mPH_DL_STATUS_HOST_PAYLOAD_OFL_ERROR
 = 0x27,

57 
	mPH_DL_STATUS_PROTOCOL_ERROR
 = 0x28,

59 
	mPH_DL_STATUS_INVALID_ADDR
 = 
NFCSTATUS_INVALID_PARAMETER
,

60 
	mPH_DL_STATUS_GENERIC_ERROR
 = 
NFCSTATUS_FAILED
,

61 
	mPH_DL_STATUS_ABORTED_CMD
 = 
NFCSTATUS_ABORTED
,

62 
	mPH_DL_STATUS_FLASH_WRITE_PROTECTED
 = 
PH_DL_STATUS_WRITE_PROTECTED
,

63 
	mPH_DL_STATUS_FLASH_READ_PROTECTED
 = 
PH_DL_STATUS_READ_PROTECTED
,

64 
	mPH_DL_STATUS_USERDATA_WRITE_PROTECTED
 = 
PH_DL_STATUS_WRITE_PROTECTED
,

65 
	mPH_DL_STATUS_USERDATA_READ_PROTECTED
 = 
PH_DL_STATUS_READ_PROTECTED
,

66 
	mPH_DL_STATUS_OK
 = 
NFCSTATUS_SUCCESS


67 } 
	tphD∆dNfc_Sètus_t
 ;

	@dnld/phDnldNfc_Utils.c

22 
	~<phD∆dNfc_Utûs.h
>

23 
	~<phNxpLog.h
>

25 
uöt16_t
 c⁄° 
	gaCrcTab
[256] =

59 
uöt16_t
 
	$phD∆dNfc_CÆcCrc16
(
uöt8_t
* 
pBuff
, 
uöt16_t
 
wLí
)

61 
uöt16_t
 
wTmp
;

62 
uöt16_t
 
wVÆue
;

63 
uöt16_t
 
wCrc
 = 0xffff;

64 
uöt32_t
 
i
;

67 if((
NULL
 =
pBuff
Ë|| (0 =
wLí
))

69 
	`NXPLOG_FWDNLD_W
("Invalid Params supplied!!");

74 
i
 = 0; i < 
wLí
; i++)

76 
wVÆue
 = 0x00ffU & (
uöt16_t
Ë
pBuff
[
i
];

77 
wTmp
 = (
wCrc
 >> 8UË^ 
wVÆue
;

78 
wCrc
 = (wCr¯<< 8UË^ 
aCrcTab
[
wTmp
];

82  
wCrc
;

83 
	}
}

	@dnld/phDnldNfc_Utils.h

20 #i‚de‡
PHDNLDNFC_UTILS_H


21 
	#PHDNLDNFC_UTILS_H


	)

23 
	~<phD∆dNfc.h
>

25 
uöt16_t
 
phD∆dNfc_CÆcCrc16
(
uöt8_t
* 
pBuff
, uöt16_à
wLí
);

	@dnld/phNxpNciHal_Dnld.c

17 
	~<phTmlNfc.h
>

18 
	~<phD∆dNfc.h
>

19 
	~<phNxpNciHÆ_D∆d.h
>

20 
	~<phNxpNciHÆ_utûs.h
>

21 
	~<phNxpLog.h
>

22 
	~<phNxpC⁄fig.h
>

25 
	#PHLIBNFC_IOCTL_DNLD_MAX_ATTEMPTS
 3

	)

26 
	#PHLIBNFC_IOCTL_DNLD_GETVERLEN
 (0x0BU)

	)

27 
	#PHLIBNFC_IOCTL_DNLD_GETVERLEN_MRA2_1
 (0x09U)

	)

28 
	#PHLIBNFC_DNLD_MEM_READ
 (0xECU)

	)

29 
	#PHLIBNFC_DNLD_MEM_WRITE
 (0xEDU)

	)

30 
	#PHLIBNFC_DNLD_READ_LOG
 (0xEEU)

	)

31 
	#NFC_MEM_READ
 (0xD0U)

	)

32 
	#NFC_MEM_WRITE
 (0xD1U)

	)

33 
	#NFC_FW_DOWNLOAD
 (0x09F7U)

	)

36 
uöt16_t
 
wFwVî
;

37 
uöt16_t
 
wMwVî
;

40 
	sphLibNfc_Io˘lSëRfC⁄fig


42 
uöt8_t
 
	mbNumOfP¨ams
;

43 
uöt8_t
 *
	mpI≈utBuf„r
;

44 
uöt8_t
 
	mbSëSysPmuFœg
;

45 }
	tphLibNfc_Io˘lSëRfC⁄fig
;

48 
	sphLibNfc_EELogP¨ams


50 
uöt16_t
 
	mwCuºMwVî
;

51 
uöt16_t
 
	mwCuºFwVî
;

52 
uöt16_t
 
	mwNumD∆dTrig
;

53 
uöt16_t
 
	mwNumD∆dSuc˚ss
;

54 
uöt16_t
 
	mwNumD∆dFaû
;

55 
uöt16_t
 
	mwD∆dFaûC¡
;

56 
boﬁ_t
 
	mbC⁄fig
;

58 } 
	tphLibNfc_EELogP¨ams_t
;

63 
boﬁ_t
 
	mbD∆dEïromWrôe
;

64 
boﬁ_t
 
	mbSkùSeq
;

65 
boﬁ_t
 
	mbSkùRe£t
;

66 
boﬁ_t
 
	mbSkùF‹˚
;

67 
boﬁ_t
 
	mbPªvSes¢O≥n
;

68 
boﬁ_t
 
	mbLibNfcCtxtMem
;

69 
boﬁ_t
 
	mbD∆dInôüãd
;

70 
boﬁ_t
 
	mbSídNciCmd
;

71 
uöt8_t
 
	mbChùVî
;

72 
boﬁ_t
 
	mbD∆dRecovîy
;

73 
boﬁ_t
 
	mbF‹˚D∆d
;

74 
boﬁ_t
 
	mbRëryD∆d
;

75 
uöt8_t
 
	mbD∆dAâem±s
;

76 
uöt16_t
 
	mIo˘lCode
;

77 
boﬁ_t
 
	mbD∆dAâem±Faûed
;

78 
NFCSTATUS
 
	mbLa°Sètus
;

79 
phLibNfc_EELogP¨ams_t
 
	mtLogP¨ams
;

80 
uöt8_t
 
	mbClkSrcVÆ
;

81 
uöt8_t
 
	mbClkFªqVÆ
;

82 } 
	tphNxpNciHÆ_fw_Io˘l_C¡x_t
;

86 
phNxpNciHÆ_fw_Io˘l_C¡x_t
 
	ggphNxpNciHÆ_fw_Io˘lCtx
;

89 
NFCSTATUS


90 
phNxpNciHÆ_fw_d∆d_ª£t
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

93 
phNxpNciHÆ_fw_d∆d_ª£t_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

95 
NFCSTATUS


96 
phNxpNciHÆ_fw_d∆d_f‹˚
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

99 
phNxpNciHÆ_fw_d∆d_f‹˚_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

102 
phNxpNciHÆ_fw_d∆d_n‹mÆ_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

104 
NFCSTATUS


105 
phNxpNciHÆ_fw_d∆d_n‹mÆ
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

108 
phNxpNciHÆ_fw_d∆d_gë_vîsi⁄_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

110 
NFCSTATUS


111 
phNxpNciHÆ_fw_d∆d_gë_vîsi⁄
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

114 
phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

116 
NFCSTATUS


117 
phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

120 
phNxpNciHÆ_fw_d∆d_log_ªad_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

122 
NFCSTATUS


123 
phNxpNciHÆ_fw_d∆d_log_ªad
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

126 
phNxpNciHÆ_fw_d∆d_wrôe_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

128 
NFCSTATUS


129 
phNxpNciHÆ_fw_d∆d_wrôe
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

132 
phNxpNciHÆ_fw_d∆d_chk_öãgrôy_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

134 
NFCSTATUS


135 
phNxpNciHÆ_fw_d∆d_chk_öãgrôy
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

138 
phNxpNciHÆ_fw_d∆d_log_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

140 
NFCSTATUS


141 
phNxpNciHÆ_fw_d∆d_log
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

144 
phNxpNciHÆ_fw_d∆d_£nd_ncicmd_Cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

146 
NFCSTATUS


147 
phNxpNciHÆ_fw_d∆d_£nd_ncicmd
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

149 
NFCSTATUS


150 
phNxpNciHÆ_fw_d∆d_ªcovî
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

152 
NFCSTATUS


153 
phNxpNciHÆ_fw_d∆d_com∂ëe
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
);

156 
NFCSTATUS


157 
phLibNfc_VîifyCrcSètus
(
uöt8_t
 
bCrcSètus
);

159 
phNxpNciHÆ_fw_d∆d_ªcovî_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

160 * 
pInfo
);

162 
NFCSTATUS
 
phNxpNciHÆ_fw_£q_h™dÀr
(
	$NFCSTATUS
 (*
£q_h™dÀr
[])(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
));

165 
	$NFCSTATUS
 (*
phNxpNciHÆ_dw∆d_£qh™dÀr
[])(

166 * 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
) = {

167 
phNxpNciHÆ_fw_d∆d_n‹mÆ
,

168 
phNxpNciHÆ_fw_d∆d_n‹mÆ
,

169 
phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e
,

170 
phNxpNciHÆ_fw_d∆d_gë_vîsi⁄
,

171 
phNxpNciHÆ_fw_d∆d_log_ªad
,

172 
phNxpNciHÆ_fw_d∆d_wrôe
,

173 
phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e
,

174 
phNxpNciHÆ_fw_d∆d_gë_vîsi⁄
,

175 
phNxpNciHÆ_fw_d∆d_log
,

176 
phNxpNciHÆ_fw_d∆d_chk_öãgrôy
,

177 
NULL


178 
	}
};

181 
	$NFCSTATUS
 (*
phNxpNciHÆ_dw∆d_ªc_£qh™dÀr
[])(

182 * 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
) = {

183 
phNxpNciHÆ_fw_d∆d_ª£t
,

184 
phNxpNciHÆ_fw_d∆d_f‹˚
,

185 
phNxpNciHÆ_fw_d∆d_ªcovî
,

186 
phNxpNciHÆ_fw_d∆d_£nd_ncicmd
,

187 
NULL


188 
	}
};

191 
	$NFCSTATUS
 (*
phNxpNciHÆ_dw∆d_log_£qh™dÀr
[])(

192 * 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
) = {

193 
phNxpNciHÆ_fw_d∆d_log
,

194 
NULL


195 
	}
};

206 
	$phNxpNciHÆ_fw_d∆d_ª£t_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

207 * 
pInfo
)

209 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

211 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

213 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_reset_cb - Request Successful");

217 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_reset_cb - Request Failed!!");

219 
p_cb_d©a
->
°©us
 = status;

221 
	`SEM_POST
(
p_cb_d©a
);

224 
	}
}

235 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_ª£t
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

236 * 
pInfo
)

238 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

239 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

241 if((
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
)Ë|| (TRUE =(gphNxpNciHÆ_fw_Io˘lCtx.
bSkùRe£t
)))

243 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùRe£t
))

245 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùRe£t
Ë
FALSE
;

247  
NFCSTATUS_SUCCESS
;

250 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

252 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_reset Create dnld_cb_data failed");

253  
NFCSTATUS_FAILED
;

255 
wSètus
 = 
	`phD∆dNfc_Re£t
((
µhD∆dNfc_R•Cb_t
)&
phNxpNciHÆ_fw_d∆d_ª£t_cb
, (*Ë&
cb_d©a
);

257 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

259 
	`NXPLOG_FWDNLD_E
("phDnldNfc_Reset failed");

260 
wSètus
 = 
NFCSTATUS_FAILED
;

261 
˛ón_™d_ªtu∫
;

265 i‡(
	`SEM_WAIT
(
cb_d©a
))

267 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_reset semaphoreÉrror");

268 
wSètus
 = 
NFCSTATUS_FAILED
;

269 
˛ón_™d_ªtu∫
;

272 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

274 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_reset cb failed");

275 
wSètus
 = 
NFCSTATUS_FAILED
;

276 
˛ón_™d_ªtu∫
;

279 
wSètus
 = 
NFCSTATUS_SUCCESS
;

281 
˛ón_™d_ªtu∫
:

282 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

285  
wSètus
;

286 
	}
}

297 
	$phNxpNciHÆ_fw_d∆d_n‹mÆ_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

298 * 
pInfo
)

300 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

302 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

304 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_normal_cb - Request Successful");

308 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_normal_cb - Request Failed!!");

310 
°©us
 = 
NFCSTATUS_SUCCESS
;

312 
p_cb_d©a
->
°©us
 = status;

314 
	`SEM_POST
(
p_cb_d©a
);

315 
	`u¶ìp
(1000 * 10);

318 
	}
}

329 
	$phNxpNciHÆ_fw_d∆d_f‹˚_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

330 * 
pInfo
)

332 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

334 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

336 
	`NXPLOG_FWDNLD_D
("phLibNfc_DnldForceCb - Request Successful");

337 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

338 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
TRUE
;

339 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùRe£t
Ë
TRUE
;

344 
°©us
 = 
NFCSTATUS_SUCCESS
;

345 
	`NXPLOG_FWDNLD_E
("phLibNfc_DnldForceCb - Request Failed!!");

348 
p_cb_d©a
->
°©us
 = status;

350 
	`SEM_POST
(
p_cb_d©a
);

351 
	`u¶ìp
(1000 * 10);

354 
	}
}

365 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_n‹mÆ
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

366 * 
pInfo
)

368 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

369 
uöt8_t
 
bClkVÆ
[2];

370 
phD∆dNfc_Buff_t
 
tD©a
;

371 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

373 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
))

375  
NFCSTATUS_SUCCESS
;

383 
bClkVÆ
[0] = 
gphNxpNciHÆ_fw_Io˘lCtx
.
bClkSrcVÆ
;

384 
bClkVÆ
[1] = 
gphNxpNciHÆ_fw_Io˘lCtx
.
bClkFªqVÆ
;

386 (
tD©a
.
pBuff
Ë
bClkVÆ
;

387 (
tD©a
.
wLí
Ë(
bClkVÆ
);

389 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
))

391 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
)++;

394 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

396 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_reset Create dnld_cb_data failed");

397  
NFCSTATUS_FAILED
;

399 
wSètus
 = 
	`phD∆dNfc_F‹˚
(&
tD©a
,(
µhD∆dNfc_R•Cb_t
)&
phNxpNciHÆ_fw_d∆d_n‹mÆ_cb
, (*Ë&
cb_d©a
);

401 if(
NFCSTATUS_PENDING
 !
wSètus
)

403 
	`NXPLOG_FWDNLD_E
("phDnldNfc_Normal failed");

404 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

405 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

406 
˛ón_™d_ªtu∫
;

411 i‡(
	`SEM_WAIT
(
cb_d©a
))

413 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_normal semaphoreÉrror");

414 
wSètus
 = 
NFCSTATUS_FAILED
;

415 
˛ón_™d_ªtu∫
;

418 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

420 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_normal cb failed");

421 
wSètus
 = 
NFCSTATUS_FAILED
;

422 
˛ón_™d_ªtu∫
;

425 
wSètus
 = 
NFCSTATUS_SUCCESS
;

427 
˛ón_™d_ªtu∫
:

428 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

430  
wSètus
;

431 
	}
}

442 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_f‹˚
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

443 * 
pInfo
)

445 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

446 
uöt8_t
 
bClkVÆ
[2];

447 
phD∆dNfc_Buff_t
 
tD©a
;

448 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

450 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
))

452  
NFCSTATUS_SUCCESS
;

460 
bClkVÆ
[0] = 
gphNxpNciHÆ_fw_Io˘lCtx
.
bClkSrcVÆ
;

461 
bClkVÆ
[1] = 
gphNxpNciHÆ_fw_Io˘lCtx
.
bClkFªqVÆ
;

463 (
tD©a
.
pBuff
Ë
bClkVÆ
;

464 (
tD©a
.
wLí
Ë(
bClkVÆ
);

466 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
))

468 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
)++;

471 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

473 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_reset Create dnld_cb_data failed");

474  
NFCSTATUS_FAILED
;

476 
wSètus
 = 
	`phD∆dNfc_F‹˚
(&
tD©a
,(
µhD∆dNfc_R•Cb_t
)&
phNxpNciHÆ_fw_d∆d_f‹˚_cb
, (*Ë&
cb_d©a
);

478 if(
NFCSTATUS_PENDING
 !
wSètus
)

480 
	`NXPLOG_FWDNLD_E
("phDnldNfc_Force failed");

481 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

482 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

483 
˛ón_™d_ªtu∫
;

488 i‡(
	`SEM_WAIT
(
cb_d©a
))

490 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_force semaphoreÉrror");

491 
wSètus
 = 
NFCSTATUS_FAILED
;

492 
˛ón_™d_ªtu∫
;

495 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

497 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_force cb failed");

498 
wSètus
 = 
NFCSTATUS_FAILED
;

499 
˛ón_™d_ªtu∫
;

502 
wSètus
 = 
NFCSTATUS_SUCCESS
;

504 
˛ón_™d_ªtu∫
:

505 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

507  
wSètus
;

508 
	}
}

519 
	$phNxpNciHÆ_fw_d∆d_gë_vîsi⁄_cb
(* 
pC⁄ãxt
,

520 
NFCSTATUS
 
°©us
, * 
pInfo
)

522 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

523 
NFCSTATUS
 
wSètus
 = 
°©us
;

524 
µhD∆dNfc_Buff_t
 
pRe•Buff
;

525 
uöt16_t
 
wFwVîn
 = 0;

526 
uöt16_t
 
wMwVîn
 = 0;

527 
uöt8_t
 
bHwVî
 = 0;

528 
uöt8_t
 
bEx≥˘edLí
 = 0;

529 
uöt8_t
 
bNewVî
[2];

530 
uöt8_t
 
bCuºVî
[2];

532 i‡((
NFCSTATUS_SUCCESS
 =
wSètus
Ë&& (
NULL
 !
pInfo
))

534 
	`NXPLOG_FWDNLD_D
 ("phNxpNciHal_fw_dnld_get_version_cb - Request Successful");

536 
pRe•Buff
 = (
µhD∆dNfc_Buff_t
Ë
pInfo
;

538 i‡((0 !
pRe•Buff
->
wLí
Ë&& (
NULL
 !pRe•Buff->
pBuff
))

540 
bHwVî
 = (
pRe•Buff
->
pBuff
[0]);

541 
bHwVî
 &= 0x0F;

543 i‡((
PHDNLDNFC_HWVER_MRA2_1
 =
bHwVî
Ë|| (
PHDNLDNFC_HWVER_MRA2_2
 == bHwVer))

545 
bEx≥˘edLí
 = 
PHLIBNFC_IOCTL_DNLD_GETVERLEN_MRA2_1
;

546 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bChùVî
Ë
bHwVî
;

548 i‡((
bHwVî
 >
PHDNLDNFC_HWVER_MRA1_0
) && (bHwVer

549 <
PHDNLDNFC_HWVER_MRA2_0
))

551 
bEx≥˘edLí
 = 
PHLIBNFC_IOCTL_DNLD_GETVERLEN
;

552 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bChùVî
Ë
bHwVî
;

556 
wSètus
 = 
NFCSTATUS_FAILED
;

557 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version_cb - Invalid ChipVersion!!");

562 
wSètus
 = 
NFCSTATUS_FAILED
;

563 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version_cb - Version Resp Buff Invalid...\n");

566 i‡((
NFCSTATUS_SUCCESS
 =
wSètus
Ë&& (
bEx≥˘edLí
 =
pRe•Buff
->
wLí
)

567 && (
NULL
 !
pRe•Buff
->
pBuff
))

569 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_get_version_cb - Valid Version Resp Buff!!...\n");

572 
	`mem˝y
(
bCuºVî
, &(
pRe•Buff
->
pBuff
[
bEx≥˘edLí
 - 2]),

573 (
bCuºVî
));

574 
wFwVîn
 = 
wFwVî
;

575 
wMwVîn
 = 
wMwVî
;

577 
	`mem˝y
(
bNewVî
,&
wFwVîn
,(bNewVer));

581 i‡((
pRe•Buff
->
pBuff
[1] =0x07Ë&&(
bNewVî
[1] !=0x01))

583 
	`NXPLOG_FWDNLD_E
("C1 FW on C2 chip isÇotállowed - FW Major Version!= 1 on ES2.2");

584 
wSètus
 = 
NFCSTATUS_NOT_ALLOWED
;

587 if((
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
)Ë&& (
bNewVî
[1] < 
bCuºVî
[1]))

589 
	`NXPLOG_FWDNLD_E
("Version Check Failed - MajorVerNum Mismatch\n");

590 
wSètus
 = 
NFCSTATUS_NOT_ALLOWED
;

593 if((
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
)Ë&& ((
bNewVî
[0] =
bCuºVî
[0]) &&

594 (
bNewVî
[1] =
bCuºVî
[1])))

596 
wSètus
 = 
NFCSTATUS_SUCCESS
;

597 #i‡(
PH_LIBNFC_ENABLE_FORCE_DOWNLOAD
 == 0)

598 
	`NXPLOG_FWDNLD_D
("Version Already UpToDate!!\n");

599 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
Ë
TRUE
;

601 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
Ë
TRUE
;

607 i‡((
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
)Ë&& ((
bNewVî
[0] !
bCuºVî
[0]) ||

608 (
bNewVî
[1] !
bCuºVî
[1])))

610 
	`NXPLOG_FWDNLD_E
("Version Not Updated After Download!!\n");

611 
wSètus
 = 
NFCSTATUS_FAILED
;

615 
	`NXPLOG_FWDNLD_D
("Version Check Successful\n");

617 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
))

619 
	`NXPLOG_FWDNLD_W
("Updating Fw & Mw Versions..");

620 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wCuºMwVî
Ë
wMwVîn
;

621 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wCuºFwVî
Ë
wFwVîn
;

628 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version_cb - Version Resp Buff Invalid...\n");

633 
wSètus
 = 
NFCSTATUS_FAILED
;

634 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version_cb - Request Failed!!");

637 
p_cb_d©a
->
°©us
 = 
wSètus
;

638 
	`SEM_POST
(
p_cb_d©a
);

640 
	}
}

651 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_gë_vîsi⁄
(* 
pC⁄ãxt
,

652 
NFCSTATUS
 
°©us
, * 
pInfo
)

654 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

655 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

656 
uöt8_t
 
bGëVîRes
[11];

657 
phD∆dNfc_Buff_t
 
tD∆dBuff
;

659 if((
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
)) ||

660 (
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
)))

662  
NFCSTATUS_SUCCESS
;

665 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

667 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version cb_data creation failed");

668  
NFCSTATUS_FAILED
;

671 
tD∆dBuff
.
pBuff
 = 
bGëVîRes
;

672 
tD∆dBuff
.
wLí
 = (
bGëVîRes
);

674 
wSètus
 = 
	`phD∆dNfc_GëVîsi⁄
(&
tD∆dBuff
,

675 (
µhD∆dNfc_R•Cb_t
Ë&
phNxpNciHÆ_fw_d∆d_gë_vîsi⁄_cb
,

676 (*Ë&
cb_d©a
);

677 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

679 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version failed");

680 
°©us
 = 
NFCSTATUS_FAILED
;

681 
˛ón_™d_ªtu∫
;

684 i‡(
	`SEM_WAIT
(
cb_d©a
))

686 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version semaphoreÉrror");

687 
wSètus
 = 
NFCSTATUS_FAILED
;

688 
˛ón_™d_ªtu∫
;

691 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

693 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version cb failed");

694 
wSètus
 = 
NFCSTATUS_FAILED
;

695 
˛ón_™d_ªtu∫
;

698 
wSètus
 = 
NFCSTATUS_SUCCESS
;

700 
˛ón_™d_ªtu∫
:

701 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

703  
wSètus
;

704 
	}
}

715 
	$phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e_cb
(* 
pC⁄ãxt
,

716 
NFCSTATUS
 
°©us
, * 
pInfo
)

718 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

719 
NFCSTATUS
 
wSètus
 = 
°©us
;

720 
µhD∆dNfc_Buff_t
 
pRe•Buff
;

721 i‡((
NFCSTATUS_SUCCESS
 =
wSètus
Ë&& (
NULL
 !
pInfo
))

723 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_get_sessn_state_cb - Request Successful");

725 
pRe•Buff
 = (
µhD∆dNfc_Buff_t
Ë
pInfo
;

727 i‡((3 =(
pRe•Buff
->
wLí
)Ë&& (
NULL
 !’Re•Buff->
pBuff
)))

729 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_get_sessn_state_cb - Valid Session State Resp Buff!!...");

731 i‡(
phD∆dNfc_LCO≥r
 =
pRe•Buff
->
pBuff
[2])

733 i‡(
PHLIBNFC_FWDNLD_SESSNOPEN
 =
pRe•Buff
->
pBuff
[0])

735 
	`NXPLOG_FWDNLD_E
("Prev Fw Upgrade Session still Open..");

736 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
Ë
TRUE
;

737 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
))

739 
	`NXPLOG_FWDNLD_D
("Session still Openáfter Prev Fw Upgradeáttempt!!");

741 if((
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
Ë< 
PHLIBNFC_IOCTL_DNLD_MAX_ATTEMPTS
)

743 
	`NXPLOG_FWDNLD_W
("Setting Dnld Retry ..");

744 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
TRUE
;

748 
	`NXPLOG_FWDNLD_E
("Max Dnld Retry Counts Exceeded!!");

749 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

751 
wSètus
 = 
NFCSTATUS_FAILED
;

756 
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
 = 
FALSE
;

761 
wSètus
 = 
NFCSTATUS_FAILED
;

762 
	`NXPLOG_FWDNLD_E
("PN547Çot in Operational State..Fw UpgradeÇotállowed!!");

767 
wSètus
 = 
NFCSTATUS_FAILED
;

768 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_sessn_state_cb - Session State Resp Buff Invalid...");

773 
wSètus
 = 
NFCSTATUS_FAILED
;

774 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_sessn_state_cb - Request Failed!!");

777 
p_cb_d©a
->
°©us
 = 
wSètus
;

779 
	`SEM_POST
(
p_cb_d©a
);

782 
	}
}

793 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e
(* 
pC⁄ãxt
,

794 
NFCSTATUS
 
°©us
, * 
pInfo
)

796 
phD∆dNfc_Buff_t
 
tD∆dBuff
;

797 
uöt8_t
 
bGSnSèãRes
[3];

798 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

799 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

801 i‡(
TRUE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
)

803  
NFCSTATUS_SUCCESS
;

806 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

808 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_get_version cb_data creation failed");

809  
NFCSTATUS_FAILED
;

812 
tD∆dBuff
.
pBuff
 = 
bGSnSèãRes
;

813 
tD∆dBuff
.
wLí
 = (
bGSnSèãRes
);

815 
wSètus
 = 
	`phD∆dNfc_GëSessi⁄Sèã
(&
tD∆dBuff
,

816 &
phNxpNciHÆ_fw_d∆d_gë_£s¢_°©e_cb
, (*Ë&
cb_d©a
);

817 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

819 
	`NXPLOG_FWDNLD_E
("phDnldNfc_GetSessionState failed");

820 
°©us
 = 
NFCSTATUS_FAILED
;

821 
˛ón_™d_ªtu∫
;

825 i‡(
	`SEM_WAIT
(
cb_d©a
))

827 
	`NXPLOG_FWDNLD_E
("phDnldNfc_GetSessionState semaphoreÉrror");

828 
wSètus
 = 
NFCSTATUS_FAILED
;

829 
˛ón_™d_ªtu∫
;

832 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

834 
	`NXPLOG_FWDNLD_E
("phDnldNfc_GetSessionState cb failed");

835 
wSètus
 = 
NFCSTATUS_FAILED
;

836 
˛ón_™d_ªtu∫
;

839 
wSètus
 = 
NFCSTATUS_SUCCESS
;

841 
˛ón_™d_ªtu∫
:

842 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

844  
wSètus
;

845 
	}
}

856 
	$phNxpNciHÆ_fw_d∆d_log_ªad_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

857 * 
pInfo
)

859 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

861 if((
NFCSTATUS_SUCCESS
 =
°©us
Ë&& (
NULL
 !
pInfo
))

863 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_log_read_cb - Request Successful");

867 
°©us
 = 
NFCSTATUS_FAILED
;

868 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log_read_cb - Request Failed!!");

871 
p_cb_d©a
->
°©us
 = status;

872 
	`SEM_POST
(
p_cb_d©a
);

875 
	}
}

886 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_log_ªad
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

887 * 
pInfo
)

889 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

890 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

891 
phD∆dNfc_Buff_t
 
D©a
;

893 if((((
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
)Ë|| (TRUE =(gphNxpNciHÆ_fw_Io˘lCtx.
bF‹˚D∆d
))) &&

894 (
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
))Ë|| (((
TRUE
 == (gphNxpNciHal_fw_IoctlCtx.bPrevSessnOpen))) &&

895 (
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
))))

898  
NFCSTATUS_SUCCESS
;

901 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

903 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log_read cb_data creation failed");

904  
NFCSTATUS_FAILED
;

907 (
D©a
.
pBuff
Ë(*)&(
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
);

908 (
D©a
.
wLí
Ë(
phLibNfc_EELogP¨ams_t
);

910 
wSètus
 = 
	`phD∆dNfc_RódLog
(&
D©a
,

911 (
µhD∆dNfc_R•Cb_t
Ë&
phNxpNciHÆ_fw_d∆d_log_ªad_cb
,

912 (*Ë&
cb_d©a
);

913 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

915 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log_read failed");

916 
°©us
 = 
NFCSTATUS_FAILED
;

917 
˛ón_™d_ªtu∫
;

921 i‡(
	`SEM_WAIT
(
cb_d©a
))

923 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log_read semaphoreÉrror");

924 
wSètus
 = 
NFCSTATUS_FAILED
;

925 
˛ón_™d_ªtu∫
;

928 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

930 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log_read cb failed");

931 
wSètus
 = 
NFCSTATUS_FAILED
;

932 
˛ón_™d_ªtu∫
;

935 
wSètus
 = 
NFCSTATUS_SUCCESS
;

937 
˛ón_™d_ªtu∫
:

938 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

940  
wSètus
;

941 
	}
}

952 
	$phNxpNciHÆ_fw_d∆d_wrôe_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

953 * 
pInfo
)

955 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

957 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

959 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_write_cb - Request Successful");

960 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dEïromWrôe
Ë
FALSE
;

961 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
))

963 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wNumD∆dSuc˚ss
) += 1;

965 if((
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wD∆dFaûC¡
) > 0)

967 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_write_cb - Resetting DnldFailCnt");

968 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wD∆dFaûC¡
) = 0;

971 if(
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
bC⁄fig
))

973 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_write_cb - Setting bConfig for use by NCI mode");

974 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
bC⁄fig
Ë
TRUE
;

979 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±Faûed
))

981 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±Faûed
Ë
FALSE
;

986 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
))

988 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wNumD∆dFaû
) += 1;

989 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wD∆dFaûC¡
) += 1;

990 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
bC⁄fig
Ë
FALSE
;

992 if(
NFCSTATUS_WRITE_FAILED
 =
°©us
)

994 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
Ë
TRUE
;

995 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
TRUE
;

999 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_write_cb - Request Failed!!");

1002 
p_cb_d©a
->
°©us
 = status;

1003 
	`SEM_POST
(
p_cb_d©a
);

1006 
	}
}

1017 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_wrôe
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1018 * 
pInfo
)

1020 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1021 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

1023 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
))

1025 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1028 if((
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
))

1029 && (
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
)))

1031  
NFCSTATUS_SUCCESS
;

1034 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

1036 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_write cb_data creation failed");

1037  
NFCSTATUS_FAILED
;

1039 if(
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
))

1041 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_write - Incrementing NumDnldTrig..");

1042 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
TRUE
;

1043 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
)++;

1044 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wNumD∆dTrig
) += 1;

1046 
wSètus
 = 
	`phD∆dNfc_Wrôe
(
FALSE
, 
NULL
,

1047 (
µhD∆dNfc_R•Cb_t
Ë&
phNxpNciHÆ_fw_d∆d_wrôe_cb
,

1048 (*Ë&
cb_d©a
);

1049 if(
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
))

1051 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

1053 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_write failed");

1054 
°©us
 = 
NFCSTATUS_FAILED
;

1055 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wNumD∆dFaû
) += 1;

1056 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
wD∆dFaûC¡
) += 1;

1057 (
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
.
bC⁄fig
Ë
FALSE
;

1058 
˛ón_™d_ªtu∫
;

1062 i‡(
	`SEM_WAIT
(
cb_d©a
))

1064 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_write semaphoreÉrror");

1065 
wSètus
 = 
NFCSTATUS_FAILED
;

1066 
˛ón_™d_ªtu∫
;

1069 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

1071 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_write cb failed");

1072 
wSètus
 = 
cb_d©a
.
°©us
;

1073 
˛ón_™d_ªtu∫
;

1076 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1078 
˛ón_™d_ªtu∫
:

1079 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1081  
wSètus
;

1082 
	}
}

1093 
	$phNxpNciHÆ_fw_d∆d_chk_öãgrôy_cb
(* 
pC⁄ãxt
,

1094 
NFCSTATUS
 
°©us
, * 
pInfo
)

1096 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

1097 
NFCSTATUS
 
wSètus
 = 
°©us
;

1098 
µhD∆dNfc_Buff_t
 
pRe•Buff
;

1101 i‡((
NFCSTATUS_SUCCESS
 =
wSètus
Ë&& (
NULL
 !
pInfo
))

1103 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_chk_integrity_cb - Request Successful");

1104 
pRe•Buff
 = (
µhD∆dNfc_Buff_t
Ë
pInfo
;

1106 i‡((31 =(
pRe•Buff
->
wLí
)Ë&& (
NULL
 !’Re•Buff->
pBuff
)))

1108 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_chk_integrity_cb - Valid Resp Buff!!...\n");

1109 
wSètus
 = 
	`phLibNfc_VîifyCrcSètus
(
pRe•Buff
->
pBuff
[0]);

1116 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_chk_integrity_cb - Resp Buff Invalid...\n");

1121 
wSètus
 = 
NFCSTATUS_FAILED
;

1122 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_chk_integrity_cb - Request Failed!!");

1125 
p_cb_d©a
->
°©us
 = 
wSètus
;

1127 
	`SEM_POST
(
p_cb_d©a
);

1130 
	}
}

1141 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_chk_öãgrôy
(* 
pC⁄ãxt
,

1142 
NFCSTATUS
 
°©us
, * 
pInfo
)

1144 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1145 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

1146 
phD∆dNfc_Buff_t
 
tD∆dBuff
;

1147 
uöt8_t
 
bChkI¡gRes
[31];

1149 if(
TRUE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
)

1151 
	`NXPLOG_FWDNLD_D
("Previous Upload session is open..Cannot issue ChkIntegrity Cmd!!");

1152  
NFCSTATUS_SUCCESS
;

1155 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
))

1157  
NFCSTATUS_SUCCESS
;

1159 if(
TRUE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
)

1161 
	`NXPLOG_FWDNLD_E
("Previous Upload session is open..Cannot issue ChkIntegrity Cmd!!");

1162  
NFCSTATUS_SUCCESS
;

1165 
tD∆dBuff
.
pBuff
 = 
bChkI¡gRes
;

1166 
tD∆dBuff
.
wLí
 = (
bChkI¡gRes
);

1168 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

1170 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_chk_integrity cb_data creation failed");

1171  
NFCSTATUS_FAILED
;

1174 
wSètus
 = 
	`phD∆dNfc_CheckI¡egrôy
((
gphNxpNciHÆ_fw_Io˘lCtx
.
bChùVî
),

1175 &
tD∆dBuff
, &
phNxpNciHÆ_fw_d∆d_chk_öãgrôy_cb
,

1176 (*Ë&
cb_d©a
);

1177 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

1179 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_chk_integrity failed");

1180 
°©us
 = 
NFCSTATUS_FAILED
;

1181 
˛ón_™d_ªtu∫
;

1185 i‡(
	`SEM_WAIT
(
cb_d©a
))

1187 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_chk_integrity semaphoreÉrror");

1188 
wSètus
 = 
NFCSTATUS_FAILED
;

1189 
˛ón_™d_ªtu∫
;

1192 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

1194 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_chk_integrity cb failed");

1195 
wSètus
 = 
NFCSTATUS_FAILED
;

1196 
˛ón_™d_ªtu∫
;

1199 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1201 
˛ón_™d_ªtu∫
:

1202 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1204  
wSètus
;

1205 
	}
}

1216 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_ªcovî
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1217 * 
pInfo
)

1219 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1220 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

1222 
	`UNUSED
(
pInfo
);

1223 
	`UNUSED
(
°©us
);

1225 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
))

1227 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

1229 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_recover cb_data creation failed");

1230  
NFCSTATUS_FAILED
;

1232 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
)++;

1235 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1237 
wSètus
 = 
	`phD∆dNfc_Wrôe
(
TRUE
,
NULL
,(
µhD∆dNfc_R•Cb_t
)&
phNxpNciHÆ_fw_d∆d_ªcovî_cb
, (*Ë&
cb_d©a
);

1239 if(
NFCSTATUS_PENDING
 !
wSètus
)

1241 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

1242 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1243 
˛ón_™d_ªtu∫
;

1246 i‡(
	`SEM_WAIT
(
cb_d©a
))

1248 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_recover semaphoreÉrror");

1249 
wSètus
 = 
NFCSTATUS_FAILED
;

1250 
˛ón_™d_ªtu∫
;

1253 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

1255 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_recover cb failed");

1256 
wSètus
 = 
NFCSTATUS_FAILED
;

1257 
˛ón_™d_ªtu∫
;

1259 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1261 
˛ón_™d_ªtu∫
:

1262 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1265  
wSètus
;

1266 
	}
}

1277 
	$phNxpNciHÆ_fw_d∆d_ªcovî_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1278 * 
pInfo
)

1280 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

1281 
NFCSTATUS
 
wSètus
 = 
°©us
;

1282 
	`UNUSED
(
pC⁄ãxt
);

1283 
	`UNUSED
(
pInfo
);

1285 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1287 if(
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
))

1289 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_recoverCb - Request Successful");

1290 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
TRUE
;

1294 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_recoverCb - Production key update Request Successful");

1295 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
Ë
TRUE
;

1300 
wSètus
 = 
NFCSTATUS_FAILED
;

1301 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_recoverCb - Request Failed!!");

1305 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1308 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

1309 
p_cb_d©a
->
°©us
 = 
wSètus
;

1311 
	`SEM_POST
(
p_cb_d©a
);

1314 
	}
}

1325 
	$phNxpNciHÆ_fw_d∆d_£nd_ncicmd_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1326 * 
pInfo
)

1328 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

1329 
NFCSTATUS
 
wSètus
 = 
°©us
;

1330 
µhD∆dNfc_Buff_t
 
pRe•Buff
;

1331 
	`UNUSED
(
pC⁄ãxt
);

1333 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1335 
	`NXPLOG_FWDNLD_D
("phNxpNciHal_fw_dnld_send_ncicmdCb - Request Successful");

1336 
pRe•Buff
 = (
µhD∆dNfc_Buff_t
)
pInfo
;

1338 if((0 !(
pRe•Buff
->
wLí
)Ë&& (
NULL
 !’Re•Buff->
pBuff
)))

1340 if(0 =(
pRe•Buff
->
pBuff
[3]))

1342 
	`NXPLOG_FWDNLD_D
("Successful ResponseÑeceived for Nci Reset Cmd");

1346 
	`NXPLOG_FWDNLD_E
("Nci Reset Request Failed!!");

1351 
	`NXPLOG_FWDNLD_E
("Invalid ResponseÑeceived for Nci Reset Request!!");

1354 
wSètus
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀDow∆ﬂdMode
);

1356 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1358 
	`NXPLOG_FWDNLD_D
("Switched SuccessfullyÅo dnld mode..");

1359 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
TRUE
;

1363 
	`NXPLOG_FWDNLD_E
("Switching backÅo dnld mode Failed!!");

1364 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1365 
wSètus
 = 
NFCSTATUS_FAILED
;

1370 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_send_ncicmdCb - Request Failed!!");

1373 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
Ë
FALSE
;

1374 
p_cb_d©a
->
°©us
 = 
wSètus
;

1376 
	`SEM_POST
(
p_cb_d©a
);

1379 
	}
}

1390 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_£nd_ncicmd
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1391 * 
pInfo
)

1393 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1394 
uöt8_t
 
bNciCmd
[4] = {0x20,0x00,0x01,0x00};

1395 
uöt8_t
 
bNciRe•
[6];

1396 
phD∆dNfc_Buff_t
 
tsD©a
;

1397 
phD∆dNfc_Buff_t
 
åD©a
;

1398 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

1400 
	`UNUSED
(
pInfo
);

1401 
	`UNUSED
(
°©us
);

1403 if(
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
))

1405  
NFCSTATUS_SUCCESS
;

1410 
wSètus
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀN‹mÆMode
);

1412 if(
NFCSTATUS_SUCCESS
 !
wSètus
)

1414 
	`NXPLOG_FWDNLD_E
("SwitchingÅo NormalMode Failed!!");

1415 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1416 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
Ë
FALSE
;

1420 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

1422 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_send_ncicmd cb_data creation failed");

1423  
NFCSTATUS_FAILED
;

1425 (
tsD©a
.
pBuff
Ë
bNciCmd
;

1426 (
tsD©a
.
wLí
Ë(
bNciCmd
);

1427 (
åD©a
.
pBuff
Ë
bNciRe•
;

1428 (
åD©a
.
wLí
Ë(
bNciRe•
);

1430 
wSètus
 = 
	`phD∆dNfc_RawReq
(&
tsD©a
,&
åD©a
,

1431 (
µhD∆dNfc_R•Cb_t
)&
phNxpNciHÆ_fw_d∆d_£nd_ncicmd_cb
, (*Ë&
cb_d©a
);

1432 if(
NFCSTATUS_PENDING
 !
wSètus
)

1434 
˛ón_™d_ªtu∫
;

1437 i‡(
	`SEM_WAIT
(
cb_d©a
))

1439 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_send_ncicmd semaphoreÉrror");

1440 
wSètus
 = 
NFCSTATUS_FAILED
;

1441 
˛ón_™d_ªtu∫
;

1444 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

1446 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_send_ncicmd cb failed");

1447 
wSètus
 = 
NFCSTATUS_FAILED
;

1448 
˛ón_™d_ªtu∫
;

1450 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1452 
˛ón_™d_ªtu∫
:

1453 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1457  
wSètus
;

1458 
	}
}

1469 
	$phNxpNciHÆ_fw_d∆d_log_cb
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1470 * 
pInfo
)

1472 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

1473 
NFCSTATUS
 
wSètus
 = 
°©us
;

1474 
	`UNUSED
(
pC⁄ãxt
);

1475 
	`UNUSED
(
pInfo
);

1477 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1479 
	`NXPLOG_FWDNLD_D
("phLibNfc_DnldLogCb - Request Successful");

1480 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
FALSE
;

1484 
wSètus
 = 
NFCSTATUS_FAILED
;

1485 
	`NXPLOG_FWDNLD_E
("phLibNfc_DnldLogCb - Request Failed!!");

1487 
p_cb_d©a
->
°©us
 = 
wSètus
;

1489 
	`SEM_POST
(
p_cb_d©a
);

1491 
	}
}

1502 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_log
(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
,

1503 * 
pInfo
)

1505 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1506 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

1507 
phD∆dNfc_Buff_t
 
tD©a
;

1509 
	`UNUSED
(
pInfo
);

1510 
	`UNUSED
(
°©us
);

1512 if(((
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
)) ||

1513 (
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
))) &&

1514 (
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
)))

1516  
NFCSTATUS_SUCCESS
;

1520 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

1522 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log cb_data creation failed");

1523  
NFCSTATUS_FAILED
;

1525 (
tD©a
.
pBuff
Ë(*)&(
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
);

1526 (
tD©a
.
wLí
Ë(
gphNxpNciHÆ_fw_Io˘lCtx
.
tLogP¨ams
);

1528 
wSètus
 = 
	`phD∆dNfc_Log
(&
tD©a
,(
µhD∆dNfc_R•Cb_t
)&
phNxpNciHÆ_fw_d∆d_log_cb
, (*Ë&
cb_d©a
);

1530 i‡(
wSètus
 !
NFCSTATUS_PENDING
)

1532 
	`NXPLOG_FWDNLD_E
("phDnldNfc_Log failed");

1533 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
FALSE
;

1534 
wSètus
 = 
NFCSTATUS_FAILED
;

1535 
˛ón_™d_ªtu∫
;

1538 i‡(
	`SEM_WAIT
(
cb_d©a
))

1540 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log semaphoreÉrror");

1541 
wSètus
 = 
NFCSTATUS_FAILED
;

1542 
˛ón_™d_ªtu∫
;

1545 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

1547 
	`NXPLOG_FWDNLD_E
("phNxpNciHal_fw_dnld_log_cb failed");

1548 
wSètus
 = 
NFCSTATUS_FAILED
;

1549 
˛ón_™d_ªtu∫
;

1552 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1554 
˛ón_™d_ªtu∫
:

1555 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1557  
wSètus
;

1560 
	}
}

1571 
NFCSTATUS
 
phNxpNciHÆ_fw_£q_h™dÀr
(
	$NFCSTATUS
 (*
£q_h™dÀr
[])(* 
pC⁄ãxt
, 
NFCSTATUS
 
°©us
, * 
pInfo
))

1573 *
pC⁄ãxt
 = "FW-Download";

1574 
öt16_t
 
£q_cou¡î
 = 0;

1575 
phD∆dNfc_Buff_t
 
pInfo
;

1576 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1578 
°©us
 = 
	`phTmlNfc_RódAb‹t
();

1579 if(
NFCSTATUS_SUCCESS
 !
°©us
)

1581 
	`NXPLOG_FWDNLD_E
("Tml Read Abort failed!!");

1582  
°©us
;

1585 
£q_h™dÀr
[
£q_cou¡î
] !
NULL
 )

1587 
°©us
 = 
NFCSTATUS_FAILED
;

1588 
°©us
 = (
£q_h™dÀr
[
£q_cou¡î
])(
pC⁄ãxt
, sètus, &
pInfo
 );

1589 if(
NFCSTATUS_SUCCESS
 !
°©us
)

1591 
	`NXPLOG_FWDNLD_E
("ÖhNxpNciHal_fw_seq_handler : FAILED");

1594 
£q_cou¡î
++;

1596  
°©us
;

1597 
	}
}

1608 
NFCSTATUS
 
	$phNxpNciHÆ_fw_d∆d_com∂ëe
(* 
pC⁄ãxt
,
NFCSTATUS
 
°©us
,

1609 * 
pInfo
)

1611 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1612 
NFCSTATUS
 
fSètus
 = 
°©us
;

1613 
	`UNUSED
(
pInfo
);

1614 
	`UNUSED
(
pC⁄ãxt
);

1616 if(
NFCSTATUS_WRITE_FAILED
 =
°©us
)

1618 if((
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
Ë< 
PHLIBNFC_IOCTL_DNLD_MAX_ATTEMPTS
)

1620 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
TRUE
;

1624 
	`NXPLOG_FWDNLD_E
("Max Dnld Retry Counts Exceeded!!");

1625 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1626 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1629 if(
NFCSTATUS_REJECTED
 =
°©us
)

1631 if((
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
Ë< 
PHLIBNFC_IOCTL_DNLD_MAX_ATTEMPTS
)

1633 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
TRUE
;

1636 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
TRUE
;

1640 
	`NXPLOG_FWDNLD_E
("Max Dnld Retry Counts Exceeded!!");

1641 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1642 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1646 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
))

1648 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bLa°Sètus
Ë
°©us
;

1649 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±Faûed
Ë
TRUE
;

1651 
	`NXPLOG_FWDNLD_E
("Invoking Pending Download Log Sequence..");

1652 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
FALSE
;

1654 
wSètus
 = 
	`phNxpNciHÆ_fw_£q_h™dÀr
(
phNxpNciHÆ_dw∆d_log_£qh™dÀr
);

1655 
°©us
 = 
	`phNxpNciHÆ_fw_d∆d_com∂ëe
(
pC⁄ãxt
, 
wSètus
, &
pInfo
);

1656 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

1658 
	`NXPLOG_FWDNLD_D
("ÖhNxpNciHal_fw_dnld_complete : SUCCESS");

1662 
	`NXPLOG_FWDNLD_E
("ÖhNxpNciHal_fw_dnld_complete : FAILED");

1666 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
))

1668 
	`NXPLOG_FWDNLD_E
("Invoking Download Recovery Sequence..");

1670 if(
NFCSTATUS_SUCCESS
 =
wSètus
)

1673 
wSètus
 = 
	`phNxpNciHÆ_fw_£q_h™dÀr
(
phNxpNciHÆ_dw∆d_ªc_£qh™dÀr
);

1675 
°©us
 = 
	`phNxpNciHÆ_fw_d∆d_com∂ëe
(
pC⁄ãxt
, 
wSètus
, &
pInfo
);

1676 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

1678 
	`NXPLOG_FWDNLD_D
("ÖhNxpNciHal_fw_dnld_complete : SUCCESS");

1682 
	`NXPLOG_FWDNLD_E
("ÖhNxpNciHal_fw_dnld_complete : FAILED");

1686 if(
TRUE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
))

1688 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
Ë
FALSE
;

1689 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
FALSE
;

1690 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
Ë
FALSE
;

1691 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
Ë
FALSE
;

1692 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

1693 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1694 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
Ë
FALSE
;

1697 
wSètus
 = 
	`phNxpNciHÆ_fw_£q_h™dÀr
(
phNxpNciHÆ_dw∆d_£qh™dÀr
);

1699 
°©us
 = 
	`phNxpNciHÆ_fw_d∆d_com∂ëe
(
pC⁄ãxt
, 
wSètus
, &
pInfo
);

1700 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

1702 
	`NXPLOG_FWDNLD_D
("ÖhNxpNciHal_fw_dnld_complete : SUCCESS");

1706 
	`NXPLOG_FWDNLD_E
("ÖhNxpNciHal_fw_dnld_complete : FAILED");

1711 if(
FALSE
 =(
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
))

1713 if(
NFCSTATUS_SUCCESS
 =
°©us
)

1715 if(
NFC_FW_DOWNLOAD
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1717 
	`NXPLOG_FWDNLD_E
("Fw Download success.. ");

1719 if(
PHLIBNFC_DNLD_MEM_READ
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1721 
	`NXPLOG_FWDNLD_E
("Read Request success.. ");

1723 if(
PHLIBNFC_DNLD_MEM_WRITE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1725 
	`NXPLOG_FWDNLD_E
("Write Request success.. ");

1727 if(
PHLIBNFC_DNLD_READ_LOG
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1729 
	`NXPLOG_FWDNLD_E
("ReadLog Request success.. ");

1733 
	`NXPLOG_FWDNLD_E
("Invalid Request!!");

1738 if(
NFC_FW_DOWNLOAD
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1740 
	`NXPLOG_FWDNLD_E
("Fw Download Failed!!");

1742 if(
NFC_MEM_READ
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1744 
	`NXPLOG_FWDNLD_E
("Read Request Failed!!");

1746 if(
NFC_MEM_WRITE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1748 
	`NXPLOG_FWDNLD_E
("Write Request Failed!!");

1750 if(
PHLIBNFC_DNLD_READ_LOG
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
)

1752 
	`NXPLOG_FWDNLD_E
("ReadLog Request Failed!!");

1756 
	`NXPLOG_FWDNLD_E
("Invalid Request!!");

1761 if(
FALSE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
)

1764 
wSètus
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀN‹mÆMode
);

1766 if(
NFCSTATUS_SUCCESS
 !
wSètus
)

1768 
	`NXPLOG_FWDNLD_E
("SwitchingÅo NormalMode Failed!!");

1772 
wSètus
 = 
fSètus
;

1776 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
Ë
FALSE
;

1777 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
FALSE
;

1778 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bChùVî
) = 0;

1779 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
Ë
FALSE
;

1780 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
Ë
FALSE
;

1781 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1782 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1783 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùRe£t
Ë
FALSE
;

1784 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

1785 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
Ë
FALSE
;

1786 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
) = 0;

1788 if(
FALSE
 =
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±Faûed
)

1793 
	`NXPLOG_FWDNLD_E
("Returning Download Failed StatusÅo Caller!!");

1795 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bLa°Sètus
Ë
NFCSTATUS_SUCCESS
;

1796 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±Faûed
Ë
FALSE
;

1798 
	`phD∆dNfc_Clo£FwLibH™dÀ
();

1801  
wSètus
;

1802 
	}
}

1813 
NFCSTATUS
 
	$phNxpNciHÆ_fw_dow∆ﬂd_£q
(
uöt8_t
 
bClkSrcVÆ
, uöt8_à
bClkFªqVÆ
)

1815 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1816 
phD∆dNfc_Buff_t
 
pInfo
;

1817 *
pC⁄ãxt
 = "FW-Download";

1820 
gphNxpNciHÆ_fw_Io˘lCtx
.
Io˘lCode
 = 
NFC_FW_DOWNLOAD
;

1821 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bPªvSes¢O≥n
Ë
FALSE
;

1822 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dInôüãd
Ë
FALSE
;

1823 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bChùVî
) = 0;

1824 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùSeq
Ë
FALSE
;

1825 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bF‹˚D∆d
Ë
FALSE
;

1826 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dRecovîy
Ë
FALSE
;

1827 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bRëryD∆d
Ë
FALSE
;

1828 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùRe£t
Ë
FALSE
;

1829 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSkùF‹˚
Ë
FALSE
;

1830 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bSídNciCmd
Ë
FALSE
;

1831 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bD∆dAâem±s
) = 0;

1832 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bClkSrcVÆ
) = bClkSrcVal;

1833 (
gphNxpNciHÆ_fw_Io˘lCtx
.
bClkFªqVÆ
) = bClkFreqVal;

1835 i‡(
NFCSTATUS_SUCCESS
 =
	`phD∆dNfc_InôImgInfo
())

1837 
	`NXPLOG_FWDNLD_D
("phDnldNfc_InitImgInfo:SUCCESS");

1838 
°©us
 = 
	`phNxpNciHÆ_fw_£q_h™dÀr
(
phNxpNciHÆ_dw∆d_£qh™dÀr
);

1842 
	`NXPLOG_FWDNLD_E
("phDnldNfc_InitImgInfo: FAILED");

1846 
°©us
 = 
	`phNxpNciHÆ_fw_d∆d_com∂ëe
(
pC⁄ãxt
, sètus, &
pInfo
);

1856  
°©us
;

1857 
	}
}

1860 
NFCSTATUS


1861 
	$phLibNfc_VîifyCrcSètus
(
uöt8_t
 
bCrcSètus
)

1863 
uöt8_t
 
bBôPos
 = 0;

1864 
uöt8_t
 
bShi·VÆ
 = 1;

1865 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

1866 
bBôPos
 < 7)

1868 if(!(
bCrcSètus
 & 
bShi·VÆ
))

1870 
bBôPos
)

1874 
	`NXPLOG_FWDNLD_E
("User Data Crc is NOT OK!!");

1875 
wSètus
 = 
NFCSTATUS_FAILED
;

1880 
	`NXPLOG_FWDNLD_E
("Trim Data Crc is NOT OK!!");

1881 
wSètus
 = 
NFCSTATUS_FAILED
;

1886 
	`NXPLOG_FWDNLD_E
("Protected Data Crc is NOT OK!!");

1887 
wSètus
 = 
NFCSTATUS_FAILED
;

1892 
	`NXPLOG_FWDNLD_E
("Patch Code Crc is NOT OK!!");

1893 
wSètus
 = 
NFCSTATUS_FAILED
;

1898 
	`NXPLOG_FWDNLD_E
("Function Code Crc is NOT OK!!");

1899 
wSètus
 = 
NFCSTATUS_FAILED
;

1904 
	`NXPLOG_FWDNLD_E
("Patch Table Crc is NOT OK!!");

1905 
wSètus
 = 
NFCSTATUS_FAILED
;

1910 
	`NXPLOG_FWDNLD_E
("Function Table Crc is NOT OK!!");

1911 
wSètus
 = 
NFCSTATUS_FAILED
;

1921 
bShi·VÆ
 <<= 1;

1922 ++
bBôPos
;

1925  
wSètus
;

1926 
	}
}

	@dnld/phNxpNciHal_Dnld.h

16 #i‚de‡
_PHNXPNCIHAL_DNLD_H_


17 
	#_PHNXPNCIHAL_DNLD_H_


	)

19 
	~<phNfcTy≥s.h
>

20 
	~<phNfcSètus.h
>

22 
NFCSTATUS
 
phNxpNciHÆ_fw_dow∆ﬂd_£q
(
uöt8_t
 
bClkSrcVÆ
, uöt8_à
bClkFªqVÆ
);

	@hal/phNxpNciHal.c

17 
	~<sys/°©.h
>

18 
	~<phNxpNciHÆ.h
>

19 
	~<phNxpNciHÆ_ext.h
>

20 
	~<phNxpNciHÆ_D∆d.h
>

21 
	~<phNxpNciHÆ_Ad≠èti⁄.h
>

22 
	~<phTmlNfc.h
>

23 
	~<phD∆dNfc.h
>

24 
	~<phDÆ4Nfc_mesßgeQueueLib.h
>

25 
	~<phNxpLog.h
>

26 
	~<phNxpC⁄fig.h
>

27 
	~<phNxpNciHÆ_NfcDïSWPrio.h
>

28 
	~<phNxpNciHÆ_Kovio.h
>

30 
	#PN547C2_CLOCK_SETTING


	)

31 #unde‡
PN547C2_FACTORY_RESET_DEBUG


32 
	#CORE_RES_STATUS_BYTE
 3

	)

33 
	#MAX_FILE_SIZE
 260

	)

34 
	#STATIC_PIPE_INDEX
 138

	)

36 
uöt8_t
 
icode_£nd_eof
;

37 
uöt8_t
 
	gcmd_icode_eof
[] = { 0x00, 0x00, 0x00 };

40 
uöt8_t
 
	gfw_dow∆ﬂd_suc˚ss
 = 0;

43 
phNxpNciHÆ_C⁄åﬁ_t
 
	gnx≤cihÆ_˘æ
;

46 
phNxpNciProfûe_C⁄åﬁ_t
 
	gnxµrofûe_˘æ
;

49 
phTmlNfc_C⁄ãxt_t
 *
gµhTmlNfc_C⁄ãxt
;

50 
phTmlNfc_£t_‰agmíèti⁄_íabÀd
(
phTmlNfc_i2c‰agmíèti⁄_t
 
ªsu…
);

52 
uöt32_t
 
	gwFwVîR•
;

54 
uöt16_t
 
wFwVî
;

55 
£nd_to_uµî_kovio
;

56 
kovio_dëe˘ed
;

57 
dißbÀ_kovio
;

58 
uöt8_t
 
	gRx_d©a
[
NCI_MAX_DATA_LEN
];

60 
uöt32_t
 
	gtimeoutTimîId
 = 0;

63 
NFCSTATUS
 
phNxpNciHÆ_fw_dow∆ﬂd
();

64 
phNxpNciHÆ_›í_com∂ëe
(
NFCSTATUS
 
°©us
);

65 
phNxpNciHÆ_wrôe_com∂ëe
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

66 
phNxpNciHÆ_ªad_com∂ëe
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

67 
phNxpNciHÆ_˛o£_com∂ëe
(
NFCSTATUS
 
°©us
);

68 
phNxpNciHÆ_c‹e_öôülized_com∂ëe
(
NFCSTATUS
 
°©us
);

69 
phNxpNciHÆ_¥e_discovî_com∂ëe
(
NFCSTATUS
 
°©us
);

70 
phNxpNciHÆ_powî_cy˛e_com∂ëe
(
NFCSTATUS
 
°©us
);

71 
phNxpNciHÆ_kûl_˛õ¡_thªad
(
phNxpNciHÆ_C⁄åﬁ_t
 *
p_nx≤cihÆ_˘æ
);

72 *
phNxpNciHÆ_˛õ¡_thªad
(*
¨g
);

73 
phNxpNciHÆ_gë_˛k_‰eq
();

74 
phNxpNciHÆ_£t_˛ock
();

75 
phNxpNciHÆ_check_Á˘‹y_ª£t
();

76 
phNxpNciHÆ_¥öt_ªs_°©us
–
uöt8_t
 *
p_rx_d©a
);

77 
NFCSTATUS
 
phNxpNciHÆ_CheckVÆidFwVîsi⁄
();

78 
phNxpNciHÆ_íabÀ_i2c_‰agmíèti⁄
();

88 *
	$phNxpNciHÆ_˛õ¡_thªad
(*
¨g
)

90 
phNxpNciHÆ_C⁄åﬁ_t
 *
p_nx≤cihÆ_˘æ
 = (phNxpNciHÆ_C⁄åﬁ_à*Ë
¨g
;

91 
phLibNfc_Mesßge_t
 
msg
;

93 
	`NXPLOG_NCIHAL_D
("thread started");

95 
p_nx≤cihÆ_˘æ
->
thªad_ru¬ög
 = 1;

97 
p_nx≤cihÆ_˘æ
->
thªad_ru¬ög
 == 1)

100 i‡(
	`phDÆ4Nfc_msgrcv
(
p_nx≤cihÆ_˘æ
->
gDrvCfg
.
nClõ¡Id
,

101 &
msg
, 0, 0) == -1)

103 
	`NXPLOG_NCIHAL_E
("NFC clientÑeceived bad message");

107 if(
p_nx≤cihÆ_˘æ
->
thªad_ru¬ög
 == 0){

111 
msg
.
eMsgTy≥
)

113 
PH_LIBNFC_DEFERREDCALL_MSG
:

115 
phLibNfc_De„ºedCÆl_t
 *
de„rCÆl
 =

116 (
phLibNfc_De„ºedCÆl_t
 *Ë(
msg
.
pMsgD©a
);

118 
	`REENTRANCE_LOCK
();

119 
de„rCÆl
->
	`pCÆlback
(de„rCÆl->
pP¨amëî
);

120 
	`REENTRANCE_UNLOCK
();

125 
NCI_HAL_OPEN_CPLT_MSG
:

127 
	`REENTRANCE_LOCK
();

128 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

131 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_OPEN_CPLT_EVT
,

132 
HAL_NFC_STATUS_OK
);

134 
	`REENTRANCE_UNLOCK
();

138 
NCI_HAL_CLOSE_CPLT_MSG
:

140 
	`REENTRANCE_LOCK
();

141 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

144 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_CLOSE_CPLT_EVT
,

145 
HAL_NFC_STATUS_OK
);

146 
	`phNxpNciHÆ_kûl_˛õ¡_thªad
(&
nx≤cihÆ_˘æ
);

148 
	`REENTRANCE_UNLOCK
();

152 
NCI_HAL_POST_INIT_CPLT_MSG
:

154 
	`REENTRANCE_LOCK
();

155 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

158 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_POST_INIT_CPLT_EVT
,

159 
HAL_NFC_STATUS_OK
);

161 
	`REENTRANCE_UNLOCK
();

165 
NCI_HAL_PRE_DISCOVER_CPLT_MSG
:

167 
	`REENTRANCE_LOCK
();

168 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

171 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(

172 
HAL_NFC_PRE_DISCOVER_CPLT_EVT
, 
HAL_NFC_STATUS_OK
);

174 
	`REENTRANCE_UNLOCK
();

178 
NCI_HAL_ERROR_MSG
:

180 
	`REENTRANCE_LOCK
();

181 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

184 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_ERROR_EVT
,

185 
HAL_NFC_STATUS_FAILED
);

187 
	`REENTRANCE_UNLOCK
();

191 
NCI_HAL_RX_MSG
:

193 
	`REENTRANCE_LOCK
();

194 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
 !
NULL
)

196 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
)(

197 
nx≤cihÆ_˘æ
.
r•_Àn
,Çx≤cihÆ_˘æ.
p_r•_d©a
);

199 
	`REENTRANCE_UNLOCK
();

205 
	`NXPLOG_NCIHAL_D
("NxpNciHalÅhread stopped");

207  
NULL
;

208 
	}
}

219 
	$phNxpNciHÆ_kûl_˛õ¡_thªad
(
phNxpNciHÆ_C⁄åﬁ_t
 *
p_nx≤cihÆ_˘æ
)

221 
	`NXPLOG_NCIHAL_D
("TerminatingÖhNxpNciHal clientÅhread...");

223 
p_nx≤cihÆ_˘æ
->
p_nfc_°ack_cback
 = 
NULL
;

224 
p_nx≤cihÆ_˘æ
->
p_nfc_°ack_d©a_cback
 = 
NULL
;

225 
p_nx≤cihÆ_˘æ
->
thªad_ru¬ög
 = 0;

228 
	}
}

242 
NFCSTATUS
 
	$phNxpNciHÆ_fw_dow∆ﬂd
()

244 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

246 
	`phNxpNciHÆ_gë_˛k_‰eq
();

247 
°©us
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀDow∆ﬂdMode
);

248 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

251 
	`phD∆dNfc_SëHwDevH™dÀ
();

252 
	`NXPLOG_NCIHAL_D
("Calling Seq handler for FW Download \n");

253 
°©us
 = 
	`phNxpNciHÆ_fw_dow∆ﬂd_£q
(
nxµrofûe_˘æ
.
bClkSrcVÆ
,Çxµrofûe_˘æ.
bClkFªqVÆ
);

254 
	`phD∆dNfc_ReSëHwDevH™dÀ
();

258 
°©us
 = 
NFCSTATUS_FAILED
;

261  
°©us
;

262 
	}
}

276 
NFCSTATUS
 
	$phNxpNciHÆ_CheckVÆidFwVîsi⁄
()

278 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_NOT_ALLOWED
;

279 c⁄° 
sfw_mobûe_maj‹_no
 = 0x01;

280 c⁄° 
sfw_ö‰a_maj‹_no
 = 0x02;

281 
ufw_cuºít_maj‹_no
 = 0x00;

282 
num
 = 0;

283 
isfound
 = 0;

286 
ufw_cuºít_maj‹_no
 = ((0x00FFË& (
wFwVî
 >> 8U));

288 
	`NXPLOG_NCIHAL_D
("%†cuºít_maj‹_nÿ0x%x", 
__FUNCTION__
,
ufw_cuºít_maj‹_no
 );

289 i‡–
ufw_cuºít_maj‹_no
 =
sfw_mobûe_maj‹_no
)

291 
°©us
 = 
NFCSTATUS_SUCCESS
;

293 i‡(
ufw_cuºít_maj‹_no
 =
sfw_ö‰a_maj‹_no
)

301 
isfound
 = 
	`GëNxpNumVÆue
(
NAME_NXP_FW_PROTECION_OVERRIDE
, &
num
, (num));

302 i‡(
isfound
 > 0)

304 i‡(
num
 == 0x01)

306 
	`NXPLOG_NCIHAL_D
("Override Infra FW over Mobile");

307 
°©us
 = 
NFCSTATUS_SUCCESS
;

311 
	`NXPLOG_NCIHAL_D
("Firmware downloadÇotállowed (NXP_FW_PROTECION_OVERRIDE invalid value)");

316 
	`NXPLOG_NCIHAL_D
("Firmware downloadÇotállowed (NXP_FW_PROTECION_OVERRIDEÇot defiend)");

319 i‡(
wFwVîR•
 == 0)

321 
	`NXPLOG_NCIHAL_E
("FW VersionÇotÑeceived by NCI command >>> Force Firmware download");

322 
°©us
 = 
NFCSTATUS_SUCCESS
;

326 
	`NXPLOG_NCIHAL_E
("Wrong FW Version >>> Firmware downloadÇotállowed");

329  
°©us
;

330 
	}
}

332 
	$phNxpNciHÆ_gë_˛k_‰eq
()

334 
num
 = 0;

335 
isfound
 = 0;

337 
nxµrofûe_˘æ
.
bClkSrcVÆ
 = 0;

338 
nxµrofûe_˘æ
.
bClkFªqVÆ
 = 0;

339 
nxµrofûe_˘æ
.
bTimeout
 = 0;

341 
isfound
 = 
	`GëNxpNumVÆue
(
NAME_NXP_SYS_CLK_SRC_SEL
, &
num
, (num));

342 i‡(
isfound
 > 0)

344 
nxµrofûe_˘æ
.
bClkSrcVÆ
 = 
num
;

347 
num
 = 0;

348 
isfound
 = 0;

349 
isfound
 = 
	`GëNxpNumVÆue
(
NAME_NXP_SYS_CLK_FREQ_SEL
, &
num
, (num));

350 i‡(
isfound
 > 0)

352 
nxµrofûe_˘æ
.
bClkFªqVÆ
 = 
num
;

355 
num
 = 0;

356 
isfound
 = 0;

357 
isfound
 = 
	`GëNxpNumVÆue
(
NAME_NXP_SYS_CLOCK_TO_CFG
, &
num
, (num));

358 i‡(
isfound
 > 0)

360 
nxµrofûe_˘æ
.
bTimeout
 = 
num
;

363 
	`NXPLOG_FWDNLD_D
("gphNxpNciHÆ_fw_Io˘lCtx.bClkSrcVÆ = 0x%x", 
nxµrofûe_˘æ
.
bClkSrcVÆ
);

364 
	`NXPLOG_FWDNLD_D
("gphNxpNciHÆ_fw_Io˘lCtx.bClkFªqVÆ = 0x%x", 
nxµrofûe_˘æ
.
bClkFªqVÆ
);

365 
	`NXPLOG_FWDNLD_D
("gphNxpNciHÆ_fw_Io˘lCtx.bClkFªqVÆ = 0x%x", 
nxµrofûe_˘æ
.
bTimeout
);

367 i‡((
nxµrofûe_˘æ
.
bClkSrcVÆ
 < 
CLK_SRC_XTAL
) ||

368 (
nxµrofûe_˘æ
.
bClkSrcVÆ
 > 
CLK_SRC_PLL
))

370 
	`NXPLOG_FWDNLD_E
("Clock source value is wrong in config file, setting itás default");

371 
nxµrofûe_˘æ
.
bClkSrcVÆ
 = 
NXP_SYS_CLK_SRC_SEL
;

373 i‡((
nxµrofûe_˘æ
.
bClkFªqVÆ
 < 
CLK_FREQ_13MHZ
) ||

374 (
nxµrofûe_˘æ
.
bClkFªqVÆ
 > 
CLK_FREQ_52MHZ
))

376 
	`NXPLOG_FWDNLD_E
("Clock frequency value is wrong in config file, setting itás default");

377 
nxµrofûe_˘æ
.
bClkFªqVÆ
 = 
NXP_SYS_CLK_FREQ_SEL
;

379 i‡((
nxµrofûe_˘æ
.
bTimeout
 < 
CLK_TO_CFG_DEF
Ë|| (nxµrofûe_˘æ.bTimeouà> 
CLK_TO_CFG_MAX
))

381 
	`NXPLOG_FWDNLD_E
("ClockÅimeout value is wrong in config file, setting itás default");

382 
nxµrofûe_˘æ
.
bTimeout
 = 
CLK_TO_CFG_DEF
;

385 
	}
}

401 
	$phNxpNciHÆ_›í
(
nfc_°ack_ˇŒback_t
 *
p_cback
, 
nfc_°ack_d©a_ˇŒback_t
 *
p_d©a_cback
)

403 
phOßlNfc_C⁄fig_t
 
tOßlC⁄fig
;

404 
phTmlNfc_C⁄fig_t
 
tTmlC⁄fig
;

405 
NFCSTATUS
 
wC⁄figSètus
 = 
NFCSTATUS_SUCCESS
;

406 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

408 
uöt8_t
 
cmd_öô_nci
[] = {0x20,0x01,0x00};

410 
uöt8_t
 
cmd_ª£t_nci
[] = {0x20,0x00,0x01,0x01};

412 
	`ª£tNxpC⁄fig
();

415 
	`phNxpLog_InôülizeLogLevñ
();

418 
timeoutTimîId
 = 
	`phOßlNfc_Timî_Cª©e
();

420 i‡(
	`phNxpNciHÆ_öô_m⁄ô‹
(Ë=
NULL
)

422 
	`NXPLOG_NCIHAL_E
("Init monitor failed");

423  
NFCSTATUS_FAILED
;

426 
	`CONCURRENCY_LOCK
();

428 
	`mem£t
(&
nx≤cihÆ_˘æ
, 0x00, (nxpncihal_ctrl));

429 
	`mem£t
(&
tOßlC⁄fig
, 0x00, (tOsalConfig));

430 
	`mem£t
(&
tTmlC⁄fig
, 0x00, (tTmlConfig));

431 
	`mem£t
 (&
nxµrofûe_˘æ
, 0, (
phNxpNciProfûe_C⁄åﬁ_t
));

434 
nx≤cihÆ_˘æ
.
hÆSètus
 = 
HAL_STATUS_OPEN
;

436 
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 = 
p_cback
;

437 
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
 = 
p_d©a_cback
;

440 
nx≤cihÆ_˘æ
.
gDrvCfg
.
nClõ¡Id
 = 
	`phDÆ4Nfc_msggë
(0, 0600);

441 
nx≤cihÆ_˘æ
.
gDrvCfg
.
nLökTy≥
 = 
ENUM_LINK_TYPE_I2C
;

442 
tTmlC⁄fig
.
pDevName
 = (
öt8_t
 *) "/dev/pn544";

443 
tOßlC⁄fig
.
dwCÆlbackThªadId


444 (
uöçå_t
)
nx≤cihÆ_˘æ
.
gDrvCfg
.
nClõ¡Id
;

445 
tOßlC⁄fig
.
pLogFûe
 = 
NULL
;

446 
tTmlC⁄fig
.
dwGëMsgThªadId
 = (
uöçå_t
)
nx≤cihÆ_˘æ
.
gDrvCfg
.
nClõ¡Id
;

449 
wC⁄figSètus
 = 
	`phTmlNfc_Inô
(&
tTmlC⁄fig
);

450 i‡(
wC⁄figSètus
 !
NFCSTATUS_SUCCESS
)

452 
	`NXPLOG_NCIHAL_E
("phTmlNfc_Init Failed");

453 
˛ón_™d_ªtu∫
;

457 i‡(
	`±hªad_¸óã
(&
nx≤cihÆ_˘æ
.
˛õ¡_thªad
, 
NULL
,

458 
phNxpNciHÆ_˛õ¡_thªad
, &
nx≤cihÆ_˘æ
) != 0)

460 
	`NXPLOG_NCIHAL_E
("pthread_create failed");

461 
wC⁄figSètus
 = 
	`phTmlNfc_Shutdown
();

462 
˛ón_™d_ªtu∫
;

465 
	`CONCURRENCY_UNLOCK
();

468 
°©us
 = 
	`phTmlNfc_Ród
(

469 
nx≤cihÆ_˘æ
.
p_cmd_d©a
,

470 
NCI_MAX_DATA_LEN
,

471 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
phNxpNciHÆ_ªad_com∂ëe
,

472 
NULL
);

473 i‡(
°©us
 !
NFCSTATUS_PENDING
)

475 
	`NXPLOG_NCIHAL_E
("TML Ród sètu†îr‹ sètu†%x", 
°©us
);

476 
wC⁄figSètus
 = 
	`phTmlNfc_Shutdown
();

477 
wC⁄figSètus
 = 
NFCSTATUS_FAILED
;

478 
˛ón_™d_ªtu∫
;

481 
	`phNxpNciHÆ_ext_öô
();

483 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
cmd_ª£t_nci
),cmd_reset_nci);

484 if((
°©us
 !
NFCSTATUS_SUCCESS
Ë&& (
nx≤cihÆ_˘æ
.
ªåy_˙t
 >
MAX_RETRY_COUNT
))

486 
	`NXPLOG_NCIHAL_E
("Force FW Download, NFCCÇot coming out from Standby");

487 
wC⁄figSètus
 = 
NFCSTATUS_FAILED
;

488 
f‹˚_dow∆ﬂd
;

490 if(
°©us
 !
NFCSTATUS_SUCCESS
)

492 
	`NXPLOG_NCIHAL_E
 ("NCI_CORE_RESET: Failed");

493 
wC⁄figSètus
 = 
	`phTmlNfc_Shutdown
();

494 
wC⁄figSètus
 = 
NFCSTATUS_FAILED
;

495 
˛ón_™d_ªtu∫
;

498 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
cmd_öô_nci
),cmd_init_nci);

499 if(
°©us
 !
NFCSTATUS_SUCCESS
)

501 
	`NXPLOG_NCIHAL_E
 ("NCI_CORE_INIT : Failed");

502 
wC⁄figSètus
 = 
	`phTmlNfc_Shutdown
();

503 
wC⁄figSètus
 = 
NFCSTATUS_FAILED
;

504 
˛ón_™d_ªtu∫
;

506 
	`phNxpNciHÆ_íabÀ_i2c_‰agmíèti⁄
();

508 
°©us
 = 
	`phD∆dNfc_InôImgInfo
();

509 
	`NXPLOG_NCIHAL_D
 ("FW vîsi⁄ f‹ FW fûê0x%x", 
wFwVî
);

510 
	`NXPLOG_NCIHAL_D
 ("FW vîsi⁄ from devi˚ = 0x%x", 
wFwVîR•
);

511 i‡((
wFwVîR•
 & 0x0000FFFFË=
wFwVî
)

513 
	`NXPLOG_NCIHAL_D
 ("FW uptodateÇotÑequired");

514 
	`phD∆dNfc_ReSëHwDevH™dÀ
();

518 
f‹˚_dow∆ﬂd
:

519 i‡(
wFwVîR•
 == 0)

521 
	`phD∆dNfc_InôImgInfo
();

523 i‡(
NFCSTATUS_SUCCESS
 =
	`phNxpNciHÆ_CheckVÆidFwVîsi⁄
())

525 
	`NXPLOG_NCIHAL_D
 ("FW updateÑequired");

526 
fw_dow∆ﬂd_suc˚ss
 = 0;

527 
°©us
 = 
	`phNxpNciHÆ_fw_dow∆ﬂd
();

528 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

530 
	`NXPLOG_NCIHAL_E
 ("FW Download failed - NFCC init will continue");

534 
wC⁄figSètus
 = 
NFCSTATUS_SUCCESS
;

535 
fw_dow∆ﬂd_suc˚ss
 = 1;

537 
°©us
 = 
	`phTmlNfc_Ród
(

538 
nx≤cihÆ_˘æ
.
p_cmd_d©a
,

539 
NCI_MAX_DATA_LEN
,

540 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
phNxpNciHÆ_ªad_com∂ëe
,

541 
NULL
);

542 i‡(
°©us
 !
NFCSTATUS_PENDING
)

544 
	`NXPLOG_NCIHAL_E
("TML Ród sètu†îr‹ sètu†%x", 
°©us
);

545 
wC⁄figSètus
 = 
	`phTmlNfc_Shutdown
();

546 
wC⁄figSètus
 = 
NFCSTATUS_FAILED
;

547 
˛ón_™d_ªtu∫
;

553 i‡(
wFwVîR•
 == 0)

554 
	`phD∆dNfc_ReSëHwDevH™dÀ
();

558 
	`phNxpNciHÆ_›í_com∂ëe
(
wC⁄figSètus
);

560  
wC⁄figSètus
;

562 
˛ón_™d_ªtu∫
:

563 
	`CONCURRENCY_UNLOCK
();

565 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_OPEN_CPLT_EVT
,

566 
HAL_NFC_STATUS_FAILED
);

568 
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 = 
NULL
;

569 
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
 = 
NULL
;

570 
	`phNxpNciHÆ_˛ónup_m⁄ô‹
();

571 
nx≤cihÆ_˘æ
.
hÆSètus
 = 
HAL_STATUS_CLOSE
;

572  
NFCSTATUS_FAILED
;

573 
	}
}

584 
	$phNxpNciHÆ_›í_com∂ëe
(
NFCSTATUS
 
°©us
)

586 
phLibNfc_Mesßge_t
 
msg
;

588 i‡(
°©us
 =
NFCSTATUS_SUCCESS
)

590 
msg
.
eMsgTy≥
 = 
NCI_HAL_OPEN_CPLT_MSG
;

591 
nx≤cihÆ_˘æ
.
hÆ_›í_°©us
 = 
TRUE
;

595 
msg
.
eMsgTy≥
 = 
NCI_HAL_ERROR_MSG
;

598 
msg
.
pMsgD©a
 = 
NULL
;

599 
msg
.
Size
 = 0;

601 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

602 (
phLibNfc_Mesßge_t
 *Ë&
msg
);

605 
	}
}

619 
	$phNxpNciHÆ_wrôe
(
uöt16_t
 
d©a_Àn
, c⁄° 
uöt8_t
 *
p_d©a
)

621 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

622 
phLibNfc_Mesßge_t
 
msg
;

625 
	`mem˝y
(
nx≤cihÆ_˘æ
.
p_cmd_d©a
, 
p_d©a
, 
d©a_Àn
);

626 
nx≤cihÆ_˘æ
.
cmd_Àn
 = 
d©a_Àn
;

628 #ifde‡
P2P_PRIO_LOGIC_HAL_IMP


630 i‡(
p_d©a
[0] == 0x21&&

631 
p_d©a
[1] == 0x06 &&

632 
p_d©a
[2] == 0x01 &&

633 
E«bÀP2P_PrioLogic
 =
TRUE
)

635 
	`NXPLOG_NCIHAL_D
 ("P2PÖriorityÜogic busy: Disable it.");

636 
	`phNxpNciHÆ_˛ón_P2P_Prio
();

640 i‡(
p_d©a
[0] == 0x21&&

641 
p_d©a
[1] == 0x06 &&

642 
p_d©a
[2] == 0x01 &&

643 
kovio_dëe˘ed
 =
TRUE
)

645 
	`NXPLOG_NCIHAL_D
 ("Kovio detectionÜogic isáctive: Set FlagÅo disable it.");

646 
dißbÀ_kovio
=0x01;

650 
°©us
 = 
	`phNxpNciHÆ_wrôe_ext
(&
nx≤cihÆ_˘æ
.
cmd_Àn
,

651 
nx≤cihÆ_˘æ
.
p_cmd_d©a
, &nx≤cihÆ_˘æ.
r•_Àn
,

652 
nx≤cihÆ_˘æ
.
p_r•_d©a
);

653 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

656 
msg
.
eMsgTy≥
 = 
NCI_HAL_RX_MSG
;

657 
msg
.
pMsgD©a
 = 
NULL
;

658 
msg
.
Size
 = 0;

660 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

661 (
phLibNfc_Mesßge_t
 *Ë&
msg
);

662 
˛ón_™d_ªtu∫
;

665 
	`CONCURRENCY_LOCK
();

666 
d©a_Àn
 = 
	`phNxpNciHÆ_wrôe_u∆ocked
(
nx≤cihÆ_˘æ
.
cmd_Àn
,

667 
nx≤cihÆ_˘æ
.
p_cmd_d©a
);

668 
	`CONCURRENCY_UNLOCK
();

670 i‡(
icode_£nd_eof
 == 1)

672 
	`u¶ìp
 (10000);

673 
icode_£nd_eof
 = 2;

674 
	`phNxpNciHÆ_£nd_ext_cmd
 (3, 
cmd_icode_eof
);

677 
˛ón_™d_ªtu∫
:

679  
d©a_Àn
;

680 
	}
}

693 
	$phNxpNciHÆ_wrôe_u∆ocked
(
uöt16_t
 
d©a_Àn
, c⁄° 
uöt8_t
 *
p_d©a
)

695 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_INVALID_PARAMETER
;

696 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

697 
nx≤cihÆ_˘æ
.
ªåy_˙t
 = 0;

698 
uöt8_t
 
ª£t_¡f
[] = {0x60, 0x00, 0x06, 0xA0, 0x00, 0xC7, 0xD4, 0x00, 0x00};

701 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

703 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_write_unlocked Create cb data failed");

704 
d©a_Àn
 = 0;

705 
˛ón_™d_ªtu∫
;

709 
	`mem˝y
(
nx≤cihÆ_˘æ
.
p_cmd_d©a
, 
p_d©a
, 
d©a_Àn
);

710 
nx≤cihÆ_˘æ
.
cmd_Àn
 = 
d©a_Àn
;

712 
ªåy
:

714 
d©a_Àn
 = 
nx≤cihÆ_˘æ
.
cmd_Àn
;

716 
°©us
 = 
	`phTmlNfc_Wrôe
–(
uöt8_t
 *Ë
nx≤cihÆ_˘æ
.
p_cmd_d©a
,

717 (
uöt16_t
Ë
nx≤cihÆ_˘æ
.
cmd_Àn
,

718 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
phNxpNciHÆ_wrôe_com∂ëe
,

719 (*Ë&
cb_d©a
);

720 i‡(
°©us
 !
NFCSTATUS_PENDING
)

722 
	`NXPLOG_NCIHAL_E
("write_unlocked statusÉrror");

723 
d©a_Àn
 = 0;

724 
˛ón_™d_ªtu∫
;

728 i‡(
	`SEM_WAIT
(
cb_d©a
))

730 
	`NXPLOG_NCIHAL_E
("write_unlocked semaphoreÉrror");

731 
d©a_Àn
 = 0;

732 
˛ón_™d_ªtu∫
;

735 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

737 
d©a_Àn
 = 0;

738 if(
nx≤cihÆ_˘æ
.
ªåy_˙t
++ < 
MAX_RETRY_COUNT
)

740 
	`NXPLOG_NCIHAL_E
("write_unlocked failed - PN547 Maybe in Standby Mode - Retry");

742 
	`u¶ìp
(1000);

743 
ªåy
;

748 
	`NXPLOG_NCIHAL_E
("wrôe_u∆ocked faûed - PN547 Maybêö Sèndby Modê(max cou¡ = 0x%x)", 
nx≤cihÆ_˘æ
.
ªåy_˙t
);

750 
°©us
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_Re£tDevi˚
);

752 if(
NFCSTATUS_SUCCESS
 =
°©us
)

754 
	`NXPLOG_NCIHAL_D
("PN547 Reset - SUCCESS\n");

758 
	`NXPLOG_NCIHAL_D
("PN547 Reset - FAILED\n");

760 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
!
NULL
 &&

761 
nx≤cihÆ_˘æ
.
p_rx_d©a
!
NULL
 &&

762 
nx≤cihÆ_˘æ
.
hÆ_›í_°©us
 =
TRUE
)

764 
	`NXPLOG_NCIHAL_D
("SendÅhe Core Reset NTFÅo upperÜayer, which willÅriggerÅheÑecovery\n");

766 
nx≤cihÆ_˘æ
.
rx_d©a_Àn
 = (
ª£t_¡f
);

767 
	`mem˝y
(
nx≤cihÆ_˘æ
.
p_rx_d©a
, 
ª£t_¡f
, (reset_ntf));

768 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
)“x≤cihÆ_˘æ.
rx_d©a_Àn
,Çx≤cihÆ_˘æ.
p_rx_d©a
);

773 
˛ón_™d_ªtu∫
:

774 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

775  
d©a_Àn
;

776 
	}
}

786 
	$phNxpNciHÆ_wrôe_com∂ëe
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

788 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

790 i‡(
pInfo
->
wSètus
 =
NFCSTATUS_SUCCESS
)

792 
	`NXPLOG_NCIHAL_D
("wrôêsuc˚ssfu»°©u†0x%x", 
pInfo
->
wSètus
);

796 
	`NXPLOG_NCIHAL_E
("wrôêîr‹ sètu†0x%x", 
pInfo
->
wSètus
);

799 
p_cb_d©a
->
°©us
 = 
pInfo
->
wSètus
;

801 
	`SEM_POST
(
p_cb_d©a
);

804 
	}
}

820 
	$phNxpNciHÆ_ªad_com∂ëe
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

822 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

823 if(
nx≤cihÆ_˘æ
.
ªad_ªåy_˙t
 == 1)

825 
nx≤cihÆ_˘æ
.
ªad_ªåy_˙t
 = 0;

828 i‡(
pInfo
->
wSètus
 =
NFCSTATUS_SUCCESS
)

830 
	`NXPLOG_NCIHAL_D
("ªad suc˚ssfu»°©u†0x%x", 
pInfo
->
wSètus
);

832 
nx≤cihÆ_˘æ
.
p_rx_d©a
 = 
pInfo
->
pBuff
;

833 
nx≤cihÆ_˘æ
.
rx_d©a_Àn
 = 
pInfo
->
wLígth
;

835 
°©us
 = 
	`phNxpNciHÆ_¥o˚ss_ext_r•
 (
nx≤cihÆ_˘æ
.
p_rx_d©a
, &nx≤cihÆ_˘æ.
rx_d©a_Àn
);

837 
	`phNxpNciHÆ_¥öt_ªs_°©us
(
nx≤cihÆ_˘æ
.
p_rx_d©a
);

839 i‡(
nx≤cihÆ_˘æ
.
hÆ_ext_íabÀd
 == 1

840 && (
nx≤cihÆ_˘æ
.
p_rx_d©a
[0x00] & 0x40) == 0x40)

843 
	`SEM_POST
(&(
nx≤cihÆ_˘æ
.
ext_cb_d©a
));

846 i‡((
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
 !
NULL
) &&

847 (
°©us
 =
NFCSTATUS_SUCCESS
)&&(
£nd_to_uµî_kovio
==1))

849 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
)(

850 
nx≤cihÆ_˘æ
.
rx_d©a_Àn
,Çx≤cihÆ_˘æ.
p_rx_d©a
);

855 
	`NXPLOG_NCIHAL_E
("ªadÉº‹ sètu†0x%x", 
pInfo
->
wSètus
);

858 if(
nx≤cihÆ_˘æ
.
hÆSètus
 =
HAL_STATUS_CLOSE
)

863 
°©us
 = 
	`phTmlNfc_Ród
(

864 
Rx_d©a
,

865 
NCI_MAX_DATA_LEN
,

866 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
phNxpNciHÆ_ªad_com∂ëe
,

867 
NULL
);

868 i‡(
°©us
 !
NFCSTATUS_PENDING
)

870 
	`NXPLOG_NCIHAL_E
("ªad sètu†îr‹ sètu†%x", 
°©us
);

875 
	}
}

877 
	$ªad_ªåy
()

880 
NFCSTATUS
 
°©us
 = 
	`phTmlNfc_Ród
(

881 
Rx_d©a
,

882 
NCI_MAX_DATA_LEN
,

883 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
phNxpNciHÆ_ªad_com∂ëe
,

884 
NULL
);

885 i‡(
°©us
 !
NFCSTATUS_PENDING
)

887 
	`NXPLOG_NCIHAL_E
("ªad sètu†îr‹ sètu†%x", 
°©us
);

890 
	}
}

902 
	$phNxpNciHÆ_c‹e_öôülized
(
uöt8_t
* 
p_c‹e_öô_r•_∑øms
)

904 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

905 
uöt8_t
 
p2p_li°í_mode_routög_cmd
[] = { 0x21, 0x01, 0x07, 0x00, 0x01,

908 
uöt8_t
 
swp_fuŒ_pwr_mode_⁄_cmd
[] = { 0x20, 0x02, 0x05, 0x01, 0xA0,

911 
uöt8_t
 
™droid_l_aid_m©chög_mode_⁄_cmd
[] = {0x20, 0x02, 0x05, 0x01, 0xA0, 0x91, 0x01, 0x01};

913 
uöt8_t
 *
buf„r
 = 
NULL
;

914 
bufÊí
 = 260;

915 
ªéí
 = 0;

916 
isfound
;

918 
buf„r
 = (
uöt8_t
*Ë
	`mÆloc
(
bufÊí
*(uint8_t));

919 if(
NULL
 =
buf„r
)

921  
NFCSTATUS_FAILED
;

924 
ªéí
 = 0;

925 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_ACT_PROP_EXTN
, (*Ë
buf„r
,

926 
bufÊí
, &
ªéí
);

927 i‡(
ªéí
 > 0) {

929 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

930 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

931 
	`NXPLOG_NCIHAL_E
("NXP ACT Proprietary Ext failed");

934 #ifde‡
PN547C2_CLOCK_SETTING


935 i‡(
	`isNxpC⁄figModifõd
(Ë|| (
fw_dow∆ﬂd_suc˚ss
 == 1))

937 
	`phNxpNciHÆ_gë_˛k_‰eq
();

938 
	`phNxpNciHÆ_£t_˛ock
();

941 
	`phNxpNciHÆ_check_Á˘‹y_ª£t
();

942 
ªéí
 = 0;

943 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_NFC_PROFILE_EXTN
, (*Ë
buf„r
,

944 
bufÊí
, &
ªéí
);

945 i‡(
ªéí
 > 0) {

947 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

948 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

949 
	`NXPLOG_NCIHAL_E
("NXP ACT Proprietary Ext failed");

953 if(
	`isNxpC⁄figModifõd
(Ë|| (
fw_dow∆ﬂd_suc˚ss
 == 1))

955 
ªéí
 = 0;

956 
fw_dow∆ﬂd_suc˚ss
 = 0;

957 
	`NXPLOG_NCIHAL_D
 ("Performing RF Settings BLK 1");

958 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_RF_CONF_BLK_1
, (*Ë
buf„r
,

959 
bufÊí
, &
ªéí
);

960 i‡(
ªéí
 > 0) {

961 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

962 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

963 
	`NXPLOG_NCIHAL_E
("RF Settings BLK 1 failed");

966 
ªéí
 = 0;

968 
	`NXPLOG_NCIHAL_D
 ("Performing RF Settings BLK 2");

969 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_RF_CONF_BLK_2
, (*Ë
buf„r
,

970 
bufÊí
, &
ªéí
);

971 i‡(
ªéí
 > 0) {

972 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

973 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

974 
	`NXPLOG_NCIHAL_E
("RF Settings BLK 2 failed");

977 
ªéí
 = 0;

979 
	`NXPLOG_NCIHAL_D
 ("Performing RF Settings BLK 3");

980 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_RF_CONF_BLK_3
, (*Ë
buf„r
,

981 
bufÊí
, &
ªéí
);

982 i‡(
ªéí
 > 0) {

983 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

984 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

985 
	`NXPLOG_NCIHAL_E
("RF Settings BLK 3 failed");

988 
ªéí
 = 0;

990 
	`NXPLOG_NCIHAL_D
 ("Performing RF Settings BLK 4");

991 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_RF_CONF_BLK_4
, (*Ë
buf„r
,

992 
bufÊí
, &
ªéí
);

993 i‡(
ªéí
 > 0) {

994 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

995 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

996 
	`NXPLOG_NCIHAL_E
("RF Settings BLK 4 failed");

999 
ªéí
 = 0;

1001 
	`NXPLOG_NCIHAL_D
 ("Performing RF Settings BLK 5");

1002 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_RF_CONF_BLK_5
, (*Ë
buf„r
,

1003 
bufÊí
, &
ªéí
);

1004 i‡(
ªéí
 > 0) {

1005 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

1006 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1007 
	`NXPLOG_NCIHAL_E
("RF Settings BLK 5 failed");

1010 
ªéí
 = 0;

1012 
	`NXPLOG_NCIHAL_D
 ("Performing RF Settings BLK 6");

1013 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_RF_CONF_BLK_6
, (*Ë
buf„r
,

1014 
bufÊí
, &
ªéí
);

1015 i‡(
ªéí
 > 0) {

1016 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

1017 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1018 
	`NXPLOG_NCIHAL_E
("RF Settings BLK 6 failed");

1021 
ªéí
 = 0;

1023 
	`NXPLOG_NCIHAL_D
 ("Performing NAME_NXP_CORE_CONF_EXTN Settings");

1024 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_CORE_CONF_EXTN
,

1025 (*Ë
buf„r
, 
bufÊí
, &
ªéí
);

1026 i‡(
ªéí
 > 0) {

1028 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

1029 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1030 
	`NXPLOG_NCIHAL_E
("NXP Core configuration failed");

1034 
ªéí
 = 0;

1036 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_CORE_MFCKEY_SETTING
,

1037 (*Ë
buf„r
, 
bufÊí
, &
ªéí
);

1038 i‡(
ªéí
 > 0) {

1040 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

1041 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1042 
	`NXPLOG_NCIHAL_E
("Setting mifare keys failed");

1046 
ªéí
 = 0;

1048 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_CORE_RF_FIELD
,

1049 (*Ë
buf„r
, 
bufÊí
, &
ªéí
);

1050 i‡(
ªéí
 > 0) {

1052 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

1053 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1054 
	`NXPLOG_NCIHAL_E
("Setting NXP_CORE_RF_FIELD status failed");

1059 
ªéí
 = 0;

1061 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_CORE_STANDBY
, (*Ë
buf„r
,
bufÊí
, &
ªéí
);

1062 i‡(
ªéí
 > 0) {

1064 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
, 
buf„r
);

1065 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1066 
	`NXPLOG_NCIHAL_E
("Stand by modeÉnable failed");

1069 
ªéí
 = 0;

1071 
isfound
 = 
	`GëNxpByãAºayVÆue
(
NAME_NXP_CORE_CONF
,(*)
buf„r
,
bufÊí
,&
ªéí
);

1072 if(
ªéí
 > 0)

1075 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
(
ªéí
,
buf„r
);

1076 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1078 
	`NXPLOG_NCIHAL_E
("Core Set Config failed");

1083 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
 ( (
p2p_li°í_mode_routög_cmd
),Ö2p_listen_mode_routing_cmd);

1084 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1086 
	`NXPLOG_NCIHAL_E
("P2PÜisten modeÑouting failed");

1089 
ªéí
 = 0;

1092 if(
	`GëNxpNumVÆue
(
NAME_NXP_SWP_FULL_PWR_ON
, (*)&
ªéí
, (retlen)))

1094 if(1 =
ªéí
)

1096 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
 ((
swp_fuŒ_pwr_mode_⁄_cmd
),

1097 
swp_fuŒ_pwr_mode_⁄_cmd
);

1098 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1100 
	`NXPLOG_NCIHAL_E
("SWP FULL PWR MODE SETTING ON CMD FAILED");

1105 
swp_fuŒ_pwr_mode_⁄_cmd
[7]=0x00;

1106 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
 ((
swp_fuŒ_pwr_mode_⁄_cmd
),

1107 
swp_fuŒ_pwr_mode_⁄_cmd
);

1108 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1110 
	`NXPLOG_NCIHAL_E
("SWP FULL PWR MODE SETTING OFF CMD FAILED");

1116 if(
	`GëNxpNumVÆue
(
NAME_AID_MATCHING_PLATFORM
, (*)&
ªéí
, (retlen)))

1118 if(1 =
ªéí
)

1120 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
 ((
™droid_l_aid_m©chög_mode_⁄_cmd
),

1121 
™droid_l_aid_m©chög_mode_⁄_cmd
);

1122 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1124 
	`NXPLOG_NCIHAL_E
("Android L AID Matching Platform Setting Failed");

1127 i‡(2 =
ªéí
)

1129 
™droid_l_aid_m©chög_mode_⁄_cmd
[7]=0x00;

1130 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
 ((
™droid_l_aid_m©chög_mode_⁄_cmd
),

1131 
™droid_l_aid_m©chög_mode_⁄_cmd
);

1132 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1134 
	`NXPLOG_NCIHAL_E
("Android L AID Matching Platform Setting Failed");

1139 if(
buf„r
)

1141 
	`‰ì
(
buf„r
);

1143 
	`phNxpNciHÆ_c‹e_öôülized_com∂ëe
(
°©us
);

1145 
	`upd©eNxpC⁄figTime°amp
();

1146  
NFCSTATUS_SUCCESS
;

1147 
	}
}

1160 
	$phNxpNciHÆ_c‹e_öôülized_com∂ëe
(
NFCSTATUS
 
°©us
)

1162 
phLibNfc_Mesßge_t
 
msg
;

1164 i‡(
°©us
 =
NFCSTATUS_SUCCESS
)

1166 
msg
.
eMsgTy≥
 = 
NCI_HAL_POST_INIT_CPLT_MSG
;

1170 
msg
.
eMsgTy≥
 = 
NCI_HAL_ERROR_MSG
;

1172 
msg
.
pMsgD©a
 = 
NULL
;

1173 
msg
.
Size
 = 0;

1175 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

1176 (
phLibNfc_Mesßge_t
 *Ë&
msg
);

1179 
	}
}

1192 
	$phNxpNciHÆ_¥e_discovî
()

1195  
NFCSTATUS_SUCCESS
;

1196 
	}
}

1207 
	$phNxpNciHÆ_¥e_discovî_com∂ëe
(
NFCSTATUS
 
°©us
)

1209 
phLibNfc_Mesßge_t
 
msg
;

1211 i‡(
°©us
 =
NFCSTATUS_SUCCESS
)

1213 
msg
.
eMsgTy≥
 = 
NCI_HAL_PRE_DISCOVER_CPLT_MSG
;

1217 
msg
.
eMsgTy≥
 = 
NCI_HAL_ERROR_MSG
;

1219 
msg
.
pMsgD©a
 = 
NULL
;

1220 
msg
.
Size
 = 0;

1222 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

1223 &
msg
);

1226 
	}
}

1237 
	$phNxpNciHÆ_˛o£
()

1239 
NFCSTATUS
 
°©us
;

1241 
uöt8_t
 
cmd_ª£t_nci
[] = {0x20,0x00,0x01,0x00};

1243 
uöt8_t
 
cmd_˚_disc_nci
[] = {0x21,0x03,0x07,0x03,0x80,0x01,0x81,0x01,0x82,0x01};

1245 
	`CONCURRENCY_LOCK
();

1247 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
cmd_˚_disc_nci
),cmd_ce_disc_nci);

1248 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1250 
	`NXPLOG_NCIHAL_E
 ("CMD_CE_DISC_NCI: Failed");

1253 
nx≤cihÆ_˘æ
.
hÆSètus
 = 
HAL_STATUS_CLOSE
;

1255 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
cmd_ª£t_nci
),cmd_reset_nci);

1256 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1258 
	`NXPLOG_NCIHAL_E
 ("NCI_CORE_RESET: Failed");

1261 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
)

1263 
	`phNxpNciHÆ_˛o£_com∂ëe
(
NFCSTATUS_SUCCESS
);

1265 
°©us
 = 
	`phTmlNfc_RódAb‹t
();

1266 
°©us
 = 
	`phTmlNfc_WrôeAb‹t
();

1268 
	`phOßlNfc_Timî_CÀ™up
();

1270 
°©us
 = 
	`phTmlNfc_Shutdown
();

1272 
	`phDÆ4Nfc_msgªÀa£
(
nx≤cihÆ_˘æ
.
gDrvCfg
.
nClõ¡Id
);

1275 
	`mem£t
 (&
nx≤cihÆ_˘æ
, 0x00,  (nxpncihal_ctrl));

1277 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_close -ÖhOsalNfc_DeInit completed");

1280 
	`CONCURRENCY_UNLOCK
();

1282 
	`phNxpNciHÆ_˛ónup_m⁄ô‹
();

1285  
NFCSTATUS_SUCCESS
;

1286 
	}
}

1297 
	$phNxpNciHÆ_˛o£_com∂ëe
(
NFCSTATUS
 
°©us
)

1299 
phLibNfc_Mesßge_t
 
msg
;

1301 i‡(
°©us
 =
NFCSTATUS_SUCCESS
)

1303 
msg
.
eMsgTy≥
 = 
NCI_HAL_CLOSE_CPLT_MSG
;

1307 
msg
.
eMsgTy≥
 = 
NCI_HAL_ERROR_MSG
;

1309 
msg
.
pMsgD©a
 = 
NULL
;

1310 
msg
.
Size
 = 0;

1312 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

1313 &
msg
);

1316 
	}
}

1326 
	$phNxpNciHÆ_nŸify_i2c_‰agmíèti⁄
()

1328 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

1331 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_ENABLE_I2C_FRAGMENTATION_EVT
,

1332 
HAL_NFC_STATUS_OK
);

1336 
	}
}

1345 
	$phNxpNciHÆ_c⁄åﬁ_gø¡ed
()

1350 
	`CONCURRENCY_LOCK
();

1352 if(
NULL
 !
nx≤cihÆ_˘æ
.
p_c⁄åﬁ_gø¡ed_cback
)

1354 (*
nx≤cihÆ_˘æ
.
p_c⁄åﬁ_gø¡ed_cback
)();

1359 
	`CONCURRENCY_UNLOCK
();

1360  
NFCSTATUS_SUCCESS
;

1361 
	}
}

1373 
	$phNxpNciHÆ_ªque°_c⁄åﬁ
()

1375 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

1378 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_REQUEST_CONTROL_EVT
,

1379 
HAL_NFC_STATUS_OK
);

1383 
	}
}

1394 
	$phNxpNciHÆ_ªÀa£_c⁄åﬁ
()

1396 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
 !
NULL
)

1399 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_cback
)(
HAL_NFC_RELEASE_CONTROL_EVT
,

1400 
HAL_NFC_STATUS_OK
);

1404 
	}
}

1416 
	$phNxpNciHÆ_powî_cy˛e
()

1418 
	`NXPLOG_NCIHAL_D
("Power Cycle");

1420 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1422 
°©us
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_Re£tDevi˚
);

1424 if(
NFCSTATUS_SUCCESS
 =
°©us
)

1426 
	`NXPLOG_NCIHAL_D
("PN547 Reset - SUCCESS\n");

1430 
	`NXPLOG_NCIHAL_D
("PN547 Reset - FAILED\n");

1433 
	`phNxpNciHÆ_powî_cy˛e_com∂ëe
(
NFCSTATUS_SUCCESS
);

1435  
NFCSTATUS_SUCCESS
;

1436 
	}
}

1447 
	$phNxpNciHÆ_powî_cy˛e_com∂ëe
(
NFCSTATUS
 
°©us
)

1449 
phLibNfc_Mesßge_t
 
msg
;

1451 i‡(
°©us
 =
NFCSTATUS_SUCCESS
)

1453 
msg
.
eMsgTy≥
 = 
NCI_HAL_OPEN_CPLT_MSG
;

1457 
msg
.
eMsgTy≥
 = 
NCI_HAL_ERROR_MSG
;

1459 
msg
.
pMsgD©a
 = 
NULL
;

1460 
msg
.
Size
 = 0;

1462 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

1463 &
msg
);

1466 
	}
}

1477 
	$phNxpNciHÆ_£t_˛ock
()

1479 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1480 i‡(
nxµrofûe_˘æ
.
bClkSrcVÆ
 =
CLK_SRC_PLL
)

1482 
uöt8_t
 
£t_˛ock_cmd
[] = {0x20, 0x02,0x09, 0x02, 0xA0, 0x03, 0x01, 0x11,

1484 
uöt8_t
 
∑øm_˛ock_§c
 = 
CLK_SRC_PLL
;

1485 
∑øm_˛ock_§c
 =Öaram_clock_src << 3;

1487 i‡(
nxµrofûe_˘æ
.
bClkFªqVÆ
 =
CLK_FREQ_13MHZ
)

1489 
∑øm_˛ock_§c
 |= 0x00;

1491 i‡(
nxµrofûe_˘æ
.
bClkFªqVÆ
 =
CLK_FREQ_19_2MHZ
)

1493 
∑øm_˛ock_§c
 |= 0x01;

1495 i‡(
nxµrofûe_˘æ
.
bClkFªqVÆ
 =
CLK_FREQ_24MHZ
)

1497 
∑øm_˛ock_§c
 |= 0x02;

1499 i‡(
nxµrofûe_˘æ
.
bClkFªqVÆ
 =
CLK_FREQ_26MHZ
)

1501 
∑øm_˛ock_§c
 |= 0x03;

1503 i‡(
nxµrofûe_˘æ
.
bClkFªqVÆ
 =
CLK_FREQ_38_4MHZ
)

1505 
∑øm_˛ock_§c
 |= 0x04;

1507 i‡(
nxµrofûe_˘æ
.
bClkFªqVÆ
 =
CLK_FREQ_52MHZ
)

1509 
∑øm_˛ock_§c
 |= 0x05;

1513 
	`NXPLOG_NCIHAL_E
("Wrong clock freq, send default PLL@19.2MHz");

1514 
∑øm_˛ock_§c
 = 0x11;

1517 
£t_˛ock_cmd
[7] = 
∑øm_˛ock_§c
;

1518 
£t_˛ock_cmd
[11] = 
nxµrofûe_˘æ
.
bTimeout
;

1519 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
£t_˛ock_cmd
), set_clock_cmd);

1520 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1522 
	`NXPLOG_NCIHAL_E
("PLL colck setting failed !!");

1525 if(
nxµrofûe_˘æ
.
bClkSrcVÆ
 =
CLK_SRC_XTAL
)

1527 
uöt8_t
 
£t_˛ock_cmd
[] = {0x20, 0x02, 0x05, 0x01, 0xA0, 0x03, 0x01, 0x08};

1528 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
£t_˛ock_cmd
), set_clock_cmd);

1529 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1531 
	`NXPLOG_NCIHAL_E
("XTAL colck setting failed !!");

1537 
	`NXPLOG_NCIHAL_E
("Wrong clock source. Dontápplyány modification")

1539 
	}
}

1549 
	$phNxpNciHÆ_íabÀ_i2c_‰agmíèti⁄
()

1551 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1552 
uöt8_t
 
‰agmíèti⁄_íabÀ_c⁄fig_cmd
[] = { 0x20, 0x02, 0x05, 0x01, 0xA0, 0x05, 0x01, 0x10};

1553 
isfound
 = 0;

1554 
i2c_°©us
 = 0x00;

1555 
c⁄fig_i2c_vœue
 = 0xff;

1557 
uöt8_t
 
cmd_ª£t_nci
[] = {0x20,0x00,0x01,0x01};

1559 
uöt8_t
 
cmd_öô_nci
[] = {0x20,0x01,0x00};

1560 
uöt8_t
 
gë_i2c_‰agmíèti⁄_cmd
[] = {0x20, 0x03, 0x03, 0x01 ,0xA0 ,0x05};

1561 
isfound
 = (
	`GëNxpNumVÆue
(
NAME_NXP_I2C_FRAGMENTATION_ENABLED
, (*)&
i2c_°©us
, (i2c_status)));

1562 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
gë_i2c_‰agmíèti⁄_cmd
),get_i2c_fragmentation_cmd);

1563 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1565 
	`NXPLOG_NCIHAL_E
("unableÅoÑetrieve get_i2c_fragmentation_cmd");

1568 if(
nx≤cihÆ_˘æ
.
p_rx_d©a
[8] == 0x10)

1570 
c⁄fig_i2c_vœue
 = 0x01;

1571 
	`phNxpNciHÆ_nŸify_i2c_‰agmíèti⁄
();

1572 
	`phTmlNfc_£t_‰agmíèti⁄_íabÀd
(
I2C_FRAGMENTATION_ENABLED
);

1573 }if(
nx≤cihÆ_˘æ
.
p_rx_d©a
[8] == 0x00)

1575 
c⁄fig_i2c_vœue
 = 0x00;

1577 if–
c⁄fig_i2c_vœue
 =
i2c_°©us
)

1579 
	`NXPLOG_NCIHAL_E
("i2c_fragmentation_statusÉxisting");

1581 i‡(
i2c_°©us
 == 0x01) {

1583 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
‰agmíèti⁄_íabÀ_c⁄fig_cmd
), fragmentation_enable_config_cmd);

1584 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1585 
	`NXPLOG_NCIHAL_E
("NXP fragmentationÉnable failed");

1588 i‡(
i2c_°©us
 =0x00 || 
c⁄fig_i2c_vœue
 == 0xff) {

1589 
‰agmíèti⁄_íabÀ_c⁄fig_cmd
[7] = 0x00;

1591 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
‰agmíèti⁄_íabÀ_c⁄fig_cmd
), fragmentation_enable_config_cmd);

1592 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1593 
	`NXPLOG_NCIHAL_E
("NXP fragmentation disable failed");

1596 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
cmd_ª£t_nci
),cmd_reset_nci);

1597 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1599 
	`NXPLOG_NCIHAL_E
 ("NCI_CORE_RESET: Failed");

1602 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
cmd_öô_nci
),cmd_init_nci);

1603 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1605 
	`NXPLOG_NCIHAL_E
 ("NCI_CORE_INIT : Failed");

1606 }if(
i2c_°©us
 == 0x01)

1608 
	`phNxpNciHÆ_nŸify_i2c_‰agmíèti⁄
();

1609 
	`phTmlNfc_£t_‰agmíèti⁄_íabÀd
(
I2C_FRAGMENTATION_ENABLED
);

1613 
	}
}

1625 
	$phNxpNciHÆ_check_Á˘‹y_ª£t
()

1627 
°©
 
°
;

1628 
ªt
 = 0;

1629 
i
;

1630 
size
;

1631 
ªcvdByãsSize
;

1632 
FILE
 *
fûe_±r
;

1633 
buf„r
[
MAX_FILE_SIZE
];

1634 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1635 c⁄° 
c⁄fig_e£öfo_∑th
[] = "/data/nfc/nfaStorage.bin1";

1636 
uöt8_t
 
ª£t_e£_£ssi⁄_idítôy_£t
[] = { 0x20, 0x02, 0x17, 0x02,

1639 #ifde‡
PN547C2_FACTORY_RESET_DEBUG


1640 
uöt8_t
 
ª£t_e£_£ssi⁄_idítôy
[] = { 0x20, 0x03, 0x05, 0x02,

1643 i‡(
	`°©
(
c⁄fig_e£öfo_∑th
, &
°
) == -1)

1645 
	`NXPLOG_NCIHAL_D
("%†fûênŸÖª£¡ = %s", 
__FUNCTION__
, 
c⁄fig_e£öfo_∑th
);

1646 
ªt
 = -1;

1648 if(
	`°©
(
c⁄fig_e£öfo_∑th
, &
°
) == 0)

1650 
size
 = 
°
.
°_size
;

1651 
	`NXPLOG_NCIHAL_D
("Sizêo‡\"%s\" i†%d byãs.\n", 
c⁄fig_e£öfo_∑th
, 
size
);

1652 
fûe_±r
 = 
	`f›í
(
c⁄fig_e£öfo_∑th
, "rb");

1653 i‡(
fûe_±r
)

1655 
ªcvdByãsSize
 = 
	`‰ód
(
buf„r
,1, 
MAX_FILE_SIZE
, 
fûe_±r
);

1656 
	`NXPLOG_NCIHAL_D
("ªcvdByãsSizê%d \n",
ªcvdByãsSize
);

1657 
i
 = 0;i < 6;++i)

1660 
	`NXPLOG_NCIHAL_D
("%02X ", ((*)
buf„r
)[
STATIC_PIPE_INDEX
 + 
i
]);

1666 
	`NXPLOG_NCIHAL_E
("Error in Opening file");

1667 
	`˛o£
(
fûe_±r
);

1669 if((((*)
buf„r
)[
STATIC_PIPE_INDEX
] == 00 ) && (((*)buffer)[STATIC_PIPE_INDEX +1] == 00) &&

1670 (((*)
buf„r
)[
STATIC_PIPE_INDEX
 +2] == 00) && (((*)buffer)[STATIC_PIPE_INDEX +3] == 00) &&

1671 (((*)
buf„r
)[
STATIC_PIPE_INDEX
 +4] == 00) && (((*)buffer)[STATIC_PIPE_INDEX +5] == 00))

1673 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
ª£t_e£_£ssi⁄_idítôy_£t
),

1674 
ª£t_e£_£ssi⁄_idítôy_£t
);

1675 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1677 
	`NXPLOG_NCIHAL_E
("NXPÑeset_ese_session_identity_set command failed");

1682 
	`NXPLOG_NCIHAL_E
("/data/nfc/nfaStorage.bin1 == ContentsálreadyÉxist ");

1686 if(
ªt
 == -1)

1688 #ifde‡
PN547C2_FACTORY_RESET_DEBUG


1690 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
ª£t_e£_£ssi⁄_idítôy
),

1691 
ª£t_e£_£ssi⁄_idítôy
);

1692 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1693 
	`NXPLOG_NCIHAL_E
("NXPÑeset_ese_session_identity command failed");

1696 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
ª£t_e£_£ssi⁄_idítôy_£t
),

1697 
ª£t_e£_£ssi⁄_idítôy_£t
);

1698 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1699 
	`NXPLOG_NCIHAL_E
("NXPÑeset_ese_session_identity_set command failed");

1701 #ifde‡
PN547C2_FACTORY_RESET_DEBUG


1703 
°©us
 = 
	`phNxpNciHÆ_£nd_ext_cmd
((
ª£t_e£_£ssi⁄_idítôy
),

1704 
ª£t_e£_£ssi⁄_idítôy
);

1705 i‡(
°©us
 !
NFCSTATUS_SUCCESS
) {

1706 
	`NXPLOG_NCIHAL_E
("NXPÑeset_ese_session_identity command failed");

1711 
	}
}

1722 
	$phNxpNciHÆ_¥öt_ªs_°©us
–
uöt8_t
 *
p_rx_d©a
)

1724 
uöt8_t
 
ª•⁄£_buf
[][30] = {"STATUS_OK",

1736 
°©us_byã
;

1737 if(
p_rx_d©a
[0] == 0x40 && (p_rx_data[1] == 0x02 ||Ö_rx_data[1] == 0x03))

1739 if(
p_rx_d©a
[2] <= 10)

1741 
°©us_byã
 = 
p_rx_d©a
[
CORE_RES_STATUS_BYTE
];

1742 
	`NXPLOG_NCIHAL_D
("%s:Ñe•⁄£ sètu†=%s",
__FUNCTION__
,
ª•⁄£_buf
[
°©us_byã
]);

1746 
	`NXPLOG_NCIHAL_D
("%s:Ñe•⁄£ sètu†=%s",
__FUNCTION__
,
ª•⁄£_buf
[11]);

1749 
	}
}

	@hal/phNxpNciHal.h

16 #i‚de‡
_PHNXPNCIHAL_H_


17 
	#_PHNXPNCIHAL_H_


	)

19 
	~<h¨dw¨e/nfc.h
>

20 
	~<phNxpNciHÆ_utûs.h
>

23 
	#MAX_RETRY_COUNT
 5

	)

24 
	#NCI_MAX_DATA_LEN
 300

	)

25 
	#NCI_POLL_DURATION
 500

	)

26 
	#HAL_NFC_ENABLE_I2C_FRAGMENTATION_EVT
 0x07

	)

27 #unde‡
P2P_PRIO_LOGIC_HAL_IMP


28 (
	gphNxpNciHÆ_c⁄åﬁ_gø¡ed_ˇŒback_t
)();

31 
	snci_d©a


33 
uöt16_t
 
	mÀn
;

34 
uöt8_t
 
	mp_d©a
[
NCI_MAX_DATA_LEN
];

35 } 
	tnci_d©a_t
;

39 
	mHAL_STATUS_OPEN
 = 0,

40 
	mHAL_STATUS_CLOSE


41 } 
	tphNxpNci_HÆSètus
;

44 
	#HAL_ENABLE_EXT
(Ë(
nx≤cihÆ_˘æ
.
hÆ_ext_íabÀd
 = 1)

	)

45 
	#HAL_DISABLE_EXT
(Ë(
nx≤cihÆ_˘æ
.
hÆ_ext_íabÀd
 = 0)

	)

48 
	sphNxpNciHÆ_C⁄åﬁ


50 
phNxpNci_HÆSètus
 
	mhÆSètus
;

51 
±hªad_t
 
	m˛õ¡_thªad
;

52 
uöt8_t
 
	mthªad_ru¬ög
;

53 
phLibNfc_sC⁄fig_t
 
	mgDrvCfg
;

56 
uöt8_t
 *
	mp_rx_d©a
;

57 
uöt16_t
 
	mrx_d©a_Àn
;

60 
nfc_°ack_ˇŒback_t
 *
	mp_nfc_°ack_cback
;

61 
nfc_°ack_d©a_ˇŒback_t
 *
	mp_nfc_°ack_d©a_cback
;

64 
phNxpNciHÆ_c⁄åﬁ_gø¡ed_ˇŒback_t
 *
	mp_c⁄åﬁ_gø¡ed_cback
;

67 
boﬁ_t
 
	mhÆ_›í_°©us
;

70 
uöt8_t
 
	mhÆ_ext_íabÀd
;

73 
phNxpNciHÆ_Sem_t
 
	mext_cb_d©a
;

75 
uöt16_t
 
	mcmd_Àn
;

76 
uöt8_t
 
	mp_cmd_d©a
[
NCI_MAX_DATA_LEN
];

77 
uöt16_t
 
	mr•_Àn
;

78 
uöt8_t
 
	mp_r•_d©a
[
NCI_MAX_DATA_LEN
];

81 
uöt16_t
 
	mªåy_˙t
;

82 
uöt8_t
 
	mªad_ªåy_˙t
;

83 } 
	tphNxpNciHÆ_C⁄åﬁ_t
;

86 
	mNFC_FORUM_PROFILE
,

87 
	mEMV_CO_PROFILE
,

88 
	mINVALID_PROFILe


89 }
	tphNxpNciProfûe_t
;

91 
	sphNxpNciProfûe_C⁄åﬁ


93 
phNxpNciProfûe_t
 
	m¥ofûe_ty≥
;

94 
uöt8_t
 
	mbClkSrcVÆ
;

95 
uöt8_t
 
	mbClkFªqVÆ
;

96 
uöt8_t
 
	mbTimeout
;

98 } 
	tphNxpNciProfûe_C⁄åﬁ_t
;

101 
	#NCI_HAL_OPEN_CPLT_MSG
 0x411

	)

102 
	#NCI_HAL_CLOSE_CPLT_MSG
 0x412

	)

103 
	#NCI_HAL_POST_INIT_CPLT_MSG
 0x413

	)

104 
	#NCI_HAL_PRE_DISCOVER_CPLT_MSG
 0x414

	)

105 
	#NCI_HAL_ERROR_MSG
 0x415

	)

106 
	#NCI_HAL_RX_MSG
 0xF01

	)

108 
	#NCIHAL_CMD_CODE_LEN_BYTE_OFFSET
 (2U)

	)

109 
	#NCIHAL_CMD_CODE_BYTE_LEN
 (3U)

	)

113 
phNxpNciHÆ_ªque°_c⁄åﬁ
 ();

114 
phNxpNciHÆ_ªÀa£_c⁄åﬁ
 ();

115 
phNxpNciHÆ_wrôe_u∆ocked
 (
uöt16_t
 
d©a_Àn
, c⁄° 
uöt8_t
 *
p_d©a
);

	@hal/phNxpNciHal_Kovio.c

17 
	~<phNxpNciHÆ_Kovio.h
>

18 
	~<phNxpLog.h
>

21 
	#KOVIO_TIMEOUT
 1000

	)

22 
	#KOVIO_ACT_NTF_TEMP_BUFF_LEN
 32

	)

24 
	#MAX_WRITE_RETRY
 5

	)

27 
phNxpNciHÆ_C⁄åﬁ_t
 
nx≤cihÆ_˘æ
;

28 
NFCSTATUS
 
phNxpNciHÆ_£nd_ext_cmd
(
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
p_cmd
);

30 
	gkovio_dëe˘ed
 = 0x00;

31 
	g£nd_to_uµî_kovio
 = 0x01;

32 
	gdißbÀ_kovio
=0x00;

33 
uöt8_t
 
	grf_dó˘iv©e_cmd
[] = { 0x21, 0x06, 0x01, 0x03 };

34 
uöt8_t
 
	grf_dó˘iv©ed_¡f
[] = { 0x61, 0x06, 0x02, 0x03, 0x01 };

36 
uöt32_t
 
	gkovio_timî
;

40 
NFCSTATUS
 
phNxpNciHÆ_rf_dó˘iv©e
();

51 
	$hÆ_wrôe_cb
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

54 
	}
}

65 
	$kovio_timî_h™dÀr
(
uöt32_t
 
timîId
, *
pC⁄ãxt
)

67 
	`NXPLOG_NCIHAL_D
(">> kovio_timer_handler. DidÇotÑeceive RF_INTF_ACTIVATED_NTF, Kovio TAG must beÑemoved.");

69 
	`phOßlNfc_Timî_Dñëe
(
kovio_timî
);

71 
kovio_dëe˘ed
 = 0x00;

72 
£nd_to_uµî_kovio
=0x01;

73 
dißbÀ_kovio
=0x00;

77 
	`NXPLOG_NCIHAL_D
(">> send kovio deactivatedÇtfÅo upperÜayer.");

78 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
 !
NULL
)

80 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
)(

81 (
rf_dó˘iv©ed_¡f
),Ñf_deactivated_ntf);

84 
	}
}

95 
NFCSTATUS
 
	$phNxpNciHÆ_rf_dó˘iv©e
()

97 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

98 
cb_d©a
;

99 
ªåyC¡
 = 0;

103 
ªåyC¡
++;

104 
°©us
 = 
	`phTmlNfc_Wrôe
(
rf_dó˘iv©e_cmd
,

105 (
rf_dó˘iv©e_cmd
),

106 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
hÆ_wrôe_cb
, &
cb_d©a
);

107 } 
°©us
 !
NFCSTATUS_PENDING
 && 
ªåyC¡
 <
MAX_WRITE_RETRY
);

109 if(
°©us
 !
NFCSTATUS_PENDING
)

111 
	`phNxpNciHÆ_emîgícy_ªcovîy
();

114  
°©us
;

115 
	}
}

133 
NFCSTATUS
 
	$phNxpNciHÆ_kovio_r•_ext
(
uöt8_t
 *
p_¡f
, 
uöt16_t
 *
p_Àn
)

135 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

136 
uöt8_t
 
tBuff
[
KOVIO_ACT_NTF_TEMP_BUFF_LEN
];

138 
£nd_to_uµî_kovio
 = 1;

139 if((
p_¡f
[0]==0x61)&&(p_ntf[1]==0x05))

141 if((
p_¡f
[5]==0x8A)&&(p_ntf[6]==0x77))

143 i‡(
kovio_dëe˘ed
 == 0)

145 if((*
p_Àn
-9)<
KOVIO_ACT_NTF_TEMP_BUFF_LEN
)

147 
p_¡f
[2]+=1;

148 
	`mem˝y
(
tBuff
, &
p_¡f
[9], *
p_Àn
-9);

149 
p_¡f
[9]=p_ntf[9]+1;

150 
	`mem˝y
(&
p_¡f
[10], 
tBuff
, *
p_Àn
-9);

151 *
p_Àn
+=1;

154 
	`NXPLOG_NCIHAL_D
("Kovio ActÇtfÖayloadÉxceededÅemp buffer size");

156 
kovio_dëe˘ed
 = 1;

157 
kovio_timî
 = 
	`phOßlNfc_Timî_Cª©e
();

158 
	`NXPLOG_NCIHAL_D
("cu°om koviÿtimî Cª©ed - %d", 
kovio_timî
);

162 
£nd_to_uµî_kovio
 = 0;

164 
	`NXPLOG_NCIHAL_D
("Send RF deactivate commandÅo NFCC");

165 
°©us
 = 
	`phNxpNciHÆ_rf_dó˘iv©e
();

166 
°©us
 = 
	`phOßlNfc_Timî_Sèπ
(
kovio_timî
,

167 
KOVIO_TIMEOUT
,

168 &
kovio_timî_h™dÀr
,

169 
NULL
);

170 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

172 
	`NXPLOG_NCIHAL_D
("kovioÅimer started");

176 
	`NXPLOG_NCIHAL_E
("kovioÅimerÇot started!!!");

177 
°©us
 = 
NFCSTATUS_FAILED
;

182 i‡(
kovio_dëe˘ed
 == 1)

184 
	`phNxpNciHÆ_˛ón_Kovio_Ext
();

185 
	`NXPLOG_NCIHAL_D
 ("Disabling Kovio detectionÜogicásánotherÅagÅype detected");

189 if((
p_¡f
[0]==0x41)&&(p_ntf[1]==0x06)&&(p_ntf[2]==0x01)&&(p_ntf[3]==0x00))

191 if(
kovio_dëe˘ed
 == 1)

192 
£nd_to_uµî_kovio
 = 0;

193 if((
kovio_dëe˘ed
 =1)&&(
dißbÀ_kovio
==0x01))

195 
	`NXPLOG_NCIHAL_D
 ("Disabling Kovio detectionÜogic");

196 
	`phNxpNciHÆ_˛ón_Kovio_Ext
();

197 
dißbÀ_kovio
=0x00;

200 if((
p_¡f
[0]==0x61)&&(p_ntf[1]==0x06)&&(p_ntf[2]==0x02)&&(p_ntf[3]==0x03)&&(p_ntf[4]==0x00))

202 if(
kovio_dëe˘ed
 == 1)

203 
£nd_to_uµî_kovio
 = 0;

205 if((
p_¡f
[0]==0x61)&&(p_ntf[1]==0x03))

207 if(
kovio_dëe˘ed
 == 1)

208 
£nd_to_uµî_kovio
 = 0;

210  
°©us
;

211 
	}
}

220 
	$phNxpNciHÆ_˛ón_Kovio_Ext
()

222 
	`NXPLOG_NCIHAL_D
(">> Cleaning up Kovio State machineándÅimer.");

223 
	`phOßlNfc_Timî_Dñëe
(
kovio_timî
);

224 
kovio_dëe˘ed
 = 0x00;

225 
£nd_to_uµî_kovio
=0x01;

226 
dißbÀ_kovio
=0x00;

230 
	`NXPLOG_NCIHAL_D
(">> send kovio deactivatedÇtfÅo upperÜayer.");

231 i‡(
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
 !
NULL
)

233 (*
nx≤cihÆ_˘æ
.
p_nfc_°ack_d©a_cback
)(

234 (
rf_dó˘iv©ed_¡f
),Ñf_deactivated_ntf);

237 
	}
}

	@hal/phNxpNciHal_Kovio.h

16 #i‚de‡
_PHNXPNCIHAL_KOVIO_H_


17 
	#_PHNXPNCIHAL_KOVIO_H_


	)

19 
	~<phNxpNciHÆ.h
>

20 
	~<phTmlNfc.h
>

21 
	~<°rög.h
>

23 
NFCSTATUS
 
phNxpNciHÆ_kovio_r•_ext
(
uöt8_t
 *
p_¡f
, 
uöt16_t
 *
p_Àn
);

24 
phNxpNciHÆ_˛ón_Kovio_Ext
();

	@hal/phNxpNciHal_NfcDepSWPrio.c

17 
	~<phNxpNciHÆ_NfcDïSWPrio.h
>

18 
	~<phNxpLog.h
>

19 
	~<phNxpNciHÆ.h
>

21 
	#CUSTOM_POLL_TIMEOUT
 160

	)

22 
	#CLEAN_UP_TIMEOUT
 250

	)

23 
	#MAX_WRITE_RETRY
 5

	)

26 
phNxpNciHÆ_C⁄åﬁ_t
 
nx≤cihÆ_˘æ
;

27 
NFCSTATUS
 
phNxpNciHÆ_£nd_ext_cmd
(
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
p_cmd
);

28 
uöt8_t
 
	gcmd_°›_rf_discovîy
[] = { 0x21, 0x06, 0x01, 0x00 };

29 
uöt8_t
 
	gcmd_ªsume_rf_discovîy
[] = { 0x21, 0x06, 0x01, 0x03 };

32 
uöt8_t
 
	gcmd_£À˘_rf_discovîy
[] = {0x21,0x04,0x03,0x01,0x04,0x02 };

34 
uöt8_t
 
	gcmd_pﬁl
[64];

35 
uöt8_t
 
	gcmd_pﬁl_Àn
 = 0;

36 
	gdiscovî_ty≥
 = 0xFF;

37 
uöt32_t
 
	g˛ónup_timî
;

40 #ifde‡
P2P_PRIO_LOGIC_HAL_IMP


42 
	giso_dï_dëe˘ed
 = 0x00;

43 
	gpﬁl_timî_fúed
 = 0x00;

44 
uöt8_t
 
	gbIgn‹ï2∂ogic
 = 0;

45 
uöt8_t
 *
	gp_iso_¡f_buff
 = 
NULL
;

46 
uöt8_t
 
	gbIgn‹eIsoDï
 = 0;

47 
uöt32_t
 
	gcu°om_pﬁl_timî
;

51 
NFCSTATUS
 
phNxpNciHÆ_°¨t_pﬁlög_lo›
();

52 
NFCSTATUS
 
phNxpNciHÆ_°›_pﬁlög_lo›
();

53 
NFCSTATUS
 
phNxpNciHÆ_ªsume_pﬁlög_lo›
();

54 
phNxpNciHÆ_NfcDï_°‹e_¡f
(
uöt8_t
 *
p_cmd_d©a
, 
uöt16_t
 
cmd_Àn
);

66 
	$˛ónup_timî_h™dÀr
(
uöt32_t
 
timîId
, *
pC⁄ãxt
)

68 
	`NXPLOG_NCIHAL_D
(">> cleanup_timer_handler.");

70 
	`NXPLOG_NCIHAL_D
(">> cleanup_timer_handler. ISO_DEPÇot detected secondÅime.");

72 
	`phOßlNfc_Timî_Dñëe
(
˛ónup_timî
);

73 
˛ónup_timî
=0;

74 
iso_dï_dëe˘ed
 = 0x00;

75 
E«bÀP2P_PrioLogic
 = 
FALSE
;

77 
	}
}

88 
	$cu°om_pﬁl_timî_h™dÀr
(
uöt32_t
 
timîId
, *
pC⁄ãxt
)

90 
	`NXPLOG_NCIHAL_D
(">> custom_poll_timer_handler.");

92 
	`NXPLOG_NCIHAL_D
(">> custom_poll_timer_handler. NFC_DEPÇot detected. so givingÉarly chanceÅo ISO_DEP.");

94 
	`phOßlNfc_Timî_Dñëe
(
cu°om_pﬁl_timî
);

96 i‡(
iso_dï_dëe˘ed
 == 0x01)

98 
pﬁl_timî_fúed
 = 0x01;

104 
	`NXPLOG_NCIHAL_D
(">> custom_poll_timer_handler -ÑestartÖollingÜoop.");

106 
	`phNxpNciHÆ_°›_pﬁlög_lo›
();

110 
	`NXPLOG_NCIHAL_E
(">> custom_poll_timer_handler - invalid flag state (iso_dep_detected)");

114 
	}
}

124 
NFCSTATUS
 
	$phNxpNciHÆ_°›_pﬁlög_lo›
()

126 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

127 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

128 
±hªad_t
 
±hªad
;

129 
discovî_ty≥
 = 
STOP_POLLING
;

131 if(
	`±hªad_¸óã
(&
±hªad
, 
NULL
, 
tmp_thªad
, (*Ë&
discovî_ty≥
) != 0)

133 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_resume_polling_loop");

135  
°©us
;

136 
	}
}

147 
NFCSTATUS
 
	$phNxpNciHÆ_ªsume_pﬁlög_lo›
()

149 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

150 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

151 
±hªad_t
 
±hªad
;

152 
discovî_ty≥
 = 
RESUME_POLLING
;

154 if(
	`±hªad_¸óã
(&
±hªad
, 
NULL
, 
tmp_thªad
, (*Ë&
discovî_ty≥
) != 0)

156 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_resume_polling_loop");

158  
°©us
;

159 
	}
}

170 
NFCSTATUS
 
	$phNxpNciHÆ_°¨t_pﬁlög_lo›
()

172 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

173 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

174 
±hªad_t
 
±hªad
;

175 
discovî_ty≥
 = 
START_POLLING
;

177 if(
	`±hªad_¸óã
(&
±hªad
, 
NULL
, 
tmp_thªad
, (*Ë&
discovî_ty≥
) != 0)

179 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_resume_polling_loop");

181  
°©us
;

182 
	}
}

206 
NFCSTATUS
 
	$phNxpNciHÆ_NfcDï_r•_ext
(
uöt8_t
 *
p_¡f
, 
uöt16_t
 *
p_Àn
)

208 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_INVALID_PARAMETER
;

210 
	`NXPLOG_NCIHAL_D
(">>Ö_¡f[0]=%02x ,Ö_¡f[1]=%02x",
p_¡f
[0],p_ntf[1]);

212 if(
p_¡f
[0] == 0x41 &&Ö_ntf[1] == 0x04)

215 
bIgn‹eIsoDï
 = 1;

216 
	`NXPLOG_NCIHAL_D
(">> Tag selected, Disable P2P PrioÜogic.");

219 if–((
p_¡f
[0] == 0x61 &&Ö_ntf[1] == 0x06) ||

220 (
p_¡f
[0] =0x41 &&Ö_¡f[1] =0x06ËË&& 
bIgn‹eIsoDï
 == 1

224 
bIgn‹eIsoDï
 = 0x00;

225 
	`NXPLOG_NCIHAL_D
(">> Tag deselected,Énable P2P PrioÜogic.");

228 i‡(
bIgn‹eIsoDï
 == 0x00 &&

229 
p_¡f
[0] == 0x61 &&

230 
p_¡f
[1] =0x05 && *
p_Àn
 > 5)

232 i‡(
p_¡f
[5] == 0x04 &&Ö_ntf[6] < 0x80)

234 
	`NXPLOG_NCIHAL_D
(">> ISO DEP detected.");

236 i‡(
iso_dï_dëe˘ed
 == 0x00)

238 
	`NXPLOG_NCIHAL_D
(

241 
iso_dï_dëe˘ed
 = 0x01;

242 
°©us
 = 
	`phNxpNciHÆ_ªsume_pﬁlög_lo›
();

244 
cu°om_pﬁl_timî
 = 
	`phOßlNfc_Timî_Cª©e
();

245 
	`NXPLOG_NCIHAL_D
("cu°omÖﬁ»timî sèπed - %d", 
cu°om_pﬁl_timî
);

247 
°©us
 = 
	`phOßlNfc_Timî_Sèπ
(
cu°om_pﬁl_timî
,

248 
CUSTOM_POLL_TIMEOUT
,

249 &
cu°om_pﬁl_timî_h™dÀr
,

250 
NULL
);

252 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

254 
	`NXPLOG_NCIHAL_D
("customÖollÅimer started");

258 
	`NXPLOG_NCIHAL_E
("customÖollÅimerÇot started!!!");

259 
°©us
 = 
NFCSTATUS_FAILED
;

262 
°©us
 = 
NFCSTATUS_FAILED
;

266 
	`NXPLOG_NCIHAL_D
(">> ISO DEP detected secondÅime.");

268 
	`phNxpNciHÆ_NfcDï_°‹e_¡f
(
p_¡f
, *
p_Àn
);

271 
	`phOßlNfc_Timî_St›
(
˛ónup_timî
);

272 
	`phOßlNfc_Timî_Dñëe
(
˛ónup_timî
);

273 
˛ónup_timî
=0;

274 
E«bÀP2P_PrioLogic
 = 
FALSE
;

275 
iso_dï_dëe˘ed
 = 0;

276 
°©us
 = 
NFCSTATUS_SUCCESS
;

279 i‡(
p_¡f
[5] == 0x05)

281 
	`NXPLOG_NCIHAL_D
(">> NFC-DEP Detected - stoppingÅhe customÖollÅimer");

283 
	`phOßlNfc_Timî_St›
(
cu°om_pﬁl_timî
);

284 
	`phOßlNfc_Timî_Dñëe
(
cu°om_pﬁl_timî
);

285 
E«bÀP2P_PrioLogic
 = 
FALSE
;

286 
iso_dï_dëe˘ed
 = 0;

287 
°©us
 = 
NFCSTATUS_SUCCESS
;

291 
	`NXPLOG_NCIHAL_D
(">> detected otherÅechnology- stoppingÅhe customÖollÅimer");

292 
	`phOßlNfc_Timî_St›
(
cu°om_pﬁl_timî
);

293 
	`phOßlNfc_Timî_Dñëe
(
cu°om_pﬁl_timî
);

294 
E«bÀP2P_PrioLogic
 = 
FALSE
;

295 
iso_dï_dëe˘ed
 = 0;

296 
°©us
 = 
NFCSTATUS_INVALID_PARAMETER
;

299 if–
bIgn‹eIsoDï
 == 0x00 &&

300 ((
p_¡f
[0] == 0x41 &&Ö_ntf[1] == 0x06) || (p_ntf[0] == 0x61

301 && 
p_¡f
[1] == 0x06))

304 
	`NXPLOG_NCIHAL_D
(">> RF disabled");

305 i‡(
pﬁl_timî_fúed
 == 0x01)

307 
pﬁl_timî_fúed
 = 0x00;

309 
	`NXPLOG_NCIHAL_D
(">>restartingÖollingÜoop.");

312 
	`phNxpNciHÆ_°¨t_pﬁlög_lo›
();

313 
E«bÀP2P_PrioLogic
 = 
FALSE
;

314 
	`NXPLOG_NCIHAL_D
 (">> NFC DEP NOT detected - customÖollÅimerÉxpired - RF disabled");

316 
˛ónup_timî
 = 
	`phOßlNfc_Timî_Cª©e
();

319 
NFCSTATUS
 
°©us
 = 
	`phOßlNfc_Timî_Sèπ
(
˛ónup_timî
,

320 
CLEAN_UP_TIMEOUT
,

321 &
˛ónup_timî_h™dÀr
,

322 
NULL
);

324 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

326 
	`NXPLOG_NCIHAL_D
("cleanupÅimer started");

330 
	`NXPLOG_NCIHAL_E
("cleanupÅimerÇot started!!!");

331 
°©us
 = 
NFCSTATUS_FAILED
;

334 
°©us
 = 
NFCSTATUS_FAILED
;

338 
°©us
 = 
NFCSTATUS_SUCCESS
;

341 i‡(
bIgn‹eIsoDï
 == 0x00 &&

342 
iso_dï_dëe˘ed
 == 1)

344 i‡((
p_¡f
[0] == 0x41 &&Ö_ntf[1] == 0x06) || (p_ntf[0] == 0x61

345 && 
p_¡f
[1] == 0x06))

347 
	`NXPLOG_NCIHAL_D
(">>iso_dep_detected DisconnectÑelatedÇotification");

348 
°©us
 = 
NFCSTATUS_FAILED
;

352 
	`NXPLOG_NCIHAL_W
("Never come here");

356  
°©us
;

357 
	}
}

367 
	$phNxpNciHÆ_NfcDï_°‹e_¡f
(
uöt8_t
 *
p_cmd_d©a
, 
uöt16_t
 
cmd_Àn
)

369 
p_iso_¡f_buff
 = 
NULL
;

371 
p_iso_¡f_buff
 = 
	`mÆloc
( (
uöt8_t
Ë* 
cmd_Àn
);

372 i‡(
p_iso_¡f_buff
 =
NULL
)

374 
	`NXPLOG_NCIHAL_E
("Errorállocating memory (p_iso_ntf_buff)");

377 
	`mem˝y
(
p_iso_¡f_buff
, 
p_cmd_d©a
, 
cmd_Àn
);

378 
bIgn‹ï2∂ogic
 = 1;

379 
	}
}

390 
NFCSTATUS
 
	$phNxpNciHÆ_NfcDï_com≠ª_¡f
(
uöt8_t
 *
p_cmd_d©a
, 
uöt16_t
 
cmd_Àn
)

392 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

393 
öt32_t
 
ªt_vÆ
 = -1;

395 i‡(
bIgn‹ï2∂ogic
 == 1)

397 
ªt_vÆ
 = 
	`memcmp
(
p_cmd_d©a
,
p_iso_¡f_buff
, 
cmd_Àn
);

398 if(
ªt_vÆ
 != 0)

400 
	`NXPLOG_NCIHAL_E
("ThirdÇotification isÇotÉqualÅoÜast");

404 
	`NXPLOG_NCIHAL_E
("ThirdÇotification isÉqualÅoÜast (disableÖ2pÜogic)");

405 
°©us
 = 
NFCSTATUS_SUCCESS
;

407 
bIgn‹ï2∂ogic
 = 0;

409 i‡(
p_iso_¡f_buff
 !
NULL
)

411 
	`‰ì
(
p_iso_¡f_buff
);

412 
p_iso_¡f_buff
 = 
NULL
;

415  
°©us
;

416 
	}
}

419 
NFCSTATUS
 
	$phNxpNciHÆ_˛ón_P2P_Prio
()

421 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

423 
iso_dï_dëe˘ed
 = 0x00;

424 
E«bÀP2P_PrioLogic
 = 
FALSE
;

425 
pﬁl_timî_fúed
 = 0x00;

426 
bIgn‹ï2∂ogic
 = 0x00;

427 
bIgn‹eIsoDï
 = 0x00;

429 
°©us
 = 
	`phOßlNfc_Timî_St›
(
˛ónup_timî
);

430 
°©us
 |
	`phOßlNfc_Timî_Dñëe
(
˛ónup_timî
);

432 
°©us
 |
	`phOßlNfc_Timî_St›
(
cu°om_pﬁl_timî
);

433 
°©us
 |
	`phOßlNfc_Timî_Dñëe
(
cu°om_pﬁl_timî
);

434 
˛ónup_timî
=0;

435  
°©us
;

436 
	}
}

448 
	$hÆ_wrôe_cb
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

450 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

452 i‡(
pInfo
->
wSètus
 =
NFCSTATUS_SUCCESS
)

454 
	`NXPLOG_NCIHAL_D
("hÆ_wrôe_cb: wrôêsuc˚ssfu»°©u†0x%x", 
pInfo
->
wSètus
);

458 
	`NXPLOG_NCIHAL_E
("hÆ_wrôe_cb: wrôêîr‹ sètu†0x%x", 
pInfo
->
wSètus
);

461 
p_cb_d©a
->
°©us
 = 
pInfo
->
wSètus
;

463 
	`SEM_POST
(
p_cb_d©a
);

465 
	}
}

476 *
	$tmp_thªad
(*
tmp
)

478 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

479 
uöt16_t
 
d©a_Àn
;

480 
	`NXPLOG_NCIHAL_E
("tmp_thªad:É¡îÅy≥=0x0%x", *((*)
tmp
));

481 
	`u¶ìp
(10*1000);

483  *((*)
tmp
) )

485 
START_POLLING
:

487 
	`CONCURRENCY_LOCK
();

488 
d©a_Àn
 = 
	`phNxpNciHÆ_wrôe_u∆ocked
(
cmd_pﬁl_Àn
, 
cmd_pﬁl
);

489 
	`CONCURRENCY_UNLOCK
();

491 if(
d©a_Àn
 !
cmd_pﬁl_Àn
)

493 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_start_polling_loop: dataÜen mismatch");

494 
°©us
 = 
NFCSTATUS_FAILED
;

499 
RESUME_POLLING
:

501 
	`CONCURRENCY_LOCK
();

502 
d©a_Àn
 = 
	`phNxpNciHÆ_wrôe_u∆ocked
((
cmd_ªsume_rf_discovîy
),

503 
cmd_ªsume_rf_discovîy
);

504 
	`CONCURRENCY_UNLOCK
();

506 if(
d©a_Àn
 !(
cmd_ªsume_rf_discovîy
))

508 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_resume_polling_loop: dataÜen mismatch");

509 
°©us
 = 
NFCSTATUS_FAILED
;

514 
STOP_POLLING
:

516 
	`CONCURRENCY_LOCK
();

517 
d©a_Àn
 = 
	`phNxpNciHÆ_wrôe_u∆ocked
((
cmd_°›_rf_discovîy
),

518 
cmd_°›_rf_discovîy
);

519 
	`CONCURRENCY_UNLOCK
();

521 if(
d©a_Àn
 !(
cmd_°›_rf_discovîy
))

523 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_stop_polling_loop: dataÜen mismatch");

524 
°©us
 = 
NFCSTATUS_FAILED
;

529 
DISCOVER_SELECT
:

531 
	`CONCURRENCY_LOCK
();

532 
d©a_Àn
 = 
	`phNxpNciHÆ_wrôe_u∆ocked
((
cmd_£À˘_rf_discovîy
),

533 
cmd_£À˘_rf_discovîy
);

534 
	`CONCURRENCY_UNLOCK
();

536 if(
d©a_Àn
 !(
cmd_ªsume_rf_discovîy
))

538 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_resume_polling_loop: dataÜen mismatch");

539 
°©us
 = 
NFCSTATUS_FAILED
;

545 
	`NXPLOG_NCIHAL_E
("No Matching case");

546 
°©us
 = 
NFCSTATUS_FAILED
;

550 
	`NXPLOG_NCIHAL_E
("tmp_thread:Éxit");

551  
NULL
;

552 
	}
}

562 
NFCSTATUS
 
	$phNxpNciHÆ_£À˘_RF_Discovîy
(
RfID
,
RfPrŸocﬁTy≥
)

564 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

565 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

566 
±hªad_t
 
±hªad
;

567 
discovî_ty≥
 = 
DISCOVER_SELECT
;

568 
cmd_£À˘_rf_discovîy
[3]=
RfID
;

569 
cmd_£À˘_rf_discovîy
[4]=
RfPrŸocﬁTy≥
;

571 if(
	`±hªad_¸óã
(&
±hªad
, 
NULL
, 
tmp_thªad
, (*Ë&
discovî_ty≥
) != 0)

573 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_resume_polling_loop");

576  
°©us
;

577 
	}
}

587 
	$phNxpNciHÆ_NfcDï_cmd_ext
(
uöt8_t
 *
p_cmd_d©a
, 
uöt16_t
 *
cmd_Àn
)

589 i‡(
p_cmd_d©a
[0] == 0x21 &&Ö_cmd_data[1] == 0x03)

591 i‡(*
cmd_Àn
 =6 && 
p_cmd_d©a
[3] == 0x01 &&Ö_cmd_data[4] == 0x02

592 && 
p_cmd_d©a
[5] == 0x01)

599 
cmd_pﬁl_Àn
 = *
cmd_Àn
;

600 
	`mem£t
(&
cmd_pﬁl
, 0, 
cmd_pﬁl_Àn
);

601 
	`mem˝y
(&
cmd_pﬁl
, 
p_cmd_d©a
, 
cmd_pﬁl_Àn
);

606 
	}
}

	@hal/phNxpNciHal_NfcDepSWPrio.h

16 #i‚de‡
_PHNXPNCIHAL_NFCDEPSWPRIO_H_


17 
	#_PHNXPNCIHAL_NFCDEPSWPRIO_H_


	)

19 
	~<phNxpNciHÆ.h
>

20 
	~<phTmlNfc.h
>

21 
	~<°rög.h
>

23 
	#START_POLLING
 0x00

	)

24 
	#RESUME_POLLING
 0x01

	)

25 
	#STOP_POLLING
 0x02

	)

26 
	#DISCOVER_SELECT
 0x03

	)

27 
	#CLEAR_PIPE_RSP
 0x04

	)

29 
uöt8_t
 
E«bÀP2P_PrioLogic
;

31 
NFCSTATUS
 
phNxpNciHÆ_NfcDï_r•_ext
(
uöt8_t
 *
p_¡f
, 
uöt16_t
 *
p_Àn
);

32 
phNxpNciHÆ_NfcDï_cmd_ext
(
uöt8_t
 *
p_cmd_d©a
, 
uöt16_t
 *
cmd_Àn
);

33 
NFCSTATUS
 
phNxpNciHÆ_NfcDï_com≠ª_¡f
(
uöt8_t
 *
p_cmd_d©a
, 
uöt16_t
 
cmd_Àn
);

34 
NFCSTATUS
 
phNxpNciHÆ_£À˘_RF_Discovîy
(
RfID
,
RfPrŸocﬁTy≥
);

35 
NFCSTATUS
 
phNxpNciHÆ_˛ón_P2P_Prio
();

36 
NFCSTATUS
 
phNxpNciHÆ_£nd_˛ór_pùe_r•
();

	@hal/phNxpNciHal_dta.c

16 
	~<phNxpLog.h
>

17 
	~<phNxpNciHÆ_dè.h
>

18 
	~<phNxpC⁄fig.h
>

21 
phNxpDè_C⁄åﬁ_t
 
	gnxpdè_˘æ
 = {0,0,0};

31 
	$phNxpE«bÀ_DèMode
 (
uöt16_t
 
∑âîn_no
)

33 
nxpdè_˘æ
.
dè_˘æ_Êag
 = 
FALSE
;

34 
nxpdè_˘æ
.
dè_t1t_Êag
 = 
FALSE
;

35 
nxpdè_˘æ
.
dè_∑âîn_no
 = 
∑âîn_no
;

36 
	`ALOGD
(">>>>DTA - Mode isÉnabled");

37 
nxpdè_˘æ
.
dè_˘æ_Êag
 = 
TRUE
;

38 
	}
}

47 
	$phNxpDißbÀ_DèMode
 ()

49 
nxpdè_˘æ
.
dè_˘æ_Êag
 = 
FALSE
;

50 
nxpdè_˘æ
.
dè_t1t_Êag
 = 
FALSE
;

51 
	`NXPLOG_NCIHAL_D
(">>>>DTA - Mode is Disabled");

52 
	}
}

62 
NFCSTATUS
 
	$phNxpDè_IsE«bÀ
()

64  
nxpdè_˘æ
.
dè_˘æ_Êag
;

65 
	}
}

74 
	$phNxpDè_T1TE«bÀ
()

76 
nxpdè_˘æ
.
dè_t1t_Êag
 = 
TRUE
;

77 
	}
}

90 
NFCSTATUS
 
	$phNxpNHÆ_DèUpd©e
(
uöt16_t
 *
cmd_Àn
, 
uöt8_t
 *
p_cmd_d©a
,

91 
uöt16_t
 *
r•_Àn
, 
uöt8_t
 *
p_r•_d©a
)

93 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

95 i‡(
nxpdè_˘æ
.
dè_˘æ_Êag
 =
TRUE
)

98 i‡(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 &&

99 
p_cmd_d©a
[2] == 0x17 &&Ö_cmd_data[3] == 0x01 &&

100 
p_cmd_d©a
[4] == 0x29 &&Ö_cmd_data[5] == 0x14 )

102 *
r•_Àn
 = 5;

103 
	`NXPLOG_NCIHAL_D
(">>>>DTA - Block set config command");

104 
	`phNxpNciHÆ_¥öt_∑ckë
("DTASEND", 
p_cmd_d©a
, *
cmd_Àn
);

106 
p_r•_d©a
[0] = 0x40;

107 
p_r•_d©a
[1] = 0x02;

108 
p_r•_d©a
[2] = 0x02;

109 
p_r•_d©a
[3] = 0x00;

110 
p_r•_d©a
[4] = 0x00;

112 
	`phNxpNciHÆ_¥öt_∑ckë
("DTARECV", 
p_r•_d©a
, 5);

114 
°©us
 = 
NFCSTATUS_FAILED
;

115 
	`NXPLOG_NCIHAL_D
("GoingÅhrough DTA workaround - Block set config command END");

118 i‡(
p_cmd_d©a
[0] == 0x21 &&Ö_cmd_data[1] == 0x08 &&Ö_cmd_data[2] == 0x04

119 && 
p_cmd_d©a
[3] == 0xFF &&Ö_cmd_data[4] == 0xFF)

121 
	`NXPLOG_NCIHAL_D
(">>>>DTA Change Felica system code");

122 *
r•_Àn
 = 4;

123 
p_r•_d©a
[0] = 0x41;

124 
p_r•_d©a
[1] = 0x08;

125 
p_r•_d©a
[2] = 0x01;

126 
p_r•_d©a
[3] = 0x00;

127 
°©us
 = 
NFCSTATUS_FAILED
;

129 
	`phNxpNciHÆ_¥öt_∑ckë
("DTARECV", 
p_r•_d©a
, 4);

131 i‡(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 &&

132 
p_cmd_d©a
[2] == 0x10 &&Ö_cmd_data[3] == 0x05 &&

133 
p_cmd_d©a
[10] == 0x32 &&Ö_cmd_data[12] == 0x00)

135 
	`NXPLOG_NCIHAL_D
(">>>>DTA Update LA_SEL_INFOÖaram");

137 
p_cmd_d©a
[12] = 0x40;

138 
p_cmd_d©a
[18] = 0x02;

139 
°©us
 = 
NFCSTATUS_SUCCESS
;

141 i‡(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 &&

142 
p_cmd_d©a
[2] == 0x0D &&Ö_cmd_data[3] == 0x04 &&

143 
p_cmd_d©a
[10] == 0x32 &&Ö_cmd_data[12] == 0x00)

145 
	`NXPLOG_NCIHAL_D
(">>>>DTA Blocking dirty set config");

146 *
r•_Àn
 = 5;

147 
p_r•_d©a
[0] = 0x40;

148 
p_r•_d©a
[1] = 0x02;

149 
p_r•_d©a
[2] = 0x02;

150 
p_r•_d©a
[3] = 0x00;

151 
p_r•_d©a
[4] = 0x00;

152 
°©us
 = 
NFCSTATUS_FAILED
;

153 
	`phNxpNciHÆ_¥öt_∑ckë
("DTARECV", 
p_r•_d©a
, 4);

155 if(
p_cmd_d©a
[0] == 0x21 &&

156 
p_cmd_d©a
[1] == 0x03 )

158 
	`NXPLOG_NCIHAL_D
(">>>>DTA Add NFC-FÜistenÅechÖarams");

159 
p_cmd_d©a
[2] += 6;

160 
p_cmd_d©a
[3] += 3;

161 
p_cmd_d©a
[*
cmd_Àn
] = 0x80;

162 
p_cmd_d©a
[*
cmd_Àn
 + 1] = 0x01;

163 
p_cmd_d©a
[*
cmd_Àn
 + 2] = 0x82;

164 
p_cmd_d©a
[*
cmd_Àn
 + 3] = 0x01;

165 
p_cmd_d©a
[*
cmd_Àn
 + 4] = 0x85;

166 
p_cmd_d©a
[*
cmd_Àn
 + 5] = 0x01;

168 *
cmd_Àn
 += 6;

169 
°©us
 = 
NFCSTATUS_SUCCESS
;

171 i‡(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 &&

172 
p_cmd_d©a
[2] == 0x0D &&Ö_cmd_data[3] == 0x04 &&

173 
p_cmd_d©a
[10] == 0x32 &&Ö_cmd_data[12] == 0x20 &&

174 
nxpdè_˘æ
.
dè_∑âîn_no
 == 0x1000)

176 
	`NXPLOG_NCIHAL_D
(">>>>DTA Blocking dirty set config foránalogÅesting");

177 *
r•_Àn
 = 5;

178 
p_r•_d©a
[0] = 0x40;

179 
p_r•_d©a
[1] = 0x02;

180 
p_r•_d©a
[2] = 0x02;

181 
p_r•_d©a
[3] = 0x00;

182 
p_r•_d©a
[4] = 0x00;

183 
°©us
 = 
NFCSTATUS_FAILED
;

184 
	`phNxpNciHÆ_¥öt_∑ckë
("DTARECV", 
p_r•_d©a
, 4);

186 i‡(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 &&

187 
p_cmd_d©a
[2] == 0x0D &&Ö_cmd_data[3] == 0x04 &&

188 
p_cmd_d©a
[4] == 0x32 &&Ö_cmd_data[5] == 0x01 &&

189 
p_cmd_d©a
[6] == 0x00)

191 
	`NXPLOG_NCIHAL_D
(">>>>DTA Blocking dirty set config");

192 *
r•_Àn
 = 5;

193 
p_r•_d©a
[0] = 0x40;

194 
p_r•_d©a
[1] = 0x02;

195 
p_r•_d©a
[2] = 0x02;

196 
p_r•_d©a
[3] = 0x00;

197 
p_r•_d©a
[4] = 0x00;

198 
°©us
 = 
NFCSTATUS_FAILED
;

199 
	`phNxpNciHÆ_¥öt_∑ckë
("DTARECV", 
p_r•_d©a
, 4);

201 i‡(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 &&

202 
p_cmd_d©a
[2] == 0x04 &&Ö_cmd_data[3] == 0x01 &&

203 
p_cmd_d©a
[4] == 0x50 &&Ö_cmd_data[5] == 0x01 &&

204 
p_cmd_d©a
[6] =0x00 && 
nxpdè_˘æ
.
dè_∑âîn_no
 == 0x1000)

206 
	`NXPLOG_NCIHAL_D
(">>>>DTA Blocking dirty set config foránalogÅesting");

207 *
r•_Àn
 = 5;

208 
p_r•_d©a
[0] = 0x40;

209 
p_r•_d©a
[1] = 0x02;

210 
p_r•_d©a
[2] = 0x02;

211 
p_r•_d©a
[3] = 0x00;

212 
p_r•_d©a
[4] = 0x00;

213 
°©us
 = 
NFCSTATUS_FAILED
;

214 
	`phNxpNciHÆ_¥öt_∑ckë
("DTARECV", 
p_r•_d©a
, 4);

220 i‡(
nxpdè_˘æ
.
dè_t1t_Êag
 =
TRUE
)

222 i‡(
p_cmd_d©a
[2] == 0x07 &&Ö_cmd_data[3] == 0x78 &&Ö_cmd_data[4] ==0x00 &&Ö_cmd_data[5] == 0x00)

246 
	`NXPLOG_NCIHAL_D
("Change RID command's UIDÉcho bytesÅo 0");

248 
nxpdè_˘æ
.
dè_t1t_Êag
 = 
FALSE
;

249 
p_cmd_d©a
[6] = 0x00;

250 
p_cmd_d©a
[7] = 0x00;

251 
p_cmd_d©a
[8] = 0x00;

252 
p_cmd_d©a
[9] = 0x00;

253 
°©us
 = 
NFCSTATUS_SUCCESS
;

258  
°©us
;

259 
	}
}

	@hal/phNxpNciHal_dta.h

17 #i‚de‡
_PHNXPNCIHAL_DTA_H_


18 
	#_PHNXPNCIHAL_DTA_H_


	)

20 
	~<phNxpNciHÆ_utûs.h
>

22 
	sphNxpDè_C⁄åﬁ


24 
uöt8_t
 
	mdè_˘æ_Êag
;

25 
uöt16_t
 
	mdè_∑âîn_no
;

26 
uöt8_t
 
	mdè_t1t_Êag
;

27 }
	tphNxpDè_C⁄åﬁ_t
;

29 
phNxpE«bÀ_DèMode
 (
uöt16_t
 
∑âîn_no
);

30 
phNxpDißbÀ_DèMode
 ();

31 
NFCSTATUS
 
phNxpDè_IsE«bÀ
();

32 
phNxpDè_T1TE«bÀ
();

33 
NFCSTATUS
 
phNxpNHÆ_DèUpd©e
(
uöt16_t
 *
cmd_Àn
, 
uöt8_t
 *
p_cmd_d©a
,

34 
uöt16_t
 *
r•_Àn
, 
uöt8_t
 *
p_r•_d©a
);

	@hal/phNxpNciHal_ext.c

16 
	~<phNxpNciHÆ_ext.h
>

17 
	~<phNxpNciHÆ.h
>

18 
	~<phTmlNfc.h
>

19 
	~<phDÆ4Nfc_mesßgeQueueLib.h
>

20 
	~<phNxpNciHÆ_NfcDïSWPrio.h
>

21 
	~<phNxpNciHÆ_Kovio.h
>

22 
	~<phNxpLog.h
>

23 
	~<phNxpC⁄fig.h
>

25 
	#HAL_EXTNS_WRITE_RSP_TIMEOUT
 (1000Ë

	)

27 #unde‡
P2P_PRIO_LOGIC_HAL_IMP


30 
phNxpNciHÆ_C⁄åﬁ_t
 
nx≤cihÆ_˘æ
;

31 
phNxpNciProfûe_C⁄åﬁ_t
 
nxµrofûe_˘æ
;

33 
kovio_dëe˘ed
;

34 
dißbÀ_kovio
;

35 
£nd_to_uµî_kovio
;

36 
uöt32_t
 
˛ónup_timî
;

37 
uöt8_t
 
	gicode_dëe˘ed
 = 0x00;

38 
uöt8_t
 
	gicode_£nd_eof
 = 0x00;

39 
uöt8_t
 
	gì_disc_d⁄e
 = 0x00;

40 
uöt8_t
 
	gE«bÀP2P_PrioLogic
 = 
FALSE
;

41 
uöt32_t
 
	gRfDiscID
 = 1;

42 
uöt32_t
 
	gRfPrŸocﬁTy≥
 = 4;

44 
uöt8_t
 
	g£tEEModeD⁄e
 = 0x00;

45 
uöt8_t
 
	gcmd_nf˚e_£tmode_íabÀ
[] = { 0x22, 0x01, 0x02, 0x01, 0x01 };

48 
uöt32_t
 
wFwVîR•
;

50 
uöt16_t
 
wFwVî
;

53 
uöt32_t
 
	gbC‹eInôR•
[40];

54 
uöt32_t
 
	giC‹eInôR•Lí
;

56 
uöt32_t
 
timeoutTimîId
;

58 
ªad_ªåy
();

60 
hÆ_exäs_wrôe_r•_timeout_cb
(
uöt32_t
 
TimîId
, *
pC⁄ãxt
);

67 
	#PROPRIETARY_CMD_FELICA_READER_MODE
 0xFE

	)

68 
uöt8_t
 
	ggFñiˇRódîMode
;

76 
	$phNxpNciHÆ_ext_öô
 ()

78 
icode_dëe˘ed
 = 0x00;

79 
icode_£nd_eof
 = 0x00;

80 
£tEEModeD⁄e
 = 0x00;

81 
kovio_dëe˘ed
 = 0x00;

82 
dißbÀ_kovio
 = 0x00;

83 
£nd_to_uµî_kovio
 = 0x01;

84 
E«bÀP2P_PrioLogic
 = 
FALSE
;

85 
	}
}

96 
NFCSTATUS
 
	$phNxpNciHÆ_¥o˚ss_ext_r•
 (
uöt8_t
 *
p_¡f
, 
uöt16_t
 *
p_Àn
)

99 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

100 
uöt16_t
 
rf_ãchnﬁogy_Àngth_∑øm
 = 0;

102 i‡(
p_¡f
[0] == 0x61 &&

103 
p_¡f
[1] == 0x05 &&

104 
p_¡f
[4] == 0x03 &&

105 
p_¡f
[5] == 0x05 &&

106 
nxµrofûe_˘æ
.
¥ofûe_ty≥
 =
EMV_CO_PROFILE
)

108 
p_¡f
[4] = 0xFF;

109 
p_¡f
[5] = 0xFF;

110 
p_¡f
[6] = 0xFF;

111 
	`NXPLOG_NCIHAL_D
("Nfc-Dep Detect in EmvCoÖrofile - RestartÖolling");

114 i‡(
p_¡f
[0] == 0x61 &&

115 
p_¡f
[1] == 0x05 &&

116 
p_¡f
[4] == 0x01 &&

117 
p_¡f
[5] == 0x05 &&

118 
p_¡f
[6] == 0x02 &&

119 
gFñiˇRódîMode
)

123 
p_¡f
[5] = 0x03;

124 
	`NXPLOG_NCIHAL_D
("FelicaReaderMode:Activity 1.1 WA");

129 #ifde‡
P2P_PRIO_LOGIC_HAL_IMP


130 if(
p_¡f
[0] == 0x61 &&

131 
p_¡f
[1] == 0x05 &&

132 
p_¡f
[4] == 0x02 &&

133 
p_¡f
[5] == 0x04 &&

134 
nxµrofûe_˘æ
.
¥ofûe_ty≥
 =
NFC_FORUM_PROFILE
)

136 
E«bÀP2P_PrioLogic
 = 
TRUE
;

139 
	`NXPLOG_NCIHAL_D
("I†E«bÀP2P_PrioLogic: 0x0%X", 
E«bÀP2P_PrioLogic
);

140 if(
	`phNxpDè_IsE«bÀ
(Ë=
FALSE
)

142 i‡((
icode_dëe˘ed
 !1)&&(
kovio_dëe˘ed
 !1Ë&& (
E«bÀP2P_PrioLogic
 =
TRUE
))

144 i‡(
	`phNxpNciHÆ_NfcDï_com≠ª_¡f
(
p_¡f
, *
p_Àn
Ë=
NFCSTATUS_FAILED
)

146 
°©us
 = 
	`phNxpNciHÆ_NfcDï_r•_ext
(
p_¡f
,
p_Àn
);

147 if(
°©us
 !
NFCSTATUS_INVALID_PARAMETER
)

149  
°©us
;

156 
°©us
 = 
NFCSTATUS_SUCCESS
;

157 
°©us
 = 
	`phNxpNciHÆ_kovio_r•_ext
(
p_¡f
,
p_Àn
);

159 i‡(
p_¡f
[0] == 0x61 &&

160 
p_¡f
[1] == 0x05)

162 
p_¡f
[4])

165 
	`NXPLOG_NCIHAL_D
("NxpNci: RF Interface = NFCEE Direct RF");

168 
	`NXPLOG_NCIHAL_D
("NxpNci: RF Interface = Frame RF");

171 
	`NXPLOG_NCIHAL_D
("NxpNci: RF Interface = ISO-DEP");

174 
	`NXPLOG_NCIHAL_D
("NxpNci: RF Interface = NFC-DEP");

177 
	`NXPLOG_NCIHAL_D
("NxpNci: RF Interface = MIFARE");

180 
	`NXPLOG_NCIHAL_D
("NxpNci: RF Interface = Unknown");

184 
p_¡f
[5])

187 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = T1T");

188 
	`phNxpDè_T1TE«bÀ
();

191 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = T2T");

194 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = T3T");

197 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = ISO-DEP");

200 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = NFC-DEP");

203 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = ISO-15693");

206 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = MIFARE");

209 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = Kovio");

212 
	`NXPLOG_NCIHAL_D
("NxpNci: Protocol = Unknown");

216 
p_¡f
[6])

219 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = A Passive Poll");

222 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = B Passive Poll");

225 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = F Passive Poll");

228 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = A Active Poll");

231 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = F Active Poll");

234 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = 15693 Passive Poll");

237 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = Kovio");

240 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = A Passive Listen");

243 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = B Passive Listen");

246 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = F Passive Listen");

249 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = A Active Listen");

252 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = F Active Listen");

255 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = 15693 Passive Listen");

258 
	`NXPLOG_NCIHAL_D
("NxpNci: Mode = Unknown");

263 i‡(
p_¡f
[0] == 0x61 &&

264 
p_¡f
[1] == 0x05 &&

265 
p_¡f
[2] == 0x15 &&

266 
p_¡f
[3] == 0x01 &&

267 
p_¡f
[4] == 0x01 &&

268 
p_¡f
[5] == 0x06 &&

269 
p_¡f
[6] == 0x06)

271 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround -Çotification of ISO 15693");

272 
icode_dëe˘ed
 = 0x01;

273 
p_¡f
[4] = 0x83;

274 
p_¡f
[5] = 0x83;

275 
p_¡f
[21] = 0x01;

276 
p_¡f
[22] = 0x01;

278 i‡(
icode_dëe˘ed
 == 1 &&

279 
icode_£nd_eof
 == 2)

281 
icode_£nd_eof
 = 3;

282 
°©us
 = 
NFCSTATUS_FAILED
;

283  
°©us
;

285 i‡(
p_¡f
[0] == 0x00 &&

286 
p_¡f
[1] == 0x00 &&

287 
icode_dëe˘ed
 == 1)

289 i‡(
icode_£nd_eof
 == 3)

291 
icode_£nd_eof
 = 0;

293 i‡(
p_¡f
[p_ntf[2]+ 2] == 0x00)

295 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - data of ISO 15693");

296 
p_¡f
[2]--;

297 (*
p_Àn
)--;

301 
	`NXPLOG_NCIHAL_D
 ("> STATUS_RF_FRAME ERRORÑesponse - workaround");

302 
p_¡f
[p_ntf[2]+ 2] |= 0x01;

305 i‡(
p_¡f
[2] == 0x02 &&

306 
p_¡f
[1] =0x00 && 
icode_dëe˘ed
 == 1)

308 
	`NXPLOG_NCIHAL_D
 ("> ICODE EOFÑesponse doÇot sendÅo upperÜayer");

310 if(
p_¡f
[0] == 0x61 &&

311 
p_¡f
[1] =0x06 && 
icode_dëe˘ed
 == 1)

313 
	`NXPLOG_NCIHAL_D
 ("> Polling Loop Re-Started");

314 
icode_dëe˘ed
 = 0;

315 
icode_£nd_eof
 = 0;

317 if(*
p_Àn
 == 4 &&

318 
p_¡f
[0] == 0x40 &&

319 
p_¡f
[1] == 0x02 &&

320 
p_¡f
[2] == 0x01 &&

321 
p_¡f
[3] == 0x06 )

323 
	`NXPLOG_NCIHAL_D
 ("> Deöô w‹k¨ound f‹ LLCP së_c⁄fig 0x%x 0x%x 0x%x", 
p_¡f
[21],Ö_ntf[22],Ö_ntf[23]);

324 
p_¡f
[0] = 0x40;

325 
p_¡f
[1] = 0x02;

326 
p_¡f
[2] = 0x02;

327 
p_¡f
[3] = 0x00;

328 
p_¡f
[4] = 0x00;

329 *
p_Àn
 = 5;

331 i‡((
p_¡f
[0] == 0x40) && (p_ntf[1] == 0x01))

333 
Àn
 = 
p_¡f
[2] + 2;

334 
wFwVîR•
(((
uöt32_t
)
p_¡f
[
Àn
 - 2])<< 16U)|(((uint32_t)p_ntf[len - 1])<< 8U)|p_ntf[len];

335 
iC‹eInôR•Lí
 = *
p_Àn
;

336 
	`mem˝y
(
bC‹eInôR•
, 
p_¡f
, *
p_Àn
);

337 
	`NXPLOG_NCIHAL_D
 ("NxpNci> FW Vîsi⁄: %x.%x.%x", 
p_¡f
[
Àn
-2],Ö_ntf[len-1],Ö_ntf[len]);

340 if(
p_¡f
[0] =0x42 &&Ö_¡f[1] =0x00 && 
ì_disc_d⁄e
 == 0x01)

342 
	`NXPLOG_NCIHAL_D
("GoingÅhrough workaround - NFCEE_DISCOVER_RSP");

343 if(
p_¡f
[4] == 0x01)

345 
p_¡f
[4] = 0x00;

347 
ì_disc_d⁄e
 = 0x00;

349 
	`NXPLOG_NCIHAL_D
("GoingÅhrough workaround - NFCEE_DISCOVER_RSP - END");

352 if(
p_¡f
[0] == 0x61 &&Ö_ntf[1] == 0x03 )

354 i‡(
p_¡f
[4] == 0x06 &&Ö_ntf[5] == 0x06)

356 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - 6103Çotification of ISO 15693");

358 
p_¡f
[4] = 0x83;

360 }if(
˛ónup_timî
!=0)

363 if(0=(*(
p_¡f
 + 2 + (*(p_ntf+2)))))

365 
	`phNxpNciHÆ_£À˘_RF_Discovîy
(
RfDiscID
,
RfPrŸocﬁTy≥
);

366 
°©us
 = 
NFCSTATUS_FAILED
;

367  
°©us
;

371 
RfDiscID
=
p_¡f
[3];

372 
RfPrŸocﬁTy≥
=
p_¡f
[4];

374 
°©us
 = 
NFCSTATUS_FAILED
;

375  
°©us
;

378 if(
p_¡f
[0] =0x41 &&Ö_¡f[1] =0x04 && 
˛ónup_timî
!=0)

380 
°©us
 = 
NFCSTATUS_FAILED
;

381  
°©us
;

383 if(
p_¡f
[0] == 0x60 &&Ö_ntf[1] == 0x00)

385 
	`NXPLOG_NCIHAL_E
("CORE_RESET_NTFÑeceived!");

386 
	`phNxpNciHÆ_emîgícy_ªcovîy
();

388 if(
p_¡f
[0] == 0x61 &&Ö_ntf[1] == 0x05

389 && 
p_¡f
[4] == 0x02 &&Ö_ntf[5] == 0x80

390 && 
p_¡f
[6] == 0x00 )

392 
	`NXPLOG_NCIHAL_D
("GoingÅhrough workaround - iso-dep interface mifareÖrotocol with sak valueÇotÉqualÅo 0x20");

393 
rf_ãchnﬁogy_Àngth_∑øm
 = 
p_¡f
[9];

394 if((
p_¡f
[ 9 + 
rf_ãchnﬁogy_Àngth_∑øm
] & 0x20) != 0x20)

396 
p_¡f
[4] = 0x80;

408  
°©us
;

409 
	}
}

421 
NFCSTATUS
 
	$phNxpNciHÆ_¥o˚ss_ext_cmd_r•
(
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
p_cmd
)

423 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

424 
uöt8_t
 
d©a_wrôãn
 = 0;

427 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
nx≤cihÆ_˘æ
.
ext_cb_d©a
, 
NULL
)

428 !
NFCSTATUS_SUCCESS
)

430 
	`NXPLOG_NCIHAL_D
("CreateÉxt_cb_data failed");

431  
NFCSTATUS_FAILED
;

435 
d©a_wrôãn
 = 
	`phNxpNciHÆ_wrôe_u∆ocked
(
cmd_Àn
, 
p_cmd
);

436 i‡(
d©a_wrôãn
 !
cmd_Àn
)

438 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_write failed for halÉxt");

439 
˛ón_™d_ªtu∫
;

443 
°©us
 = 
	`phOßlNfc_Timî_Sèπ
(
timeoutTimîId
,

444 
HAL_EXTNS_WRITE_RSP_TIMEOUT
,

445 &
hÆ_exäs_wrôe_r•_timeout_cb
,

446 
NULL
);

447 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

449 
	`NXPLOG_NCIHAL_D
("ResponseÅimer started");

453 
	`NXPLOG_NCIHAL_E
("ResponseÅimerÇot started!!!");

454 
°©us
 = 
NFCSTATUS_FAILED
;

455 
˛ón_™d_ªtu∫
;

459 
	`NXPLOG_NCIHAL_D
("WaitingáfterÉxt cmd sent");

460 i‡(
	`SEM_WAIT
(
nx≤cihÆ_˘æ
.
ext_cb_d©a
))

462 
	`NXPLOG_NCIHAL_E
("p_hal_ext->ext_cb_data.sem semaphoreÉrror");

463 
˛ón_™d_ªtu∫
;

467 
°©us
 = 
	`phOßlNfc_Timî_St›
(
timeoutTimîId
);

469 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

471 
	`NXPLOG_NCIHAL_D
("ResponseÅimer stopped");

475 
	`NXPLOG_NCIHAL_E
("ResponseÅimer stop ERROR!!!");

476 
°©us
 = 
NFCSTATUS_FAILED
;

479 
	`NXPLOG_NCIHAL_D
("CheckingÑesponse");

480 
°©us
 = 
NFCSTATUS_SUCCESS
;

482 
˛ón_™d_ªtu∫
:

483 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
nx≤cihÆ_˘æ
.
ext_cb_d©a
);

485  
°©us
;

486 
	}
}

500 
NFCSTATUS
 
	$phNxpNciHÆ_wrôe_ext
(
uöt16_t
 *
cmd_Àn
, 
uöt8_t
 *
p_cmd_d©a
,

501 
uöt16_t
 *
r•_Àn
, 
uöt8_t
 *
p_r•_d©a
)

503 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

505 
ªtvÆ
 = 0;

506 
isfound
 = 
	`GëNxpNumVÆue
(
NAME_MIFARE_READER_ENABLE
, &
ªtvÆ
, ());

508 
	`phNxpNciHÆ_NfcDï_cmd_ext
(
p_cmd_d©a
, 
cmd_Àn
);

510 if(
	`phNxpDè_IsE«bÀ
(Ë=
TRUE
)

512 
°©us
 = 
	`phNxpNHÆ_DèUpd©e
(
cmd_Àn
, 
p_cmd_d©a
,
r•_Àn
, 
p_r•_d©a
);

515 i‡(
p_cmd_d©a
[0] =
PROPRIETARY_CMD_FELICA_READER_MODE
 &&

516 
p_cmd_d©a
[1] =
PROPRIETARY_CMD_FELICA_READER_MODE
 &&

517 
p_cmd_d©a
[2] =
PROPRIETARY_CMD_FELICA_READER_MODE
)

519 
	`NXPLOG_NCIHAL_D
 ("Re˚ivedÖr›rõèry comm™dÅÿ£àFñiˇ Ródî mode:%d",
p_cmd_d©a
[3]);

520 
gFñiˇRódîMode
 = 
p_cmd_d©a
[3];

521 
°©us
 = 
NFCSTATUS_FAILED
;

523 i‡(
p_cmd_d©a
[0] == 0x20 &&

524 
p_cmd_d©a
[1] == 0x02 &&

525 
p_cmd_d©a
[2] == 0x05 &&

526 
p_cmd_d©a
[3] == 0x01 &&

527 
p_cmd_d©a
[4] == 0xA0 &&

528 
p_cmd_d©a
[5] == 0x44 &&

529 
p_cmd_d©a
[6] == 0x01 &&

530 
p_cmd_d©a
[7] == 0x01)

532 
nxµrofûe_˘æ
.
¥ofûe_ty≥
 = 
EMV_CO_PROFILE
;

533 
	`NXPLOG_NCIHAL_D
 ("EMV_CO_PROFILE mode - Enabled");

534 
°©us
 = 
NFCSTATUS_SUCCESS
;

536 i‡(
p_cmd_d©a
[0] == 0x20 &&

537 
p_cmd_d©a
[1] == 0x02 &&

538 
p_cmd_d©a
[2] == 0x05 &&

539 
p_cmd_d©a
[3] == 0x01 &&

540 
p_cmd_d©a
[4] == 0xA0 &&

541 
p_cmd_d©a
[5] == 0x44 &&

542 
p_cmd_d©a
[6] == 0x01 &&

543 
p_cmd_d©a
[7] == 0x00)

545 
	`NXPLOG_NCIHAL_D
 ("NFC_FORUM_PROFILE mode - Enabled");

546 
nxµrofûe_˘æ
.
¥ofûe_ty≥
 = 
NFC_FORUM_PROFILE
;

547 
°©us
 = 
NFCSTATUS_SUCCESS
;

550 i‡(
nxµrofûe_˘æ
.
¥ofûe_ty≥
 =
EMV_CO_PROFILE
)

552 i‡(
p_cmd_d©a
[0] == 0x21 &&

553 
p_cmd_d©a
[1] == 0x06 &&

554 
p_cmd_d©a
[2] == 0x01 &&

555 
p_cmd_d©a
[3] == 0x03)

559 
	`NXPLOG_NCIHAL_D
 ("EmvCo Poll mode - RF Deactivate discard");

560 
	`phNxpNciHÆ_¥öt_∑ckë
("SEND", 
p_cmd_d©a
, *
cmd_Àn
);

561 *
r•_Àn
 = 4;

562 
p_r•_d©a
[0] = 0x41;

563 
p_r•_d©a
[1] = 0x06;

564 
p_r•_d©a
[2] = 0x01;

565 
p_r•_d©a
[3] = 0x00;

566 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
p_r•_d©a
, 4);

567 
°©us
 = 
NFCSTATUS_FAILED
;

570 if(
p_cmd_d©a
[0] == 0x21 &&

571 
p_cmd_d©a
[1] == 0x03 )

573 
	`NXPLOG_NCIHAL_D
 ("EmvCo Poll mode - Discover map only for Aánd B");

574 
p_cmd_d©a
[2] = 0x05;

575 
p_cmd_d©a
[3] = 0x02;

576 
p_cmd_d©a
[4] = 0x00;

577 
p_cmd_d©a
[5] = 0x01;

578 
p_cmd_d©a
[6] = 0x01;

579 
p_cmd_d©a
[7] = 0x01;

580 *
cmd_Àn
 = 8;

583 i‡(
ªtvÆ
 == 0x01 &&

584 
p_cmd_d©a
[0] == 0x21 &&

585 
p_cmd_d©a
[1] == 0x00)

587 
	`NXPLOG_NCIHAL_D
 ("GoingÅhroughÉxtns - Adding Mifare in RF Discovery");

589 
p_cmd_d©a
[2] += 3;

590 
p_cmd_d©a
[3] += 1;

591 
p_cmd_d©a
[*
cmd_Àn
] = 0x80;

592 
p_cmd_d©a
[*
cmd_Àn
 + 1] = 0x01;

593 
p_cmd_d©a
[*
cmd_Àn
 + 2] = 0x80;

594 *
cmd_Àn
 += 3;

596 
°©us
 = 
NFCSTATUS_SUCCESS
;

597 
	`NXPLOG_NCIHAL_D
 ("GoingÅhroughÉxtns - Adding Mifare in RF Discovery - END");

599 i‡(
p_cmd_d©a
[3] == 0x81 &&

600 
p_cmd_d©a
[4] == 0x01 &&

601 
p_cmd_d©a
[5] == 0x03)

603 *
cmd_Àn
 = 7;

605 
	`NXPLOG_NCIHAL_D
("> GoingÅhrough workaround - set hostÜist");

607 
p_cmd_d©a
[2] = 0x04;

608 
p_cmd_d©a
[6] = 0xC0;

610 
	`NXPLOG_NCIHAL_D
("> GoingÅhrough workaround - set hostÜist - END");

612 
°©us
 = 
NFCSTATUS_SUCCESS
;

614 #i‚de‡
FELICA_CLT_ENABLE


615 i‡(
p_cmd_d©a
[0] == 0x21 &&

616 
p_cmd_d©a
[1] == 0x01)

618 
	`NXPLOG_NCIHAL_D
("> GoingÅhrough workaround - NFC-DEP Routing");

620 
p_cmd_d©a
[2] += 5;

622 
p_cmd_d©a
[4] += 1;

624 
p_cmd_d©a
[*
cmd_Àn
] = 0x01;

625 
p_cmd_d©a
[*
cmd_Àn
 + 1] = 0x03;

626 
p_cmd_d©a
[*
cmd_Àn
 + 2] = 0x00;

627 
p_cmd_d©a
[*
cmd_Àn
 + 3] = 0x01;

628 
p_cmd_d©a
[*
cmd_Àn
 + 4] = 0x05;

630 *
cmd_Àn
 += 5;

632 
	`NXPLOG_NCIHAL_D
("> GoingÅhrough workaround - NFC-DEP Routing - END");

634 
°©us
 = 
NFCSTATUS_SUCCESS
;

638 if(
icode_dëe˘ed
)

640 i‡((
p_cmd_d©a
[3] & 0x40) == 0x40 &&

641 (
p_cmd_d©a
[4] == 0x21 ||

642 
p_cmd_d©a
[4] == 0x22 ||

643 
p_cmd_d©a
[4] == 0x24 ||

644 
p_cmd_d©a
[4] == 0x27 ||

645 
p_cmd_d©a
[4] == 0x28 ||

646 
p_cmd_d©a
[4] == 0x29 ||

647 
p_cmd_d©a
[4] == 0x2a))

649 
	`NXPLOG_NCIHAL_D
 ("> Send EOF set");

650 
icode_£nd_eof
 = 1;

653 if(
p_cmd_d©a
[3] == 0x20 ||Ö_cmd_data[3] == 0x24 ||

654 
p_cmd_d©a
[3] == 0x60)

656 
	`NXPLOG_NCIHAL_D
 ("> NFC ISO_15693 Proprietary CMD ");

657 
p_cmd_d©a
[3] += 0x02;

660 if(
p_cmd_d©a
[0] == 0x21 &&

661 
p_cmd_d©a
[1] == 0x03 )

663 
	`NXPLOG_NCIHAL_D
 ("> Polling Loop Started");

664 
icode_dëe˘ed
 = 0;

665 
icode_£nd_eof
 = 0;

668 i‡(
p_cmd_d©a
[0] == 0x22 &&

669 
p_cmd_d©a
[1] == 0x00 &&

670 
p_cmd_d©a
[2] == 0x01 &&

671 
p_cmd_d©a
[3] == 0x00

674 *
r•_Àn
 = 5;

675 
p_r•_d©a
[0] = 0x42;

676 
p_r•_d©a
[1] = 0x00;

677 
p_r•_d©a
[2] = 0x02;

678 
p_r•_d©a
[3] = 0x00;

679 
p_r•_d©a
[4] = 0x00;

681 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
p_r•_d©a
, 5);

682 
°©us
 = 
NFCSTATUS_FAILED
;

686 i‡–(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 ) &&

687 –(
p_cmd_d©a
[2] == 0x09 &&Ö_cmd_data[3] == 0x04)

692 *
cmd_Àn
 += 0x01;

693 
p_cmd_d©a
[2] += 0x01;

694 
p_cmd_d©a
[9] = 0x01;

695 
p_cmd_d©a
[10] = 0x40;

696 
p_cmd_d©a
[11] = 0x50;

697 
p_cmd_d©a
[12] = 0x00;

699 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config ");

701 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config - End ");

705 i‡–(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 ) &&

707 (
p_cmd_d©a
[2] == 0x07 &&Ö_cmd_data[3] == 0x03) ||

708 (
p_cmd_d©a
[2] == 0x03 &&Ö_cmd_data[3] == 0x01 &&Ö_cmd_data[4] == 0x32)

712 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config ");

713 
	`phNxpNciHÆ_¥öt_∑ckë
("SEND", 
p_cmd_d©a
, *
cmd_Àn
);

714 *
r•_Àn
 = 5;

715 
p_r•_d©a
[0] = 0x40;

716 
p_r•_d©a
[1] = 0x02;

717 
p_r•_d©a
[2] = 0x02;

718 
p_r•_d©a
[3] = 0x00;

719 
p_r•_d©a
[4] = 0x00;

721 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
p_r•_d©a
, 5);

722 
°©us
 = 
NFCSTATUS_FAILED
;

723 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config - End ");

728 i‡–(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 ) &&

731 (
p_cmd_d©a
[2] == 0x04 &&Ö_cmd_data[3] == 0x01 &&

732 
p_cmd_d©a
[4] == 0x32 &&Ö_cmd_data[5] == 0x00)

738 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config ");

739 
	`phNxpNciHÆ_¥öt_∑ckë
("SEND", 
p_cmd_d©a
, *
cmd_Àn
);

740 
p_cmd_d©a
[6] = 0x60;

742 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
p_r•_d©a
, 5);

744 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config - End ");

748 i‡–(
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02 ) &&

749 ((
p_cmd_d©a
[2] == 0x09 &&Ö_cmd_data[3] == 0x04) ||

750 (
p_cmd_d©a
[2] == 0x0B &&Ö_cmd_data[3] == 0x05) ||

751 (
p_cmd_d©a
[2] == 0x07 &&Ö_cmd_data[3] == 0x02) ||

752 (
p_cmd_d©a
[2] == 0x0A &&Ö_cmd_data[3] == 0x03) ||

753 (
p_cmd_d©a
[2] == 0x0A &&Ö_cmd_data[3] == 0x04) ||

754 (
p_cmd_d©a
[2] == 0x05 &&Ö_cmd_data[3] == 0x02))

757 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config ");

758 
	`phNxpNciHÆ_¥öt_∑ckë
("SEND", 
p_cmd_d©a
, *
cmd_Àn
);

759 *
r•_Àn
 = 5;

760 
p_r•_d©a
[0] = 0x40;

761 
p_r•_d©a
[1] = 0x02;

762 
p_r•_d©a
[2] = 0x02;

763 
p_r•_d©a
[3] = 0x00;

764 
p_r•_d©a
[4] = 0x00;

766 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
p_r•_d©a
, 5);

767 
°©us
 = 
NFCSTATUS_FAILED
;

768 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config - End ");

771 if((
p_cmd_d©a
[0] == 0x20 &&Ö_cmd_data[1] == 0x02) &&

772 ((
p_cmd_d©a
[3] == 0x00) ||

773 ((*
cmd_Àn
 >0x06Ë&& (
p_cmd_d©a
[5] == 0x00))))

775 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config ");

776 
	`phNxpNciHÆ_¥öt_∑ckë
("SEND", 
p_cmd_d©a
, *
cmd_Àn
);

777 *
r•_Àn
 = 5;

778 
p_r•_d©a
[0] = 0x40;

779 
p_r•_d©a
[1] = 0x02;

780 
p_r•_d©a
[2] = 0x02;

781 
p_r•_d©a
[3] = 0x00;

782 
p_r•_d©a
[4] = 0x00;

784 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
p_r•_d©a
, 5);

785 
°©us
 = 
NFCSTATUS_FAILED
;

786 
	`NXPLOG_NCIHAL_D
 ("> GoingÅhrough workaround - Dirty Set Config - End ");

789 i‡((
wFwVîR•
 & 0x0000FFFFË=
wFwVî
)

792 i‡(
p_cmd_d©a
[0] == 0x20 &&

793 
p_cmd_d©a
[1] == 0x00 &&

794 
p_cmd_d©a
[2] == 0x01 &&

795 
p_cmd_d©a
[3] == 0x01

814 
p_cmd_d©a
[0] == 0x20 &&

815 
p_cmd_d©a
[1] == 0x01 &&

816 
p_cmd_d©a
[2] == 0x00

826  
°©us
;

827 
	}
}

840 
NFCSTATUS
 
	$phNxpNciHÆ_£nd_ext_cmd
(
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
p_cmd
)

842 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

844 
	`HAL_ENABLE_EXT
();

845 
nx≤cihÆ_˘æ
.
cmd_Àn
 = cmd_len;

846 
	`mem˝y
(
nx≤cihÆ_˘æ
.
p_cmd_d©a
, 
p_cmd
, 
cmd_Àn
);

847 
°©us
 = 
	`phNxpNciHÆ_¥o˚ss_ext_cmd_r•
(
nx≤cihÆ_˘æ
.
cmd_Àn
,Çx≤cihÆ_˘æ.
p_cmd_d©a
);

848 
	`HAL_DISABLE_EXT
();

850  
°©us
;

851 
	}
}

861 
	$hÆ_exäs_wrôe_r•_timeout_cb
(
uöt32_t
 
timîId
, *
pC⁄ãxt
)

863 if(
nx≤cihÆ_˘æ
.
ªad_ªåy_˙t
 != 1)

865 
nx≤cihÆ_˘æ
.
ªad_ªåy_˙t
 = 1;

866 
	`ªad_ªåy
();

870 
	`NXPLOG_NCIHAL_E
("hal_extns_write_rsp_timeout_cb - writeÅimeout!!!");

871 
	`phNxpNciHÆ_emîgícy_ªcovîy
();

874 
	}
}

	@hal/phNxpNciHal_ext.h

16 #i‚de‡
_PHNXPNCIHAL_EXT_H_


17 
	#_PHNXPNCIHAL_EXT_H_


	)

19 
	~<phNxpNciHÆ.h
>

20 
	~<°rög.h
>

21 
	~<phNxpNciHÆ_dè.h
>

23 
phNxpNciHÆ_ext_öô
 ();

24 
NFCSTATUS
 
phNxpNciHÆ_¥o˚ss_ext_r•
 (
uöt8_t
 *
p_¡f
, 
uöt16_t
 *
p_Àn
);

25 
NFCSTATUS
 
phNxpNciHÆ_£nd_ext_cmd
(
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
p_cmd
);

26 
NFCSTATUS
 
phNxpNciHÆ_wrôe_ext
(
uöt16_t
 *
cmd_Àn
, 
uöt8_t
 *
p_cmd_d©a
,

27 
uöt16_t
 *
r•_Àn
, 
uöt8_t
 *
p_r•_d©a
);

	@inc/phNxpNciHal_Adaptation.h

17 #i‚de‡
_PHNXPNCIHAL_ADAPTATION_H_


18 
	#_PHNXPNCIHAL_ADAPTATION_H_


	)

20 
	~<h¨dw¨e/h¨dw¨e.h
>

21 
	~<h¨dw¨e/nfc.h
>

25 
nfc_nci_devi˚
 
	mnci_devi˚
;

28 } 
	t≤547_dev_t
;

32 
phNxpNciHÆ_›í
(
nfc_°ack_ˇŒback_t
 *
p_cback
,

33 
nfc_°ack_d©a_ˇŒback_t
 *
p_d©a_cback
);

34 
phNxpNciHÆ_wrôe
(
uöt16_t
 
d©a_Àn
, c⁄° 
uöt8_t
 *
p_d©a
);

35 
phNxpNciHÆ_c‹e_öôülized
(
uöt8_t
* 
p_c‹e_öô_r•_∑øms
);

36 
phNxpNciHÆ_¥e_discovî
();

37 
phNxpNciHÆ_˛o£
();

38 
phNxpNciHÆ_c⁄åﬁ_gø¡ed
();

39 
phNxpNciHÆ_powî_cy˛e
();

	@inc/phNxpNciHal_Api.h

16 #i‚de‡
_PHNXPNCIHAL_API_H_


17 
	#_PHNXPNCIHAL_API_H_


	)

19 
	~<phNfcSètus.h
>

20 
	~<phNxpNciHÆ.h
>

21 
	~<phTmlNfc.h
>

33 
NFCSTATUS
 
phNxpNciHÆ_gë_vîsi⁄
 (
uöt32_t
 *
hw_vî
, uöt32_à*
fw_vî
, uöt32_à*
sw_vî
);

	@inc/phNxpNciHal_SelfTest.h

16 #i‚de‡
_PHNXPNCIHAL_SELFTEST_H_


17 
	#_PHNXPNCIHAL_SELFTEST_H_


	)

19 #ifde‡
NXP_HW_SELF_TEST


21 
	~<phNfcSètus.h
>

22 
	~<phNxpNciHÆ.h
>

23 
	~<phTmlNfc.h
>

28 
	mNFC_RF_TECHNOLOGY_A
,

29 
	mNFC_RF_TECHNOLOGY_B
,

30 
	mNFC_RF_TECHNOLOGY_F
,

31 } 
	tphNxpNfc_Tech_t
;

36 
	mNFC_BIT_RATE_106
,

37 
	mNFC_BIT_RATE_212
,

38 
	mNFC_BIT_RATE_424
,

39 
	mNFC_BIT_RATE_848
,

40 } 
	tphNxpNfc_Bôøã_t
;

42 
	sphA¡í«_St_Re•


45 
uöt16_t
 
	mwTxdoRawVÆue
;

46 
uöt16_t
 
	mwTxdoMósuªdR™geMö
;

47 
uöt16_t
 
	mwTxdoMósuªdR™geMax
;

48 
uöt16_t
 
	mwTxdoMósuªdTﬁî™˚
;

50 
uöt16_t
 
	mwAgcVÆue
;

51 
uöt16_t
 
	mwAgcVÆueTﬁî™˚
;

53 
uöt16_t
 
	mwAgcVÆuewôhfixedNFCLD
;

54 
uöt16_t
 
	mwAgcVÆuewôhfixedNFCLDTﬁî™˚
;

56 
uöt16_t
 
	mwAgcDif„ª¡ülWôhO≥n1
;

57 
uöt16_t
 
	mwAgcDif„ª¡ülWôhO≥nTﬁî™˚1
;

58 
uöt16_t
 
	mwAgcDif„ª¡ülWôhO≥n2
;

59 
uöt16_t
 
	mwAgcDif„ª¡ülWôhO≥nTﬁî™˚2
;

60 }
	tphA¡í«_St_Re•_t
;

74 
NFCSTATUS
 
phNxpNciHÆ_Te°Mode_›í
 ();

87 
phNxpNciHÆ_Te°Mode_˛o£
 ();

100 
NFCSTATUS
 
phNxpNciHÆ_SwpTe°
 (
uöt8_t
 
swp_löe
);

115 
NFCSTATUS
 
phNxpNciHÆ_PrbsTe°Sèπ
 (
phNxpNfc_Tech_t
 
ãch
, 
phNxpNfc_Bôøã_t
 
bôøã
);

129 
NFCSTATUS
 
phNxpNciHÆ_PrbsTe°St›
 ();

142 
NFCSTATUS
 
phNxpNciHÆ_A¡í«Te°
 ();

154 
NFCSTATUS
 
phNxpNciHÆ_RfFõldTe°
 (
uöt8_t
 
⁄
);

166 
NFCSTATUS
 
phNxpNciHÆ_Dow∆ﬂdPöTe°
 ();

	@log/phNxpLog.c

18 #i‡! 
deföed
 (
NXPLOG__H_INCLUDED
)

19 
	~"phNxpLog.h
"

20 
	~"phNxpC⁄fig.h
"

22 
	~<cutûs/¥›îtõs.h
>

24 c⁄° * 
	gNXPLOG_ITEM_EXTNS
 = "NxpExtns";

25 c⁄° * 
	gNXPLOG_ITEM_NCIHAL
 = "NxpHal";

26 c⁄° * 
	gNXPLOG_ITEM_NCIX
 = "NxpNciX";

27 c⁄° * 
	gNXPLOG_ITEM_NCIR
 = "NxpNciR";

28 c⁄° * 
	gNXPLOG_ITEM_FWDNLD
 = "NxpFwDnld";

29 c⁄° * 
	gNXPLOG_ITEM_TML
 = "NxpTml";

31 #ifde‡
NXP_HCI_REQ


32 c⁄° * 
	gNXPLOG_ITEM_HCPX
 = "NxpHcpX";

33 c⁄° * 
	gNXPLOG_ITEM_HCPR
 = "NxpHcpR";

37 
nci_log_Àvñ_t
 
	ggLog_Àvñ
;

51 
uöt8_t
 
	$phNxpLog_SëGlobÆLogLevñ
 ()

53 
uöt8_t
 
Àvñ
 = 
NXPLOG_DEFAULT_LOGLEVEL
;

54 
num
 = 0;

55 
vÆueSå
 [
PROPERTY_VALUE_MAX
] = {0};

57 
Àn
 = 
	`¥›îty_gë
 (
PROP_NAME_NXPLOG_GLOBAL_LOGLEVEL
, 
vÆueSå
, "");

58 i‡(
Àn
 > 0)

61 
	`ssˇnf
 (
vÆueSå
, "%lu", &
num
);

62 
Àvñ
 = (Ë
num
;

64 
	`mem£t
(&
gLog_Àvñ
, 
Àvñ
, (
nci_log_Àvñ_t
));

65  
Àvñ
;

66 
	}
}

77 
	$phNxpLog_SëHALLogLevñ
 (
uöt8_t
 
Àvñ
)

79 
num
 = 0;

80 
Àn
;

81 
vÆueSå
 [
PROPERTY_VALUE_MAX
] = {0};

83 i‡(
	`GëNxpNumVÆue
 (
NAME_NXPLOG_HAL_LOGLEVEL
, &
num
, (num)))

85 
gLog_Àvñ
.
hÆ_log_Àvñ
 = (
Àvñ
 > (Ë
num
) ?Üevel : ()Çum;;

88 
Àn
 = 
	`¥›îty_gë
 (
PROP_NAME_NXPLOG_HAL_LOGLEVEL
, 
vÆueSå
, "");

89 i‡(
Àn
 > 0)

92 
	`ssˇnf
 (
vÆueSå
, "%lu", &
num
);

93 
gLog_Àvñ
.
hÆ_log_Àvñ
 = (Ë
num
;

95 
	}
}

106 
	$phNxpLog_SëExäsLogLevñ
 (
uöt8_t
 
Àvñ
)

108 
num
 = 0;

109 
Àn
;

110 
vÆueSå
 [
PROPERTY_VALUE_MAX
] = {0};

111 i‡(
	`GëNxpNumVÆue
 (
NAME_NXPLOG_EXTNS_LOGLEVEL
, &
num
, (num)))

113 
gLog_Àvñ
.
exäs_log_Àvñ
 = (
Àvñ
 > (Ë
num
) ?Üevel : ()Çum;;

116 
Àn
 = 
	`¥›îty_gë
 (
PROP_NAME_NXPLOG_EXTNS_LOGLEVEL
, 
vÆueSå
, "");

117 i‡(
Àn
 > 0)

120 
	`ssˇnf
 (
vÆueSå
, "%lu", &
num
);

121 
gLog_Àvñ
.
exäs_log_Àvñ
 = (Ë
num
;

123 
	}
}

134 
	$phNxpLog_SëTmlLogLevñ
 (
uöt8_t
 
Àvñ
)

136 
num
 = 0;

137 
Àn
;

138 
vÆueSå
 [
PROPERTY_VALUE_MAX
] = {0};

139 i‡(
	`GëNxpNumVÆue
 (
NAME_NXPLOG_TML_LOGLEVEL
, &
num
, (num)))

141 
gLog_Àvñ
.
tml_log_Àvñ
 = (
Àvñ
 > (Ë
num
) ?Üevel : ()Çum;;

144 
Àn
 = 
	`¥›îty_gë
 (
PROP_NAME_NXPLOG_TML_LOGLEVEL
, 
vÆueSå
, "");

145 i‡(
Àn
 > 0)

148 
	`ssˇnf
 (
vÆueSå
, "%lu", &
num
);

149 
gLog_Àvñ
.
tml_log_Àvñ
 = (Ë
num
;

151 
	}
}

162 
	$phNxpLog_SëD∆dLogLevñ
 (
uöt8_t
 
Àvñ
)

164 
num
 = 0;

165 
Àn
;

166 
vÆueSå
 [
PROPERTY_VALUE_MAX
] = {0};

167 i‡(
	`GëNxpNumVÆue
 (
NAME_NXPLOG_FWDNLD_LOGLEVEL
, &
num
, (num)))

169 
gLog_Àvñ
.
d∆d_log_Àvñ
 = (
Àvñ
 > (Ë
num
) ?Üevel : ()Çum;;

172 
Àn
 = 
	`¥›îty_gë
 (
PROP_NAME_NXPLOG_FWDNLD_LOGLEVEL
, 
vÆueSå
, "");

173 i‡(
Àn
 > 0)

176 
	`ssˇnf
 (
vÆueSå
, "%lu", &
num
);

177 
gLog_Àvñ
.
d∆d_log_Àvñ
 = (Ë
num
;

179 
	}
}

190 
	$phNxpLog_SëNciTxLogLevñ
 (
uöt8_t
 
Àvñ
)

192 
num
 = 0;

193 
Àn
;

194 
vÆueSå
 [
PROPERTY_VALUE_MAX
] = {0};

195 i‡(
	`GëNxpNumVÆue
 (
NAME_NXPLOG_NCIX_LOGLEVEL
, &
num
, (num)))

197 
gLog_Àvñ
.
ncix_log_Àvñ
 = (
Àvñ
 > (Ë
num
) ?Üevel : ()Çum;

199 i‡(
	`GëNxpNumVÆue
 (
NAME_NXPLOG_NCIR_LOGLEVEL
, &
num
, (num)))

201 
gLog_Àvñ
.
ncú_log_Àvñ
 = (
Àvñ
 > (Ë
num
) ?Üevel : ()Çum;;

204 
Àn
 = 
	`¥›îty_gë
 (
PROP_NAME_NXPLOG_NCI_LOGLEVEL
, 
vÆueSå
, "");

205 i‡(
Àn
 > 0)

208 
	`ssˇnf
 (
vÆueSå
, "%lu", &
num
);

209 
gLog_Àvñ
.
ncix_log_Àvñ
 = (Ë
num
;

210 
gLog_Àvñ
.
ncú_log_Àvñ
 = (Ë
num
;

212 
	}
}

241 
	$phNxpLog_InôülizeLogLevñ
()

243 
uöt8_t
 
Àvñ
 = 
	`phNxpLog_SëGlobÆLogLevñ
();

244 
	`phNxpLog_SëHALLogLevñ
(
Àvñ
);

245 
	`phNxpLog_SëExäsLogLevñ
(
Àvñ
);

246 
	`phNxpLog_SëTmlLogLevñ
(
Àvñ
);

247 
	`phNxpLog_SëD∆dLogLevñ
(
Àvñ
);

248 
	`phNxpLog_SëNciTxLogLevñ
(
Àvñ
);

250 
	`ALOGD
 ("%s: global =%u, Fwdnld =%u,Éxtns =%u, \
 =%u,Åml =%u,Çcir =%u, \
 =%u", \

253 
__FUNCTION__
, 
gLog_Àvñ
.
globÆ_log_Àvñ
, gLog_Àvñ.
d∆d_log_Àvñ
,

254 
gLog_Àvñ
.
exäs_log_Àvñ
, gLog_Àvñ.
hÆ_log_Àvñ
, gLog_Àvñ.
tml_log_Àvñ
,

255 
gLog_Àvñ
.
ncú_log_Àvñ
, gLog_Àvñ.
ncix_log_Àvñ
);

256 
	}
}

	@log/phNxpLog.h

17 #i‡! 
deföed
 (
NXPLOG__H_INCLUDED
)

18 
	#NXPLOG__H_INCLUDED


	)

20 
	~<cutûs/log.h
>

22 
	snci_log_Àvñ


24 
uöt8_t
 
	mglobÆ_log_Àvñ
;

25 
uöt8_t
 
	mexäs_log_Àvñ
;

26 
uöt8_t
 
	mhÆ_log_Àvñ
;

27 
uöt8_t
 
	md∆d_log_Àvñ
;

28 
uöt8_t
 
	mtml_log_Àvñ
;

29 
uöt8_t
 
	mncix_log_Àvñ
;

30 
uöt8_t
 
	mncú_log_Àvñ
;

31 } 
	tnci_log_Àvñ_t
;

34 
nci_log_Àvñ_t
 
gLog_Àvñ
;

37 
	#ENABLE_EXTNS_TRACES
 
TRUE


	)

38 
	#ENABLE_HAL_TRACES
 
TRUE


	)

39 
	#ENABLE_TML_TRACES
 
TRUE


	)

40 
	#ENABLE_FWDNLD_TRACES
 
TRUE


	)

41 
	#ENABLE_NCIX_TRACES
 
TRUE


	)

42 
	#ENABLE_NCIR_TRACES
 
TRUE


	)

44 
	#ENABLE_HCPX_TRACES
 
FALSE


	)

45 
	#ENABLE_HCPR_TRACES
 
FALSE


	)

48 
	#NAME_NXPLOG_EXTNS_LOGLEVEL
 "NXPLOG_EXTNS_LOGLEVEL"

	)

49 
	#NAME_NXPLOG_HAL_LOGLEVEL
 "NXPLOG_NCIHAL_LOGLEVEL"

	)

50 
	#NAME_NXPLOG_NCIX_LOGLEVEL
 "NXPLOG_NCIX_LOGLEVEL"

	)

51 
	#NAME_NXPLOG_NCIR_LOGLEVEL
 "NXPLOG_NCIR_LOGLEVEL"

	)

52 
	#NAME_NXPLOG_FWDNLD_LOGLEVEL
 "NXPLOG_FWDNLD_LOGLEVEL"

	)

53 
	#NAME_NXPLOG_TML_LOGLEVEL
 "NXPLOG_TML_LOGLEVEL"

	)

56 
	#PROP_NAME_NXPLOG_GLOBAL_LOGLEVEL
 "nfc.nxp_log_Àvñ_globÆ"

	)

57 
	#PROP_NAME_NXPLOG_EXTNS_LOGLEVEL
 "nfc.nxp_log_Àvñ_exäs"

	)

58 
	#PROP_NAME_NXPLOG_HAL_LOGLEVEL
 "nfc.nxp_log_Àvñ_hÆ"

	)

59 
	#PROP_NAME_NXPLOG_NCI_LOGLEVEL
 "nfc.nxp_log_Àvñ_nci"

	)

60 
	#PROP_NAME_NXPLOG_FWDNLD_LOGLEVEL
 "nfc.nxp_log_Àvñ_d∆d"

	)

61 
	#PROP_NAME_NXPLOG_TML_LOGLEVEL
 "nfc.nxp_log_Àvñ_tml"

	)

64 
	#NXPLOG_LOG_SILENT_LOGLEVEL
 0x00

	)

65 
	#NXPLOG_LOG_ERROR_LOGLEVEL
 0x01

	)

66 
	#NXPLOG_LOG_WARN_LOGLEVEL
 0x02

	)

67 
	#NXPLOG_LOG_DEBUG_LOGLEVEL
 0x03

	)

72 
	#NXPLOG_DEFAULT_LOGLEVEL
 
NXPLOG_LOG_ERROR_LOGLEVEL


	)

79 c⁄° * 
NXPLOG_ITEM_EXTNS
;

80 c⁄° * 
NXPLOG_ITEM_NCIHAL
;

81 c⁄° * 
NXPLOG_ITEM_NCIX
;

82 c⁄° * 
NXPLOG_ITEM_NCIR
;

83 c⁄° * 
NXPLOG_ITEM_FWDNLD
;

84 c⁄° * 
NXPLOG_ITEM_TML
;

86 #ifde‡
NXP_HCI_REQ


87 c⁄° * 
NXPLOG_ITEM_HCPX
;

88 c⁄° * 
NXPLOG_ITEM_HCPR
;

92 #ifde‡
NXP_VRBS_REQ


93 
	#NXPLOG_FUNC_ENTRY
(
COMP
) \

94 
	`LOG_PRI
(
ANDROID_LOG_VERBOSE
,(
COMP
),"+:%s",(
__FUNCTION__
))

	)

95 
	#NXPLOG_FUNC_EXIT
(
COMP
) \

96 
	`LOG_PRI
(
ANDROID_LOG_VERBOSE
,(
COMP
),"-:%s",(
__FUNCTION__
))

	)

103 #i‡(
ENABLE_EXTNS_TRACES
 =
TRUE
 )

104 
	#NXPLOG_EXTNS_D
(...Ë{if(
gLog_Àvñ
.
exäs_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_EXTNS
,
__VA_ARGS__
);}

	)

105 
	#NXPLOG_EXTNS_W
(...Ë{if(
gLog_Àvñ
.
exäs_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_EXTNS
,
__VA_ARGS__
);}

	)

106 
	#NXPLOG_EXTNS_E
(...Ë{if(
gLog_Àvñ
.
exäs_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_EXTNS
,
__VA_ARGS__
);}

	)

108 
	#NXPLOG_EXTNS_D
(...)

	)

109 
	#NXPLOG_EXTNS_W
(...)

	)

110 
	#NXPLOG_EXTNS_E
(...)

	)

114 #i‡(
ENABLE_HAL_TRACES
 =
TRUE
 )

115 
	#NXPLOG_NCIHAL_D
(...Ë{if(
gLog_Àvñ
.
hÆ_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_NCIHAL
,
__VA_ARGS__
);}

	)

116 
	#NXPLOG_NCIHAL_W
(...Ë{if(
gLog_Àvñ
.
hÆ_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_NCIHAL
,
__VA_ARGS__
);}

	)

117 
	#NXPLOG_NCIHAL_E
(...Ë{if(
gLog_Àvñ
.
hÆ_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_NCIHAL
,
__VA_ARGS__
);}

	)

119 
	#NXPLOG_NCIHAL_D
(...)

	)

120 
	#NXPLOG_NCIHAL_W
(...)

	)

121 
	#NXPLOG_NCIHAL_E
(...)

	)

125 #i‡(
ENABLE_NCIX_TRACES
 =
TRUE
 )

126 
	#NXPLOG_NCIX_D
(...Ë{if(
gLog_Àvñ
.
ncix_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_NCIX
,
__VA_ARGS__
);}

	)

127 
	#NXPLOG_NCIX_W
(...Ë{if(
gLog_Àvñ
.
ncix_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_NCIX
,
__VA_ARGS__
);}

	)

128 
	#NXPLOG_NCIX_E
(...Ë{if(
gLog_Àvñ
.
ncix_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_NCIX
,
__VA_ARGS__
);}

	)

130 
	#NXPLOG_NCIX_D
(...)

	)

131 
	#NXPLOG_NCIX_W
(...)

	)

132 
	#NXPLOG_NCIX_E
(...)

	)

136 #i‡(
ENABLE_NCIR_TRACES
 =
TRUE
 )

137 
	#NXPLOG_NCIR_D
(...Ë{if(
gLog_Àvñ
.
ncú_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_NCIR
,
__VA_ARGS__
);}

	)

138 
	#NXPLOG_NCIR_W
(...Ë{if(
gLog_Àvñ
.
ncú_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_NCIR
,
__VA_ARGS__
);}

	)

139 
	#NXPLOG_NCIR_E
(...Ë{if(
gLog_Àvñ
.
ncú_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_NCIR
,
__VA_ARGS__
);}

	)

141 
	#NXPLOG_NCIR_D
(...)

	)

142 
	#NXPLOG_NCIR_W
(...)

	)

143 
	#NXPLOG_NCIR_E
(...)

	)

147 #i‡(
ENABLE_FWDNLD_TRACES
 =
TRUE
 )

148 
	#NXPLOG_FWDNLD_D
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

149 
	#NXPLOG_FWDNLD_W
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

150 
	#NXPLOG_FWDNLD_E
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

152 
	#NXPLOG_FWDNLD_D
(...)

	)

153 
	#NXPLOG_FWDNLD_W
(...)

	)

154 
	#NXPLOG_FWDNLD_E
(...)

	)

158 #i‡(
ENABLE_TML_TRACES
 =
TRUE
 )

159 
	#NXPLOG_TML_D
(...Ë{if(
gLog_Àvñ
.
tml_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_TML
,
__VA_ARGS__
);}

	)

160 
	#NXPLOG_TML_W
(...Ë{if(
gLog_Àvñ
.
tml_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_TML
,
__VA_ARGS__
);}

	)

161 
	#NXPLOG_TML_E
(...Ë{if(
gLog_Àvñ
.
tml_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_TML
,
__VA_ARGS__
);}

	)

163 
	#NXPLOG_TML_D
(...)

	)

164 
	#NXPLOG_TML_W
(...)

	)

165 
	#NXPLOG_TML_E
(...)

	)

168 #ifde‡
NXP_HCI_REQ


170 #i‡(
ENABLE_HCPX_TRACES
 =
TRUE
 )

171 
	#NXPLOG_HCPX_D
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

172 
	#NXPLOG_HCPX_W
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

173 
	#NXPLOG_HCPX_E
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

175 
	#NXPLOG_HCPX_D
(...)

	)

176 
	#NXPLOG_HCPX_W
(...)

	)

177 
	#NXPLOG_HCPX_E
(...)

	)

181 #i‡(
ENABLE_HCPR_TRACES
 =
TRUE
 )

182 
	#NXPLOG_HCPR_D
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_DEBUG_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_DEBUG
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

183 
	#NXPLOG_HCPR_W
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_WARN_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_WARN
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

184 
	#NXPLOG_HCPR_E
(...Ë{if(
gLog_Àvñ
.
d∆d_log_Àvñ
 >
NXPLOG_LOG_ERROR_LOGLEVEL
Ë
	`LOG_PRI
(
ANDROID_LOG_ERROR
,
NXPLOG_ITEM_FWDNLD
,
__VA_ARGS__
);}

	)

186 
	#NXPLOG_HCPR_D
(...)

	)

187 
	#NXPLOG_HCPR_W
(...)

	)

188 
	#NXPLOG_HCPR_E
(...)

	)

192 #ifde‡
NXP_VRBS_REQ


193 #i‡(
ENABLE_EXTNS_TRACES
 =
TRUE
 )

194 
	#NXPLOG_EXTNS_ENTRY
(Ë
	`NXPLOG_FUNC_ENTRY
(
NXPLOG_ITEM_EXTNS
)

	)

195 
	#NXPLOG_EXTNS_EXIT
(Ë
	`NXPLOG_FUNC_EXIT
(
NXPLOG_ITEM_EXTNS
)

	)

197 
	#NXPLOG_EXTNS_ENTRY
()

	)

198 
	#NXPLOG_EXTNS_EXIT
()

	)

201 #i‡(
ENABLE_HAL_TRACES
 =
TRUE
 )

202 
	#NXPLOG_NCIHAL_ENTRY
(Ë
	`NXPLOG_FUNC_ENTRY
(
NXPLOG_ITEM_NCIHAL
)

	)

203 
	#NXPLOG_NCIHAL_EXIT
(Ë
	`NXPLOG_FUNC_EXIT
(
NXPLOG_ITEM_NCIHAL
)

	)

205 
	#NXPLOG_NCIHAL_ENTRY
()

	)

206 
	#NXPLOG_NCIHAL_EXIT
()

	)

209 #i‡(
ENABLE_NCIX_TRACES
 =
TRUE
 )

210 
	#NXPLOG_NCIX_ENTRY
(Ë
	`NXPLOG_FUNC_ENTRY
(
NXPLOG_ITEM_NCIX
)

	)

211 
	#NXPLOG_NCIX_EXIT
(Ë
	`NXPLOG_FUNC_EXIT
(
NXPLOG_ITEM_NCIX
)

	)

213 
	#NXPLOG_NCIX_ENTRY
()

	)

214 
	#NXPLOG_NCIX_EXIT
()

	)

217 #i‡(
ENABLE_NCIR_TRACES
 =
TRUE
 )

218 
	#NXPLOG_NCIR_ENTRY
(Ë
	`NXPLOG_FUNC_ENTRY
(
NXPLOG_ITEM_NCIR
)

	)

219 
	#NXPLOG_NCIR_EXIT
(Ë
	`NXPLOG_FUNC_EXIT
(
NXPLOG_ITEM_NCIR
)

	)

221 
	#NXPLOG_NCIR_ENTRY
()

	)

222 
	#NXPLOG_NCIR_EXIT
()

	)

225 #ifde‡
NXP_HCI_REQ


227 #i‡(
ENABLE_HCPX_TRACES
 =
TRUE
 )

228 
	#NXPLOG_HCPX_ENTRY
(Ë
	`NXPLOG_FUNC_ENTRY
(
NXPLOG_ITEM_HCPX
)

	)

229 
	#NXPLOG_HCPX_EXIT
(Ë
	`NXPLOG_FUNC_EXIT
(
NXPLOG_ITEM_HCPX
)

	)

231 
	#NXPLOG_HCPX_ENTRY
()

	)

232 
	#NXPLOG_HCPX_EXIT
()

	)

235 #i‡(
ENABLE_HCPR_TRACES
 =
TRUE
 )

236 
	#NXPLOG_HCPR_ENTRY
(Ë
	`NXPLOG_FUNC_ENTRY
(
NXPLOG_ITEM_HCPR
)

	)

237 
	#NXPLOG_HCPR_EXIT
(Ë
	`NXPLOG_FUNC_EXIT
(
NXPLOG_ITEM_HCPR
)

	)

239 
	#NXPLOG_HCPR_ENTRY
()

	)

240 
	#NXPLOG_HCPR_EXIT
()

	)

246 
phNxpLog_InôülizeLogLevñ
();

	@nfc_nci.c

17 
	#LOG_TAG
 "NxpNfcNciHÆ"

	)

19 
	~<utûs/Log.h
>

20 
	~<î∫o.h
>

21 
	~<h¨dw¨e/h¨dw¨e.h
>

22 
	~<h¨dw¨e/nfc.h
>

23 
	~<phNxpNciHÆ_Ad≠èti⁄.h
>

38 
	$hÆ_›í
(c⁄° 
nfc_nci_devi˚
 *
p_dev
,

39 
nfc_°ack_ˇŒback_t
 
p_hÆ_cback
,

40 
nfc_°ack_d©a_ˇŒback_t
 *
p_hÆ_d©a_ˇŒback
)

42 
ªtvÆ
 = 0;

44 
≤547_dev_t
 *
dev
 = (≤547_dev_t*Ë
p_dev
;

45 
ªtvÆ
 = 
	`phNxpNciHÆ_›í
(
p_hÆ_cback
, 
p_hÆ_d©a_ˇŒback
);

47  
ªtvÆ
;

48 
	}
}

59 
	$hÆ_wrôe
(c⁄° 
nfc_nci_devi˚
 *
p_dev
, 
uöt16_t
 
d©a_Àn
,

60 c⁄° 
uöt8_t
 *
p_d©a
)

62 
ªtvÆ
 = 0;

63 
≤547_dev_t
* 
dev
 = (≤547_dev_t*Ë
p_dev
;

65 
ªtvÆ
 = 
	`phNxpNciHÆ_wrôe
(
d©a_Àn
, 
p_d©a
);

66  
ªtvÆ
;

67 
	}
}

79 
	$hÆ_c‹e_öôülized
(c⁄° 
nfc_nci_devi˚
 *
p_dev
,

80 
uöt8_t
* 
p_c‹e_öô_r•_∑øms
)

82 
ªtvÆ
 = 0;

83 
≤547_dev_t
* 
dev
 = (≤547_dev_t*Ë
p_dev
;

85 
ªtvÆ
 = 
	`phNxpNciHÆ_c‹e_öôülized
(
p_c‹e_öô_r•_∑øms
);

86  
ªtvÆ
;

87 
	}
}

98 
	$hÆ_¥e_discovî
(c⁄° 
nfc_nci_devi˚
 *
p_dev
)

100 
ªtvÆ
 = 0;

101 
≤547_dev_t
* 
dev
 = (≤547_dev_t*Ë
p_dev
;

103 
ªtvÆ
 = 
	`phNxpNciHÆ_¥e_discovî
();

104  
ªtvÆ
;

105 
	}
}

116 
	$hÆ_˛o£
(c⁄° 
nfc_nci_devi˚
 *
p_dev
)

118 
ªtvÆ
 = 0;

119 
≤547_dev_t
* 
dev
 = (≤547_dev_t*Ë
p_dev
;

121 
ªtvÆ
 = 
	`phNxpNciHÆ_˛o£
();

122  
ªtvÆ
;

123 
	}
}

134 
	$hÆ_c⁄åﬁ_gø¡ed
(c⁄° 
nfc_nci_devi˚
 *
p_dev
)

136 
ªtvÆ
 = 0;

137 
≤547_dev_t
* 
dev
 = (≤547_dev_t*Ë
p_dev
;

139 
ªtvÆ
 = 
	`phNxpNciHÆ_c⁄åﬁ_gø¡ed
();

140  
ªtvÆ
;

141 
	}
}

152 
	$hÆ_powî_cy˛e
(c⁄° 
nfc_nci_devi˚
 *
p_dev
)

154 
ªtvÆ
 = 0;

155 
≤547_dev_t
* 
dev
 = (≤547_dev_t*Ë
p_dev
;

157 
ªtvÆ
 = 
	`phNxpNciHÆ_powî_cy˛e
();

158  
ªtvÆ
;

159 
	}
}

174 
	$nfc_˛o£
(
hw_devi˚_t
 *
dev
)

176 
ªtvÆ
 = 0;

177 
	`‰ì
(
dev
);

178  
ªtvÆ
;

179 
	}
}

190 
	$nfc_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
, c⁄° * 
«me
,

191 
hw_devi˚_t
** 
devi˚
)

193 
	`ALOGD
("%s:É¡î;Çame=%s", 
__FUNCTION__
, 
«me
);

194 
ªtvÆ
 = 0;

196 i‡(
	`°rcmp
(
«me
, 
NFC_NCI_CONTROLLER
) == 0)

198 
≤547_dev_t
 *
dev
 = 
	`ˇŒoc
(1, (pn547_dev_t));

201 
dev
->
nci_devi˚
.
comm⁄
.
èg
 = 
HARDWARE_DEVICE_TAG
;

202 
dev
->
nci_devi˚
.
comm⁄
.
vîsi⁄
 = 0x00010000;

203 
dev
->
nci_devi˚
.
comm⁄
.
moduÀ
 = (
hw_moduÀ_t
*) module;

204 
dev
->
nci_devi˚
.
comm⁄
.
˛o£
 = 
nfc_˛o£
;

207 
dev
->
nci_devi˚
.
›í
 = 
hÆ_›í
;

208 
dev
->
nci_devi˚
.
wrôe
 = 
hÆ_wrôe
;

209 
dev
->
nci_devi˚
.
c‹e_öôülized
 = 
hÆ_c‹e_öôülized
;

210 
dev
->
nci_devi˚
.
¥e_discovî
 = 
hÆ_¥e_discovî
;

211 
dev
->
nci_devi˚
.
˛o£
 = 
hÆ_˛o£
;

212 
dev
->
nci_devi˚
.
c⁄åﬁ_gø¡ed
 = 
hÆ_c⁄åﬁ_gø¡ed
;

213 
dev
->
nci_devi˚
.
powî_cy˛e
 = 
hÆ_powî_cy˛e
;

215 *
devi˚
 = (
hw_devi˚_t
*Ë
dev
;

219 
ªtvÆ
 = -
EINVAL
;

222 
	`ALOGD
("%s:Éxô %d", 
__FUNCTION__
, 
ªtvÆ
);

223  
ªtvÆ
;

224 
	}
}

227 
hw_moduÀ_mëhods_t
 
	gnfc_moduÀ_mëhods
 =

229 .
›í
 = 
nfc_›í
,

233 
nfc_nci_moduÀ_t
 
	gHAL_MODULE_INFO_SYM
 =

235 .
comm⁄
 =

237 .
èg
 = 
HARDWARE_MODULE_TAG
,

238 .
	gmoduÀ_≠i_vîsi⁄
 = 0x0100,

239 .
	ghÆ_≠i_vîsi⁄
 = 0x00,

240 .
	gid
 = 
NFC_NCI_NXP_PN54X_HARDWARE_MODULE_ID
,

241 .
	g«me
 = "NXP PN54X NFC NCI HW HAL",

242 .
	gauth‹
 = "NXP Semiconductors",

243 .
	gmëhods
 = &
nfc_moduÀ_mëhods
,

	@self-test/phNxpNciHal_SelfTest.c

17 #ifde‡
NXP_HW_SELF_TEST


20 
	~<phNxpNciHÆ_SñfTe°.h
>

21 
	~<phNxpLog.h
>

22 
	~<±hªad.h
>

23 
	~<phOßlNfc_Timî.h
>

25 
	#HAL_WRITE_RSP_TIMEOUT
 (1000Ë

	)

26 
	#HAL_WRITE_MAX_RETRY
 (10)

	)

30 
	$uöt8_t
 (*
	t°_vÆid©‹_t
)(
	tnci_d©a_t
 *
	texp
, 
	tphTmlNfc_Tønß˘Info_t
 *
	ta˘
);

32 
phA¡í«_St_Re•_t
 
phA¡í«_ª•
;

34 
	snci_ã°_d©a


36 
nci_d©a_t
 
cmd
;

37 
nci_d©a_t
 
exp_r•
;

38 
nci_d©a_t
 
exp_¡f
;

39 
°_vÆid©‹_t
 
r•_vÆid©‹
;

40 
°_vÆid©‹_t
 
¡f_vÆid©‹
;

42 }
	tnci_ã°_d©a_t
;

46 
thªad_ru¬ög
 = 0;

47 
uöt32_t
 
timeoutTimîId
 = 0;

48 
hÆ_wrôe_timî_fúed
 = 0;

51 
phTmlNfc_C⁄ãxt_t
 *
gµhTmlNfc_C⁄ãxt
;

54 
phNxpNciHÆ_C⁄åﬁ_t
 
nx≤cihÆ_˘æ
;

57 
phLibNfc_sC⁄fig_t
 
gDrvCfg
;

59 
NFCSTATUS
 
gtxldo_°©us
 = 
NFCSTATUS_FAILED
;

60 
NFCSTATUS
 
gagc_vÆue_°©us
 = 
NFCSTATUS_FAILED
;

61 
NFCSTATUS
 
gagc_nf˛d_°©us
 = 
NFCSTATUS_FAILED
;

62 
NFCSTATUS
 
gagc_dif„ª¡ül_°©us
 = 
NFCSTATUS_FAILED
;

65 
uöt8_t
 
	`°_vÆid©‹_ã°EquÆs
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

66 
uöt8_t
 
	`°_vÆid©‹_nuŒ
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

67 
uöt8_t
 
	`°_vÆid©‹_ã°SWP1_v…g
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

68 
uöt8_t
 
	`°_vÆid©‹_ã°A¡í«_Txldo
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

69 
uöt8_t
 
	`°_vÆid©‹_ã°A¡í«_AgcVÆ
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

70 
uöt8_t
 
	`°_vÆid©‹_ã°A¡í«_AgcVÆ_FixedNfcLd
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

71 
uöt8_t
 
	`°_vÆid©‹_ã°A¡í«_AgcVÆ_Dif„ª¡ül
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

73 
NFCSTATUS
 
	`phNxpNciHÆ_gëPrbsCmd
 (
uöt8_t
 
ãch
,uöt8_à
bôøã
,uöt8_à*
¥bs_cmd
,uöt8_à
¥bs_cmd_Àn
);

76 
nci_ã°_d©a_t
 
swp2_ã°_d©a
[] = {

87 
°_vÆid©‹_ã°EquÆs
,

88 
°_vÆid©‹_nuŒ


101 
°_vÆid©‹_ã°EquÆs
,

102 
°_vÆid©‹_nuŒ


114 
°_vÆid©‹_ã°EquÆs
,

115 
°_vÆid©‹_nuŒ


127 
°_vÆid©‹_ã°EquÆs
,

128 
°_vÆid©‹_ã°EquÆs


131 
	}
};

134 
nci_ã°_d©a_t
 
	gswp1_ã°_d©a
[] = {

146 
°_vÆid©‹_ã°EquÆs
,

147 
°_vÆid©‹_nuŒ


160 
°_vÆid©‹_ã°EquÆs
,

161 
°_vÆid©‹_nuŒ


173 
°_vÆid©‹_ã°EquÆs
,

174 
°_vÆid©‹_nuŒ


186 
°_vÆid©‹_ã°EquÆs
,

187 
°_vÆid©‹_ã°SWP1_v…g


191 
nci_ã°_d©a_t
 
	g¥bs_ã°_d©a
[] = {

202 
°_vÆid©‹_ã°EquÆs
,

203 
°_vÆid©‹_nuŒ


216 
°_vÆid©‹_ã°EquÆs
,

217 
°_vÆid©‹_nuŒ


221 
nci_ã°_d©a_t
 
	grf_fõld_⁄_ã°_d©a
[] = {

232 
°_vÆid©‹_ã°EquÆs
,

233 
°_vÆid©‹_nuŒ


246 
°_vÆid©‹_ã°EquÆs
,

247 
°_vÆid©‹_nuŒ


259 
°_vÆid©‹_ã°EquÆs
,

260 
°_vÆid©‹_nuŒ


264 
nci_ã°_d©a_t
 
	grf_fõld_off_ã°_d©a
[] = {

275 
°_vÆid©‹_ã°EquÆs
,

276 
°_vÆid©‹_nuŒ


289 
°_vÆid©‹_ã°EquÆs
,

290 
°_vÆid©‹_nuŒ


302 
°_vÆid©‹_ã°EquÆs
,

303 
°_vÆid©‹_nuŒ


308 
nci_ã°_d©a_t
 
	gdow∆ﬂd_pö_ã°_d©a1
[] = {

319 
°_vÆid©‹_ã°EquÆs
,

320 
°_vÆid©‹_nuŒ


325 
nci_ã°_d©a_t
 
	gdow∆ﬂd_pö_ã°_d©a2
[] = {

336 
°_vÆid©‹_ã°EquÆs
,

337 
°_vÆid©‹_nuŒ


341 
nci_ã°_d©a_t
 
	g™ã¬a_£lf_ã°_d©a
[] = {

352 
°_vÆid©‹_ã°EquÆs
,

353 
°_vÆid©‹_nuŒ


366 
°_vÆid©‹_ã°EquÆs
,

367 
°_vÆid©‹_nuŒ


379 
°_vÆid©‹_ã°EquÆs
,

380 
°_vÆid©‹_nuŒ


392 
°_vÆid©‹_ã°A¡í«_Txldo
,

393 
°_vÆid©‹_nuŒ


405 
°_vÆid©‹_ã°A¡í«_AgcVÆ
,

406 
°_vÆid©‹_nuŒ


418 
°_vÆid©‹_ã°A¡í«_AgcVÆ_FixedNfcLd
,

419 
°_vÆid©‹_nuŒ


431 
°_vÆid©‹_ã°A¡í«_AgcVÆ_Dif„ª¡ül
,

432 
°_vÆid©‹_nuŒ


439 
uöt8_t
 
°_vÆid©‹_ã°EquÆs
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
);

440 
hÆ_wrôe_cb
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

441 
hÆ_wrôe_r•_timeout_cb
(
uöt32_t
 
TimîId
, *
pC⁄ãxt
);

442 
hÆ_ªad_cb
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
);

453 
uöt8_t
 
	$°_vÆid©‹_nuŒ
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

456 
	}
}

467 
uöt8_t
 
	$°_vÆid©‹_ã°SWP1_v…g
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

469 
uöt8_t
 
ªsu…
 = 0;

471 if(
NULL
 =
exp
 || NULL =
a˘
)

473  
ªsu…
;

476 if–(
a˘
->
wLígth
 == 0x05) &&

477 (
	`memcmp
(
exp
->
p_d©a
,
a˘
->
pBuff
,exp->
Àn
) == 0))

479 if(
a˘
->
pBuff
[4] == 0x01 ||áct->pBuff[4] == 0x02)

481 
ªsu…
 = 1;

485  
ªsu…
;

486 
	}
}

497 
uöt8_t
 
	$°_vÆid©‹_ã°A¡í«_Txldo
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

499 
uöt8_t
 
ªsu…
 = 0;

500 
uöt8_t
 
mesuªdønge
 =0;

501 
mósuªd_vÆ
 = 0;

502 
tﬁî™˚
 = 0;

504 if(
NULL
 =
exp
 || NULL =
a˘
)

506  
ªsu…
;

509 
	`NXPLOG_NCIHAL_D
("°_vÆid©‹_ã°A¡í«_Txldÿ0x%x", 
a˘
->
pBuff
[3]);

510 i‡(0x05 =
a˘
->
pBuff
[2])

512 i‡(
NFCSTATUS_SUCCESS
 =
a˘
->
pBuff
[3])

514 
ªsu…
 = 1;

515 
	`NXPLOG_NCIHAL_D
("A¡í«: TxLDO cuºíàmósuªdÑaw vÆuêö mA : 0x%x", 
a˘
->
pBuff
[4]);

516 if(0x00 =
a˘
->
pBuff
[5])

518 
	`NXPLOG_NCIHAL_D
("MeasuredÑange : 0x00 = 50 - 100 mA");

519 
mósuªd_vÆ
 = ((0.40 * 
a˘
->
pBuff
[4]) + 50);

520 
	`NXPLOG_NCIHAL_D
("TxLDO cuºíàabsﬁuã vÆuêö mA = %ld", 
mósuªd_vÆ
);

524 
	`NXPLOG_NCIHAL_D
("MeasuredÑange : 0x01 = 20 - 70 mA");

525 
mósuªd_vÆ
 = ((0.40 * 
a˘
->
pBuff
[4]) + 20);

526 
	`NXPLOG_NCIHAL_D
("TxLDO cuºíàabsﬁuã vÆuêö mA = %ld", 
mósuªd_vÆ
);

529 
tﬁî™˚
 = (
phA¡í«_ª•
.
wTxdoMósuªdR™geMax
 *

530 
phA¡í«_ª•
.
wTxdoMósuªdTﬁî™˚
)/100;

531 i‡((
mósuªd_vÆ
 <
phA¡í«_ª•
.
wTxdoMósuªdR™geMax
 + 
tﬁî™˚
))

533 
tﬁî™˚
 = (
phA¡í«_ª•
.
wTxdoMósuªdR™geMö
 *

534 
phA¡í«_ª•
.
wTxdoMósuªdTﬁî™˚
)/100;

535 if((
mósuªd_vÆ
 >
phA¡í«_ª•
.
wTxdoMósuªdR™geMö
 - 
tﬁî™˚
))

537 
gtxldo_°©us
 = 
NFCSTATUS_SUCCESS
;

538 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for TxLDO measurement PASS");

542 
gtxldo_°©us
 = 
NFCSTATUS_FAILED
;

543 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for TxLDO measurement FAIL");

548 
gtxldo_°©us
 = 
NFCSTATUS_FAILED
;

549 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for TxLDO measurement FAIL");

554 
gtxldo_°©us
 = 
NFCSTATUS_FAILED
;

555 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for TxLDO measurement failed: Invalid status");

561 
gtxldo_°©us
 = 
NFCSTATUS_FAILED
;

562 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for TxLDO measurement failed: InvalidÖayloadÜength");

565  
ªsu…
;

566 
	}
}

577 
uöt8_t
 
	$°_vÆid©‹_ã°A¡í«_AgcVÆ
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

579 
uöt8_t
 
ªsu…
 = 0;

580 
agc_tﬁî™˚
 = 0;

581 
agc_vÆ
 = 0;

583 if(
NULL
 =
exp
 || NULL =
a˘
)

585  
ªsu…
;

588 i‡(0x05 =
a˘
->
pBuff
[2])

590 i‡(
NFCSTATUS_SUCCESS
 =
a˘
->
pBuff
[3])

592 
ªsu…
 = 1;

593 
agc_tﬁî™˚
 = (
phA¡í«_ª•
.
wAgcVÆue
 *ÖhA¡í«_ª•.
wAgcVÆueTﬁî™˚
)/100;

594 
agc_vÆ
 = ((
a˘
->
pBuff
[5] << 8) | (act->pBuff[4]));

595 
	`NXPLOG_NCIHAL_D
("AGC vÆuê: %ld", 
agc_vÆ
);

596 if(((
phA¡í«_ª•
.
wAgcVÆue
 - 
agc_tﬁî™˚
Ë<
agc_vÆ
) &&

597 (
agc_vÆ
 <(
phA¡í«_ª•
.
wAgcVÆue
 + 
agc_tﬁî™˚
)))

599 
gagc_vÆue_°©us
 = 
NFCSTATUS_SUCCESS
;

600 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Values PASS");

604 
gagc_vÆue_°©us
 = 
NFCSTATUS_FAILED
;

605 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Values FAIL");

610 
gagc_vÆue_°©us
 = 
NFCSTATUS_FAILED
;

611 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Values FAIL");

617 
gagc_vÆue_°©us
 = 
NFCSTATUS_FAILED
;

618 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC value failed: InvalidÖayloadÜength");

621  
ªsu…
;

622 
	}
}

633 
uöt8_t
 
	$°_vÆid©‹_ã°A¡í«_AgcVÆ_FixedNfcLd
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

635 
uöt8_t
 
ªsu…
 = 0;

636 
agc_nf˛d_tﬁî™˚
 = 0;

637 
agc_nf˛d
 = 0;

639 if(
NULL
 =
exp
 || NULL =
a˘
)

641  
ªsu…
;

644 if(0x05 =
a˘
->
pBuff
[2])

646 if(
NFCSTATUS_SUCCESS
 =
a˘
->
pBuff
[3])

648 
ªsu…
 = 1;

649 
agc_nf˛d_tﬁî™˚
 = (
phA¡í«_ª•
.
wAgcVÆuewôhfixedNFCLD
 *

650 
phA¡í«_ª•
.
wAgcVÆuewôhfixedNFCLDTﬁî™˚
)/100;

651 
agc_nf˛d
 = ((
a˘
->
pBuff
[5] << 8) | (act->pBuff[4]));

652 
	`NXPLOG_NCIHAL_D
("AGC vÆuêwôh Fixed Nf˛d : %ld", 
agc_nf˛d
);

654 if(((
phA¡í«_ª•
.
wAgcVÆuewôhfixedNFCLD
 - 
agc_nf˛d_tﬁî™˚
Ë<
agc_nf˛d
) &&

655 (
agc_nf˛d
 <(
phA¡í«_ª•
.
wAgcVÆuewôhfixedNFCLD
 + 
agc_nf˛d_tﬁî™˚
)))

657 
gagc_nf˛d_°©us
 = 
NFCSTATUS_SUCCESS
;

658 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC value with fixed NFCLD PASS");

662 
gagc_nf˛d_°©us
 = 
NFCSTATUS_FAILED
;

663 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC value with fixed NFCLD FAIL");

668 
gagc_nf˛d_°©us
 = 
NFCSTATUS_FAILED
;

669 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC value with fixed NFCLD failed: Invalid status");

675 
gagc_nf˛d_°©us
 = 
NFCSTATUS_FAILED
;

676 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC value with fixed NFCLD failed: InvalidÖayloadÜength");

679  
ªsu…
;

680 
	}
}

691 
uöt8_t
 
	$°_vÆid©‹_ã°A¡í«_AgcVÆ_Dif„ª¡ül
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

693 
uöt8_t
 
ªsu…
 = 0;

694 
agc_tﬁî™˚›√1
 = 0;

695 
agc_tﬁî™˚›√2
 = 0;

696 
agc_dif„ª¡ülO≤e1
 = 0;

697 
agc_dif„ª¡ülO≤e2
 = 0;

699 if(
NULL
 =
exp
 || NULL =
a˘
)

701  
ªsu…
;

704 i‡(0x05 =
a˘
->
pBuff
[2])

706 i‡(
NFCSTATUS_SUCCESS
 =
a˘
->
pBuff
[3])

708 
ªsu…
 = 1;

709 
agc_tﬁî™˚›√1
=(
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥n1
 *

710 
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥nTﬁî™˚1
)/100;

711 
agc_tﬁî™˚›√2
=(
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥n2
 *

712 
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥nTﬁî™˚2
)/100;

713 
agc_dif„ª¡ülO≤e1
 = ((
a˘
->
pBuff
[5] << 8) | (act->pBuff[4]));

714 
agc_dif„ª¡ülO≤e2
 = ((
a˘
->
pBuff
[7] << 8) | (act->pBuff[6]));

715 
	`NXPLOG_NCIHAL_D
("AGC vÆuêdif„ª¡ü»O≤ê1 : %ld", 
agc_dif„ª¡ülO≤e1
);

716 
	`NXPLOG_NCIHAL_D
("AGC vÆuêdif„ª¡ülO≤ê 2 : %ld", 
agc_dif„ª¡ülO≤e2
);

718 if(((
agc_dif„ª¡ülO≤e1
 >
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥n1
 - 
agc_tﬁî™˚›√1
) &&

719 (
agc_dif„ª¡ülO≤e1
 <
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥n1
 + 
agc_tﬁî™˚›√1
)) &&

720 ((
agc_dif„ª¡ülO≤e2
 >
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥n2
 - 
agc_tﬁî™˚›√2
) &&

721 (
agc_dif„ª¡ülO≤e2
 <
phA¡í«_ª•
.
wAgcDif„ª¡ülWôhO≥n2
 + 
agc_tﬁî™˚›√2
)))

723 
gagc_dif„ª¡ül_°©us
 = 
NFCSTATUS_SUCCESS
;

724 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Differential Open PASS");

728 
gagc_dif„ª¡ül_°©us
 = 
NFCSTATUS_FAILED
;

729 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Differential Open FAIL");

734 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Differential failed: Invalid status");

735 
gagc_dif„ª¡ül_°©us
 = 
NFCSTATUS_FAILED
;

741 
	`NXPLOG_NCIHAL_E
("Test Antenna Response for AGC Differential failed: InvalidÖayloadÜength");

742 
gagc_dif„ª¡ül_°©us
 = 
NFCSTATUS_FAILED
;

745  
ªsu…
;

746 
	}
}

757 
uöt8_t
 
	$°_vÆid©‹_ã°EquÆs
(
nci_d©a_t
 *
exp
, 
phTmlNfc_Tønß˘Info_t
 *
a˘
)

759 
uöt8_t
 
ªsu…
 = 0;

761 if(
NULL
 =
exp
 || NULL =
a˘
)

763  
ªsu…
;

765 if(
exp
->
Àn
 <
a˘
->
wLígth
 &&

766 (
	`memcmp
(
exp
->
p_d©a
,
a˘
->
pBuff
,exp->
Àn
) == 0))

768 
ªsu…
 = 1;

771  
ªsu…
;

772 
	}
}

783 
	$hÆ_wrôe_r•_timeout_cb
(
uöt32_t
 
timîId
, *
pC⁄ãxt
)

785 
	`NXPLOG_NCIHAL_E
("hal_write_rsp_timeout_cb - writeÅimeout!!!");

786 
hÆ_wrôe_timî_fúed
 = 1;

787 
	`hÆ_ªad_cb
(
pC⁄ãxt
,
NULL
);

788 
	}
}

799 
	$hÆ_wrôe_cb
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

801 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

803 i‡(
pInfo
->
wSètus
 =
NFCSTATUS_SUCCESS
)

805 
	`NXPLOG_NCIHAL_D
("wrôêsuc˚ssfu»°©u†0x%x", 
pInfo
->
wSètus
);

809 
	`NXPLOG_NCIHAL_E
("wrôêîr‹ sètu†0x%x", 
pInfo
->
wSètus
);

812 
p_cb_d©a
->
°©us
 = 
pInfo
->
wSètus
;

813 
	`SEM_POST
(
p_cb_d©a
);

816 
	}
}

827 
	$hÆ_ªad_cb
(*
pC⁄ãxt
, 
phTmlNfc_Tønß˘Info_t
 *
pInfo
)

829 
phNxpNciHÆ_Sem_t
 *
p_cb_d©a
 = (phNxpNciHÆ_Sem_t*Ë
pC⁄ãxt
;

831 if(
hÆ_wrôe_timî_fúed
 == 1)

833 
	`NXPLOG_NCIHAL_D
("hal_read_cb -ÑesponseÅimeout occurred");

835 
hÆ_wrôe_timî_fúed
 = 0;

836 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_RESPONSE_TIMEOUT
;

840 
NFCSTATUS
 
°©us
 = 
	`phOßlNfc_Timî_St›
(
timeoutTimîId
);

842 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

844 
	`NXPLOG_NCIHAL_D
("ResponseÅimer stopped");

848 
	`NXPLOG_NCIHAL_E
("ResponseÅimer stop ERROR!!!");

849 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_FAILED
;

852 i‡(
pInfo
->
wSètus
 =
NFCSTATUS_SUCCESS
)

854 
	`NXPLOG_NCIHAL_D
("hÆ_ªad_cb suc˚ssfu»°©u†0x%x", 
pInfo
->
wSètus
);

855 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_SUCCESS
;

859 
	`NXPLOG_NCIHAL_E
("hÆ_ªad_cbÉº‹ sètu†0x%x", 
pInfo
->
wSètus
);

860 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_FAILED
;

863 
p_cb_d©a
->
°©us
 = 
pInfo
->
wSètus
;

865 
nci_ã°_d©a_t
 *
ã°_d©a
 = (nci_ã°_d©a_t*Ë
p_cb_d©a
->
pC⁄ãxt
;

867 if(
ã°_d©a
->
exp_r•
.
Àn
 == 0)

870 if–
ã°_d©a
->
	`¡f_vÆid©‹
(&—e°_d©a->
exp_¡f
),
pInfo
) == 1 )

872 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_SUCCESS
;

876 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_FAILED
;

882 if–
ã°_d©a
->
	`r•_vÆid©‹
(&—e°_d©a->
exp_r•
),
pInfo
) == 1)

884 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_SUCCESS
;

888 
p_cb_d©a
->
°©us
 = 
NFCSTATUS_FAILED
;

890 
ã°_d©a
->
exp_r•
.
Àn
 = 0;

893 
	`SEM_POST
(
p_cb_d©a
);

896 
	}
}

907 *
	$phNxpNciHÆ_ã°_rx_thªad
(*
¨g
)

909 
phLibNfc_Mesßge_t
 
msg
;

911 
	`NXPLOG_NCIHAL_D
("SelfÅestÅhread started");

913 
thªad_ru¬ög
 = 1;

915 
thªad_ru¬ög
 == 1)

918 i‡(
	`phDÆ4Nfc_msgrcv
(
gDrvCfg
.
nClõ¡Id
,

919 &
msg
, 0, 0) == -1)

921 
	`NXPLOG_NCIHAL_E
("Received bad message");

925 if(
thªad_ru¬ög
 == 0)

930 
msg
.
eMsgTy≥
)

932 
PH_LIBNFC_DEFERREDCALL_MSG
:

934 
phLibNfc_De„ºedCÆl_t
 *
de„rCÆl
 =

935 (
phLibNfc_De„ºedCÆl_t
 *Ë(
msg
.
pMsgD©a
);

937 
	`REENTRANCE_LOCK
();

938 
de„rCÆl
->
	`pCÆlback
(de„rCÆl->
pP¨amëî
);

939 
	`REENTRANCE_UNLOCK
();

946 
	`NXPLOG_NCIHAL_D
("SelfÅestÅhread stopped");

948  
NULL
;

949 
	}
}

962 
NFCSTATUS
 
	$phNxpNciHÆ_ªadLocked
(
nci_ã°_d©a_t
 *
pD©a
 )

964 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

965 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

966 
uöt16_t
 
ªad_Àn
 = 16;

968 
uöt32_t
 
rx_d©a
[
NCI_MAX_DATA_LEN
];

971 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
pD©a
Ë!
NFCSTATUS_SUCCESS
)

973 
	`NXPLOG_NCIHAL_D
("phTmlNfc_Read Create cb data failed");

974 
°©us
 = 
NFCSTATUS_FAILED
;

975 
˛ón_™d_ªtu∫
;

979 
°©us
 = 
	`phTmlNfc_Ród
(

980 (
uöt8_t
 *Ë
rx_d©a
,

981 (
uöt16_t
Ë
ªad_Àn
,

982 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
hÆ_ªad_cb
,

983 &
cb_d©a
);

985 i‡(
°©us
 !
NFCSTATUS_PENDING
)

987 
	`NXPLOG_NCIHAL_E
("TML Ród sètu†îr‹ sètu†%x", 
°©us
);

988 
°©us
 = 
NFCSTATUS_FAILED
;

989 
˛ón_™d_ªtu∫
;

992 
°©us
 = 
	`phOßlNfc_Timî_Sèπ
(
timeoutTimîId
,

993 
HAL_WRITE_RSP_TIMEOUT
,

994 &
hÆ_wrôe_r•_timeout_cb
,

995 &
cb_d©a
);

997 i‡(
NFCSTATUS_SUCCESS
 =
°©us
)

999 
	`NXPLOG_NCIHAL_D
("ResponseÅimer started");

1003 
	`NXPLOG_NCIHAL_E
("ResponseÅimerÇot started");

1004 
°©us
 = 
NFCSTATUS_FAILED
;

1005 
˛ón_™d_ªtu∫
;

1009 i‡(
	`SEM_WAIT
(
cb_d©a
))

1011 
	`NXPLOG_NCIHAL_E
("phTmlNfc_Read semaphoreÉrror");

1012 
°©us
 = 
NFCSTATUS_FAILED
;

1013 
˛ón_™d_ªtu∫
;

1016 if(
cb_d©a
.
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
)

1018 
	`NXPLOG_NCIHAL_E
("ResponseÅimeout!!!");

1019 
°©us
 = 
NFCSTATUS_RESPONSE_TIMEOUT
;

1020 
˛ón_™d_ªtu∫
;

1024 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
)

1026 
	`NXPLOG_NCIHAL_E
("phTmlNfc_Read failed ");

1027 
°©us
 = 
NFCSTATUS_FAILED
;

1028 
˛ón_™d_ªtu∫
;

1031 
˛ón_™d_ªtu∫
:

1032 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1034  
°©us
;

1035 
	}
}

1048 
NFCSTATUS
 
	$phNxpNciHÆ_wrôeLocked
(
nci_ã°_d©a_t
 *
pD©a
 )

1050 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1052 
phNxpNciHÆ_Sem_t
 
cb_d©a
;

1053 
ªåyC¡
 = 0;

1056 i‡(
	`phNxpNciHÆ_öô_cb_d©a
(&
cb_d©a
, 
NULL
Ë!
NFCSTATUS_SUCCESS
)

1058 
	`NXPLOG_NCIHAL_D
("phTmlNfc_Write Create cb data failed");

1059 
˛ón_™d_ªtu∫
;

1062 
ªåy
:

1063 
°©us
 = 
	`phTmlNfc_Wrôe
(
pD©a
->
cmd
.
p_d©a
,ÖD©a->cmd.
Àn
,

1064 (
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë&
hÆ_wrôe_cb
, &
cb_d©a
);

1066 i‡(
°©us
 !
NFCSTATUS_PENDING
)

1068 
	`NXPLOG_NCIHAL_E
("phTmlNfc_Write statusÉrror");

1069 
˛ón_™d_ªtu∫
;

1073 i‡(
	`SEM_WAIT
(
cb_d©a
))

1075 
	`NXPLOG_NCIHAL_E
("write_unlocked semaphoreÉrror");

1076 
°©us
 = 
NFCSTATUS_FAILED
;

1077 
˛ón_™d_ªtu∫
;

1080 i‡(
cb_d©a
.
°©us
 !
NFCSTATUS_SUCCESS
 && 
ªåyC¡
 < 
HAL_WRITE_MAX_RETRY
)

1082 
ªåyC¡
++;

1083 
	`NXPLOG_NCIHAL_E
("wrôe_u∆ocked faûed - PN547 Maybêö Sèndby Modê- Rëry %d",
ªåyC¡
);

1084 
ªåy
;

1087 
°©us
 = 
cb_d©a
.status;

1089 
˛ón_™d_ªtu∫
:

1090 
	`phNxpNciHÆ_˛ónup_cb_d©a
(&
cb_d©a
);

1092  
°©us
;

1093 
	}
}

1105 
NFCSTATUS
 
	$phNxpNciHÆ_≥rf‹mTe°
(
nci_ã°_d©a_t
 *
pD©a
 )

1107 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1109 if(
NULL
 =
pD©a
)

1111  
NFCSTATUS_FAILED
;

1114 
	`CONCURRENCY_LOCK
();

1116 
°©us
 = 
	`phNxpNciHÆ_wrôeLocked
(
pD©a
);

1118 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
)

1120 
˛ón_™d_ªtu∫
;

1122 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1124 
˛ón_™d_ªtu∫
;

1127 
°©us
 = 
	`phNxpNciHÆ_ªadLocked
(
pD©a
);

1129 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1131 
˛ón_™d_ªtu∫
;

1134 if(0 !
pD©a
->
exp_¡f
.
Àn
)

1136 
°©us
 = 
	`phNxpNciHÆ_ªadLocked
(
pD©a
);

1138 if(
°©us
 !
NFCSTATUS_SUCCESS
)

1140 
˛ón_™d_ªtu∫
;

1144 
˛ón_™d_ªtu∫
:

1145 
	`CONCURRENCY_UNLOCK
();

1146  
°©us
;

1147 
	}
}

1159 
NFCSTATUS
 
	$phNxpNciHÆ_Te°Mode_›í
 ()

1162 
±hªad_t
 
ã°_rx_thªad
;

1164 
phOßlNfc_C⁄fig_t
 
tOßlC⁄fig
;

1165 
phTmlNfc_C⁄fig_t
 
tTmlC⁄fig
;

1166 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1167 
uöt16_t
 
ªad_Àn
 = 255;

1170 
	`phNxpLog_InôülizeLogLevñ
();

1172 i‡(
	`phNxpNciHÆ_öô_m⁄ô‹
(Ë=
NULL
)

1174 
	`NXPLOG_NCIHAL_E
("Init monitor failed");

1175  
NFCSTATUS_FAILED
;

1178 
	`CONCURRENCY_LOCK
();

1180 
	`mem£t
(&
tOßlC⁄fig
, 0x00, (tOsalConfig));

1181 
	`mem£t
(&
tTmlC⁄fig
, 0x00, (tTmlConfig));

1183 
gDrvCfg
.
nClõ¡Id
 = 
	`phDÆ4Nfc_msggë
(0, 0600);

1184 
gDrvCfg
.
nLökTy≥
 = 
ENUM_LINK_TYPE_I2C
;

1185 
tTmlC⁄fig
.
pDevName
 = (
öt8_t
 *) "/dev/pn544";

1186 
tOßlC⁄fig
.
dwCÆlbackThªadId
 =(
uöçå_t
Ë
gDrvCfg
.
nClõ¡Id
;

1187 
tOßlC⁄fig
.
pLogFûe
 = 
NULL
;

1188 
tTmlC⁄fig
.
dwGëMsgThªadId
 =(
uöçå_t
Ë
gDrvCfg
.
nClõ¡Id
;

1189 
nx≤cihÆ_˘æ
.
gDrvCfg
.
nClõ¡Id
 =(
uöçå_t
) gDrvCfg.nClientId;

1192 
°©us
 = 
	`phTmlNfc_Inô
(&
tTmlC⁄fig
);

1193 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1195 
	`NXPLOG_NCIHAL_E
("phTmlNfc_Init Failed");

1196 
˛ón_™d_ªtu∫
;

1199 i‡(
	`±hªad_¸óã
(&
ã°_rx_thªad
, 
NULL
,

1200 
phNxpNciHÆ_ã°_rx_thªad
, 
NULL
) != 0)

1202 
	`NXPLOG_NCIHAL_E
("pthread_create failed");

1203 
	`phTmlNfc_Shutdown
();

1204 
˛ón_™d_ªtu∫
;

1207 
timeoutTimîId
 = 
	`phOßlNfc_Timî_Cª©e
();

1209 if(
timeoutTimîId
 == 0xFFFF)

1211 
	`NXPLOG_NCIHAL_E
("phOsalNfc_Timer_Create failed");

1215 
	`NXPLOG_NCIHAL_D
("phOsalNfc_Timer_Create SUCCESS");

1217 
	`CONCURRENCY_UNLOCK
();

1219  
NFCSTATUS_SUCCESS
;

1221 
˛ón_™d_ªtu∫
:

1222 
	`CONCURRENCY_UNLOCK
();

1223 
	`phNxpNciHÆ_˛ónup_m⁄ô‹
();

1224  
NFCSTATUS_FAILED
;

1225 
	}
}

1238 
	$phNxpNciHÆ_Te°Mode_˛o£
 ()

1241 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1243 
	`CONCURRENCY_LOCK
();

1245 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
)

1248 
°©us
 = 
	`phTmlNfc_RódAb‹t
();

1249 
°©us
 = 
	`phTmlNfc_WrôeAb‹t
();

1251 
	`phOßlNfc_Timî_CÀ™up
();

1253 
°©us
 = 
	`phTmlNfc_Shutdown
();

1255 
	`NXPLOG_NCIHAL_D
("phNxpNciHÆ_˛o£Ñëu∫ sètu†%d", 
°©us
);

1257 
thªad_ru¬ög
 = 0;

1259 
	`phDÆ4Nfc_msgªÀa£
(
gDrvCfg
.
nClõ¡Id
);

1261 
°©us
 = 
	`phOßlNfc_Timî_Dñëe
(
timeoutTimîId
);

1264 
	`CONCURRENCY_UNLOCK
();

1266 
	`phNxpNciHÆ_˛ónup_m⁄ô‹
();

1270 
	}
}

1283 
NFCSTATUS
 
	$phNxpNciHÆ_SwpTe°
(
uöt8_t
 
swp_löe
)

1285 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1286 
Àn
 = 0;

1287 
˙t
 = 0;

1289 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_SwpTest - start\n");

1291 if(
swp_löe
 == 0x01)

1293 
Àn
 = ((
swp1_ã°_d©a
)/(swp1_test_data[0]));

1295 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1297 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
swp1_ã°_d©a
[
˙t
]));

1298 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 ||

1299 
°©us
 =
NFCSTATUS_FAILED


1306 if(
swp_löe
 == 0x02)

1308 
Àn
 = ((
swp2_ã°_d©a
)/(swp2_test_data[0]));

1310 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1312 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
swp2_ã°_d©a
[
˙t
]));

1313 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 ||

1314 
°©us
 =
NFCSTATUS_FAILED


1322 if–
°©us
 =
NFCSTATUS_SUCCESS
)

1324 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_SwpTest - SUCCESSS\n");

1328 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_SwpTest - FAILED\n");

1331 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_SwpTest -Énd\n");

1333  
°©us
;

1334 
	}
}

1349 
NFCSTATUS
 
	$phNxpNciHÆ_PrbsTe°Sèπ
 (
phNxpNfc_Tech_t
 
ãch
, 
phNxpNfc_Bôøã_t
 
bôøã
)

1351 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1353 
nci_ã°_d©a_t
 
¥bs_cmd_d©a
;

1354 
uöt8_t
 
r•_cmd_öfo
[] = {0x4F, 0x30, 0x01, 0x00};

1356 
¥bs_cmd_d©a
.
cmd
.
Àn
 = 0x07;

1357 
	`mem˝y
(
¥bs_cmd_d©a
.
exp_r•
.
p_d©a
, &
r•_cmd_öfo
[0], (rsp_cmd_info));

1358 
¥bs_cmd_d©a
.
exp_r•
.
Àn
 = (
r•_cmd_öfo
);

1361 
¥bs_cmd_d©a
.
exp_¡f
.
Àn
 = 0x00;

1362 
¥bs_cmd_d©a
.
r•_vÆid©‹
 = 
°_vÆid©‹_ã°EquÆs
;

1363 
¥bs_cmd_d©a
.
¡f_vÆid©‹
 = 
°_vÆid©‹_nuŒ
;

1365 
uöt8_t
 
Àn
 = 0;

1366 
uöt8_t
 
˙t
 = 0;

1370 
°©us
 = 
	`phNxpNciHÆ_gëPrbsCmd
(
ãch
,
bôøã
,
¥bs_cmd_d©a
.
cmd
.
p_d©a
,¥bs_cmd_d©a.cmd.
Àn
);

1372 if–
°©us
 =
NFCSTATUS_FAILED
)

1375 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStart - INVALID_PARAM\n");

1377 
˛ón_™d_ªtu∫
;

1380 
Àn
 = ((
¥bs_ã°_d©a
)/(prbs_test_data[0]));

1382 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1384 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
¥bs_ã°_d©a
[
˙t
]));

1385 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 ||

1386 
°©us
 =
NFCSTATUS_FAILED


1394 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&
¥bs_cmd_d©a
);

1395 
˛ón_™d_ªtu∫
:

1397 if–
°©us
 =
NFCSTATUS_SUCCESS
)

1399 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStart - SUCCESSS\n");

1403 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStart - FAILED\n");

1406 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStart -Énd\n");

1408  
°©us
;

1409 
	}
}

1423 
NFCSTATUS
 
	$phNxpNciHÆ_PrbsTe°St›
 ()

1425 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStop - Start\n");

1427 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1429 
°©us
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀN‹mÆMode
);

1431 if(
NFCSTATUS_SUCCESS
 =
°©us
)

1433 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStop - SUCCESS\n");

1437 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStop - FAILED\n");

1440 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_PrbsTestStop -Énd\n");

1442  
°©us
;

1443 
	}
}

1455 
NFCSTATUS
 
	$phNxpNciHÆ_gëPrbsCmd
 (
uöt8_t
 
ãch
, uöt8_à
bôøã
, uöt8_à*
¥bs_cmd
, uöt8_à
¥bs_cmd_Àn
)

1457 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1459 if(
NULL
 =
¥bs_cmd
 ||

1460 
¥bs_cmd_Àn
 != 0x07)

1462  
°©us
;

1465 
¥bs_cmd
[0] = 0x2F;

1466 
¥bs_cmd
[1] = 0x30;

1467 
¥bs_cmd
[2] = 0x04;

1469 
¥bs_cmd
[3] = 0xFF;

1471 
¥bs_cmd
[4] = 0xFF;

1472 
¥bs_cmd
[5] = 0x01;

1473 
¥bs_cmd
[6] = 0xFF;

1475 
ãch
) {

1476 
NFC_RF_TECHNOLOGY_A
:

1477 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_RF_TECHNOLOGY_A");

1478 
¥bs_cmd
[3] = 0x00;

1480 
NFC_RF_TECHNOLOGY_B
:

1481 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_RF_TECHNOLOGY_B");

1482 
¥bs_cmd
[3] = 0x01;

1484 
NFC_RF_TECHNOLOGY_F
:

1485 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_RF_TECHNOLOGY_F");

1486 
¥bs_cmd
[3] = 0x02;

1492 
bôøã
)

1494 
NFC_BIT_RATE_106
:

1495 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_BIT_RATE_106");

1496 if(
¥bs_cmd
[3] != 0x02)

1498 
¥bs_cmd
[4] = 0x00;

1501 
NFC_BIT_RATE_212
:

1502 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_BIT_RATE_212");

1503 
¥bs_cmd
[4] = 0x01;

1505 
NFC_BIT_RATE_424
:

1506 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_BIT_RATE_424");

1507 
¥bs_cmd
[4] = 0x02;

1509 
NFC_BIT_RATE_848
:

1510 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_getPrbsCmd - NFC_BIT_RATE_848");

1511 if(
¥bs_cmd
[3] != 0x02)

1513 
¥bs_cmd
[4] = 0x03;

1520 if(
¥bs_cmd
[3] == 0xFF ||Örbs_cmd[4] == 0xFF)

1523 
°©us
 = 
NFCSTATUS_FAILED
;

1526  
°©us
;

1527 
	}
}

1538 
NFCSTATUS
 
	$phNxpNciHÆ_RfFõldTe°
 (
uöt8_t
 
⁄
)

1540 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_SUCCESS
;

1541 
Àn
 = 0;

1542 
˙t
 = 0;

1544 
	`NXPLOG_NCIHAL_D
("phNxpNciHÆ_RfFõldTe° - sèπ %x\n",
⁄
);

1546 if(
⁄
 == 0x01)

1548 
Àn
 = ((
rf_fõld_⁄_ã°_d©a
)/(rf_field_on_test_data[0]));

1550 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1552 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
rf_fõld_⁄_ã°_d©a
[
˙t
]));

1553 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 || sètu†=
NFCSTATUS_FAILED
)

1559 if(
⁄
 == 0x00)

1561 
Àn
 = ((
rf_fõld_off_ã°_d©a
)/(rf_field_off_test_data[0]));

1563 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1565 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
rf_fõld_off_ã°_d©a
[
˙t
]));

1566 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 || sètu†=
NFCSTATUS_FAILED
)

1573 if–
°©us
 =
NFCSTATUS_SUCCESS
)

1575 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_RfFieldTest - SUCCESSS\n");

1579 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_RfFieldTest - FAILED\n");

1582 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_RfFieldTest -Énd\n");

1584  
°©us
;

1585 
	}
}

1596 
NFCSTATUS
 
	$phNxpNciHÆ_A¡í«Te°
 ()

1598 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1600  
°©us
;

1601 
	}
}

1612 
NFCSTATUS
 
	$phNxpNciHÆ_Dow∆ﬂdPöTe°
()

1614 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1615 
Àn
 = 0;

1616 
˙t
 = 0;

1618 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_DownloadPinTest - start\n");

1620 
Àn
 = ((
dow∆ﬂd_pö_ã°_d©a1
)/(download_pin_test_data1[0]));

1622 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1624 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
dow∆ﬂd_pö_ã°_d©a1
[
˙t
]));

1625 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 || sètu†=
NFCSTATUS_FAILED
)

1631 i‡(
°©us
 !
NFCSTATUS_SUCCESS
)

1633 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_DownloadPinTest - FAILED\n");

1634  
°©us
;

1637 
°©us
 = 
NFCSTATUS_FAILED
;

1638 
°©us
 = 
	`phTmlNfc_IoCé
(
phTmlNfc_e_E«bÀDow∆ﬂdMode
);

1639 i‡(
NFCSTATUS_SUCCESS
 !
°©us
)

1641 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_DownloadPinTest - FAILED\n");

1642  
°©us
;

1645 
°©us
 = 
NFCSTATUS_FAILED
;

1646 
Àn
 = ((
dow∆ﬂd_pö_ã°_d©a2
)/(download_pin_test_data2[0]));

1648 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1650 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
dow∆ﬂd_pö_ã°_d©a2
[
˙t
]));

1651 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 || sètu†=
NFCSTATUS_FAILED
)

1657 if–
°©us
 =
NFCSTATUS_SUCCESS
)

1659 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_DownloadPinTest - SUCCESSS\n");

1663 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_DownloadPinTest - FAILED\n");

1666 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_DownloadPinTest -Énd\n");

1668  
°©us
;

1669 
	}
}

1680 
NFCSTATUS
 
	$phNxpNciHÆ_A¡í«SñfTe°
(
phA¡í«_St_Re•_t
 * 
phA¡í«_St_Re•
 )

1682 
NFCSTATUS
 
°©us
 = 
NFCSTATUS_FAILED
;

1683 
NFCSTATUS
 
™ã¬a_°_°©us
 = 
NFCSTATUS_FAILED
;

1684 
Àn
 = 0;

1685 
˙t
 = 0;

1687 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_AntennaSelfTest - start\n");

1688 
	`mem˝y
(&
phA¡í«_ª•
, 
phA¡í«_St_Re•
, (
phA¡í«_St_Re•_t
));

1689 
Àn
 = ((
™ã¬a_£lf_ã°_d©a
)/(antenna_self_test_data[0]));

1691 
˙t
 = 0; c¡ < 
Àn
; cnt++)

1693 
°©us
 = 
	`phNxpNciHÆ_≥rf‹mTe°
(&(
™ã¬a_£lf_ã°_d©a
[
˙t
]));

1694 if(
°©us
 =
NFCSTATUS_RESPONSE_TIMEOUT
 || sètu†=
NFCSTATUS_FAILED
)

1696 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_AntennaSelfTest: commnadÉxecution - FAILED\n");

1701 if(
°©us
 =
NFCSTATUS_SUCCESS
)

1703 if((
gtxldo_°©us
 =
NFCSTATUS_SUCCESS
Ë&& (
gagc_vÆue_°©us
 == NFCSTATUS_SUCCESS) &&

1704 (
gagc_nf˛d_°©us
 =
NFCSTATUS_SUCCESS
Ë&& (
gagc_dif„ª¡ül_°©us
 == NFCSTATUS_SUCCESS))

1706 
™ã¬a_°_°©us
 = 
NFCSTATUS_SUCCESS
;

1707 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_AntennaSelfTest - SUCESS\n");

1711 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_AntennaSelfTest - FAILED\n");

1716 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_AntennaSelfTest - FAILED\n");

1719 
	`NXPLOG_NCIHAL_D
("phNxpNciHal_AntennaSelfTest -Énd\n");

1721  
™ã¬a_°_°©us
;

1722 
	}
}

	@tml/phDal4Nfc_messageQueueLib.c

21 
	~<±hªad.h
>

22 
	~<phNxpLog.h
>

23 
	~<löux/ùc.h
>

24 
	~<£m≠h‹e.h
>

25 
	~<î∫o.h
>

26 
	~<phDÆ4Nfc_mesßgeQueueLib.h
>

29 
	sphDÆ4Nfc_mesßge_queue_ôem


31 
phLibNfc_Mesßge_t
 
	mnMsg
;

32 
phDÆ4Nfc_mesßge_queue_ôem
 * 
	mpPªv
;

33 
phDÆ4Nfc_mesßge_queue_ôem
 * 
	mpNext
;

34 } 
	tphDÆ4Nfc_mesßge_queue_ôem_t
;

36 
	sphDÆ4Nfc_mesßge_queue


38 
phDÆ4Nfc_mesßge_queue_ôem_t
 * 
	mpIãms
;

39 
±hªad_muãx_t
 
	mnCrôiˇlSe˘i⁄Muãx
;

40 
£m_t
 
	mnPro˚ssSem≠h‹e
;

42 } 
	tphDÆ4Nfc_mesßge_queue_t
;

56 
öçå_t
 
	$phDÆ4Nfc_msggë
(
key_t
 
key
, 
msgÊg
)

58 
phDÆ4Nfc_mesßge_queue_t
 * 
pQueue
;

60 
pQueue
 = (
phDÆ4Nfc_mesßge_queue_t
 *Ë
	`mÆloc
((phDal4Nfc_message_queue_t));

61 i‡(
pQueue
 =
NULL
)

63 
	`mem£t
(
pQueue
, 0, (
phDÆ4Nfc_mesßge_queue_t
));

64 i‡(
	`±hªad_muãx_öô
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
, 
NULL
) == -1)

66 
	`‰ì
(
pQueue
);

69 i‡(
	`£m_öô
(&
pQueue
->
nPro˚ssSem≠h‹e
, 0, 0) == -1)

71 
	`‰ì
(
pQueue
);

75  ((
öçå_t
)
pQueue
);

76 
	}
}

89 
	$phDÆ4Nfc_msgªÀa£
(
öçå_t
 
msqid
)

91 
phDÆ4Nfc_mesßge_queue_t
 * 
pQueue
 = (phDÆ4Nfc_mesßge_queue_t*)
msqid
;

93 if(
pQueue
 !
NULL
)

95 
	`£m_po°
(&
pQueue
->
nPro˚ssSem≠h‹e
);

96 
	`u¶ìp
(300000);

97 i‡(
	`£m_de°roy
(&
pQueue
->
nPro˚ssSem≠h‹e
))

99 
	`NXPLOG_TML_E
("FaûedÅÿde°roy sem≠h‹ê”ºno=0x%08x)", 
î∫o
);

101 
	`±hªad_muãx_de°roy
 (&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

103 
	`‰ì
(
pQueue
);

107 
	}
}

122 
	$phDÆ4Nfc_msg˘l
(
öçå_t
 
msqid
, 
cmd
, *
buf
)

124 
phDÆ4Nfc_mesßge_queue_t
 * 
pQueue
;

125 
phDÆ4Nfc_mesßge_queue_ôem_t
 * 
p
;

127 i‡(
msqid
 == 0)

130 
pQueue
 = (
phDÆ4Nfc_mesßge_queue_t
 *Ë
msqid
;

131 
	`±hªad_muãx_lock
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

132 i‡(
pQueue
->
pIãms
 !
NULL
)

134 
p
 = 
pQueue
->
pIãms
;

135 
p
->
pNext
 !
NULL
)

137 
p
 =Ö->
pNext
;

139 
p
->
pPªv
 !
NULL
)

141 
p
 =Ö->
pPªv
;

142 
	`‰ì
(
p
->
pNext
);

143 
p
->
pNext
 = 
NULL
;

145 
	`‰ì
(
p
);

147 
pQueue
->
pIãms
 = 
NULL
;

148 
	`±hªad_muãx_u∆ock
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

149 
	`±hªad_muãx_de°roy
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

150 
	`‰ì
(
pQueue
);

153 
	}
}

171 
	$phDÆ4Nfc_msg¢d
(
öçå_t
 
msqid
, 
phLibNfc_Mesßge_t
 * 
msg
, 
msgÊg
)

173 
phDÆ4Nfc_mesßge_queue_t
 * 
pQueue
;

174 
phDÆ4Nfc_mesßge_queue_ôem_t
 * 
p
;

175 
phDÆ4Nfc_mesßge_queue_ôem_t
 * 
pNew
;

177 i‡((
msqid
 =0Ë|| (
msg
 =
NULL
) )

181 
pQueue
 = (
phDÆ4Nfc_mesßge_queue_t
 *Ë
msqid
;

182 
pNew
 = (
phDÆ4Nfc_mesßge_queue_ôem_t
 *Ë
	`mÆloc
((phDal4Nfc_message_queue_item_t));

183 i‡(
pNew
 =
NULL
)

185 
	`mem£t
(
pNew
, 0, (
phDÆ4Nfc_mesßge_queue_ôem_t
));

186 
	`mem˝y
(&
pNew
->
nMsg
, 
msg
, (
phLibNfc_Mesßge_t
));

187 
	`±hªad_muãx_lock
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

189 i‡(
pQueue
->
pIãms
 !
NULL
)

191 
p
 = 
pQueue
->
pIãms
;

192 
p
->
pNext
 !
NULL
)

194 
p
 =Ö->
pNext
;

196 
p
->
pNext
 = 
pNew
;

197 
pNew
->
pPªv
 = 
p
;

201 
pQueue
->
pIãms
 = 
pNew
;

203 
	`±hªad_muãx_u∆ock
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

205 
	`£m_po°
(&
pQueue
->
nPro˚ssSem≠h‹e
);

208 
	}
}

228 
	$phDÆ4Nfc_msgrcv
(
öçå_t
 
msqid
, 
phLibNfc_Mesßge_t
 * 
msg
, 
msgtyp
, 
msgÊg
)

230 
phDÆ4Nfc_mesßge_queue_t
 * 
pQueue
;

231 
phDÆ4Nfc_mesßge_queue_ôem_t
 * 
p
;

233 i‡((
msqid
 =0Ë|| (
msg
 =
NULL
))

236 
pQueue
 = (
phDÆ4Nfc_mesßge_queue_t
 *Ë
msqid
;

238 
	`£m_waô
(&
pQueue
->
nPro˚ssSem≠h‹e
);

240 
	`±hªad_muãx_lock
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

242 i‡(
pQueue
->
pIãms
 !
NULL
)

244 
	`mem˝y
(
msg
, &(
pQueue
->
pIãms
)->
nMsg
, (
phLibNfc_Mesßge_t
));

245 
p
 = 
pQueue
->
pIãms
->
pNext
;

246 
	`‰ì
(
pQueue
->
pIãms
);

247 
pQueue
->
pIãms
 = 
p
;

249 
	`±hªad_muãx_u∆ock
(&
pQueue
->
nCrôiˇlSe˘i⁄Muãx
);

252 
	}
}

	@tml/phDal4Nfc_messageQueueLib.h

21 #i‚de‡
PHDAL4NFC_MESSAGEQUEUE_H


22 
	#PHDAL4NFC_MESSAGEQUEUE_H


	)

24 
	~<löux/ùc.h
>

25 
	~<phNfcTy≥s.h
>

27 
öçå_t
 
phDÆ4Nfc_msggë
(
key_t
 
key
, 
msgÊg
);

28 
phDÆ4Nfc_msgªÀa£
(
öçå_t
 
msqid
);

29 
phDÆ4Nfc_msg˘l
(
öçå_t
 
msqid
, 
cmd
, *
buf
);

30 
phDÆ4Nfc_msg¢d
(
öçå_t
 
msqid
, 
phLibNfc_Mesßge_t
 * 
msg
, 
msgÊg
);

31 
phDÆ4Nfc_msgrcv
(
öçå_t
 
msqid
, 
phLibNfc_Mesßge_t
 * 
msg
, 
msgtyp
, 
msgÊg
);

	@tml/phOsalNfc_Timer.c

21 
	~<sig«l.h
>

22 
	~<phNfcTy≥s.h
>

23 
	~<phOßlNfc_Timî.h
>

24 
	~<phNfcComm⁄.h
>

25 
	~<phNxpNciHÆ.h
>

26 
	~<phNxpLog.h
>

28 
	#PH_NFC_MAX_TIMER
 (5U)

	)

29 
phOßlNfc_TimîH™dÀ_t
 
	g≠TimîInfo
[
PH_NFC_MAX_TIMER
];

31 
phNxpNciHÆ_C⁄åﬁ_t
 
nx≤cihÆ_˘æ
;

37 
	#PH_NFC_TIMER_BASE_ADDRESS
 (100U)

	)

42 
	#PH_NFC_TIMER_ID_ZERO
 (0x00)

	)

47 
	#PH_NFC_TIMER_ID_INVALID
 (0xFFFF)

	)

50 
phOßlNfc_Po°TimîMsg
(
phLibNfc_Mesßge_t
 *
pMsg
);

51 
phOßlNfc_De„ºedCÆl
 (*
pP¨ams
);

52 
phOßlNfc_Timî_Expúed
(
sigvÆ
 
sv
);

71 
uöt32_t
 
	$phOßlNfc_Timî_Cª©e
()

74 
uöt32_t
 
dwTimîId
 = 
PH_OSALNFC_TIMER_ID_INVALID
;

75 
sigevít
 
£
;

76 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

79 
£
.
sigev_nŸify
 = 
SIGEV_THREAD
;

80 
£
.
sigev_nŸify_fun˘i⁄
 = 
phOßlNfc_Timî_Expúed
;

81 
£
.
sigev_nŸify_©åibuãs
 = 
NULL
;

82 
dwTimîId
 = 
	`phUtûNfc_CheckF‹AvaûabÀTimî
();

85 if–(
PH_NFC_TIMER_ID_ZERO
 !
dwTimîId
Ë&& (dwTimîId <
PH_NFC_MAX_TIMER
) )

87 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwTimîId
-1];

89 
dwTimîId
 +
PH_NFC_TIMER_BASE_ADDRESS
;

90 
£
.
sigev_vÆue
.
sivÆ_öt
 = ()
dwTimîId
;

92 if(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£
, &(
pTimîH™dÀ
->
hTimîH™dÀ
)) == -1)

94 
dwTimîId
 = 
PH_NFC_TIMER_ID_INVALID
;

99 
pTimîH™dÀ
->
eSèã
 = 
eTimîIdÀ
;

101 
pTimîH™dÀ
->
TimîId
 = 
dwTimîId
;

106 
dwTimîId
 = 
PH_NFC_TIMER_ID_INVALID
;

110  
dwTimîId
;

111 
	}
}

134 
NFCSTATUS
 
	$phOßlNfc_Timî_Sèπ
(
uöt32_t
 
dwTimîId
, uöt32_à
dwRegTimeC¡
, 
µhOßlNfc_TimîCÆlbck_t
 
pAµliˇti⁄_ˇŒback
, *
pC⁄ãxt
)

136 
NFCSTATUS
 
wSèπSètus

NFCSTATUS_SUCCESS
;

138 
ôimî•ec
 
ôs
;

139 
uöt32_t
 
dwIndex
;

140 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

142 
dwIndex
 = 
dwTimîId
 - 
PH_NFC_TIMER_BASE_ADDRESS
 - 0x01;

143 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwIndex
];

146 if–(
dwIndex
 < 
PH_NFC_MAX_TIMER
Ë&& (0x00 !
pTimîH™dÀ
->
TimîId
) &&

147 (
NULL
 !
pAµliˇti⁄_ˇŒback
) )

149 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 0;

150 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = 0;

151 
ôs
.
ô_vÆue
.
tv_£c
 = 
dwRegTimeC¡
 / 1000;

152 
ôs
.
ô_vÆue
.
tv_n£c
 = 1000000 * (
dwRegTimeC¡
 % 1000);

153 if(
ôs
.
ô_vÆue
.
tv_£c
 =0 && its.ô_vÆue.
tv_n£c
 == 0)

156 
ôs
.
ô_vÆue
.
tv_n£c
 = 1;

158 
pTimîH™dÀ
->
Aµliˇti⁄_ˇŒback
 = 
pAµliˇti⁄_ˇŒback
;

159 
pTimîH™dÀ
->
pC⁄ãxt
 =ÖContext;

160 
pTimîH™dÀ
->
eSèã
 = 
eTimîRu¬ög
;

162 if((
	`timî_£âime
(
pTimîH™dÀ
->
hTimîH™dÀ
, 0, &
ôs
, 
NULL
)) == -1)

164 
wSèπSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_OSAL
, 
PH_OSALNFC_TIMER_START_ERROR
);

169 
wSèπSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_OSAL
, 
NFCSTATUS_INVALID_PARAMETER
);

172  
wSèπSètus
;

173 
	}
}

192 
NFCSTATUS
 
	$phOßlNfc_Timî_St›
(
uöt32_t
 
dwTimîId
)

194 
NFCSTATUS
 
wSt›Sètus
=
NFCSTATUS_SUCCESS
;

195 
ôimî•ec
 
ôs
 = {{0, 0}, {0, 0}};

197 
uöt32_t
 
dwIndex
;

198 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

199 
dwIndex
 = 
dwTimîId
 - 
PH_NFC_TIMER_BASE_ADDRESS
 - 0x01;

200 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwIndex
];

203 if–(
dwIndex
 < 
PH_NFC_MAX_TIMER
Ë&& (0x00 !
pTimîH™dÀ
->
TimîId
) &&

204 (
pTimîH™dÀ
->
eSèã
 !
eTimîIdÀ
) )

207 if(
pTimîH™dÀ
->
eSèã
 =
eTimîRu¬ög
)

209 if((
	`timî_£âime
(
pTimîH™dÀ
->
hTimîH™dÀ
, 0, &
ôs
, 
NULL
)) == -1)

211 
wSt›Sètus
 = 
	`PHNFCSTVAL
(
CID_NFC_OSAL
, 
PH_OSALNFC_TIMER_STOP_ERROR
);

216 
pTimîH™dÀ
->
eSèã
 = 
eTimîSt›≥d
;

222 
wSt›Sètus
 = 
	`PHNFCSTVAL
(
CID_NFC_OSAL
, 
NFCSTATUS_INVALID_PARAMETER
);

225  
wSt›Sètus
;

226 
	}
}

245 
NFCSTATUS
 
	$phOßlNfc_Timî_Dñëe
(
uöt32_t
 
dwTimîId
)

247 
NFCSTATUS
 
wDñëeSètus
 = 
NFCSTATUS_SUCCESS
;

249 
uöt32_t
 
dwIndex
;

250 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

251 
dwIndex
 = 
dwTimîId
 - 
PH_NFC_TIMER_BASE_ADDRESS
 - 0x01;

252 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwIndex
];

256 if–(
dwIndex
 < 
PH_NFC_MAX_TIMER
Ë&& (0x00 !
pTimîH™dÀ
->
TimîId
)

257 && (
NFCSTATUS_SUCCESS
 =
	`phOßlNfc_CheckTimîPª£n˚
(
pTimîH™dÀ
))

261 if(
	`timî_dñëe
(
pTimîH™dÀ
->
hTimîH™dÀ
) == -1)

263 
wDñëeSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_OSAL
, 
PH_OSALNFC_TIMER_DELETE_ERROR
);

266 
	`mem£t
(
pTimîH™dÀ
,(
uöt8_t
)0x00,(
phOßlNfc_TimîH™dÀ_t
));

270 
wDñëeSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_OSAL
, 
NFCSTATUS_INVALID_PARAMETER
);

272  
wDñëeSètus
;

273 
	}
}

288 
	$phOßlNfc_Timî_CÀ™up
()

291 
uöt32_t
 
dwIndex
;

292 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

293 
dwIndex
 = 0; dwIndex < 
PH_NFC_MAX_TIMER
; dwIndex++)

295 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwIndex
];

299 if–(0x00 !
pTimîH™dÀ
->
TimîId
)

300 && (
NFCSTATUS_SUCCESS
 =
	`phOßlNfc_CheckTimîPª£n˚
(
pTimîH™dÀ
))

304 if(
	`timî_dñëe
(
pTimîH™dÀ
->
hTimîH™dÀ
) == -1)

306 
	`NXPLOG_TML_E
("timî %d dñëêîr‹!", 
dwIndex
);

309 
	`mem£t
(
pTimîH™dÀ
,(
uöt8_t
)0x00,(
phOßlNfc_TimîH™dÀ_t
));

314 
	}
}

328 
	$phOßlNfc_De„ºedCÆl
 (*
pP¨ams
)

331 
uöt32_t
 
dwIndex
;

332 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

333 if(
NULL
 !
pP¨ams
)

336 
dwIndex
 = (
öçå_t
)
pP¨ams
 - 
PH_NFC_TIMER_BASE_ADDRESS
 - 0x01;

337 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwIndex
];

338 if(
pTimîH™dÀ
->
Aµliˇti⁄_ˇŒback
 !
NULL
)

341 
pTimîH™dÀ
->
	`Aµliˇti⁄_ˇŒback
((
öçå_t
)
pP¨ams
,ÖTimîH™dÀ->
pC⁄ãxt
);

346 
	}
}

361 
	$phOßlNfc_Po°TimîMsg
(
phLibNfc_Mesßge_t
 *
pMsg
)

364 ()
	`phDÆ4Nfc_msg¢d
(
nx≤cihÆ_˘æ
.
gDrvCfg
.
nClõ¡Id
 , 
pMsg
,0);

367 
	}
}

381 
	$phOßlNfc_Timî_Expúed
(
sigvÆ
 
sv
)

383 
uöt32_t
 
dwIndex
;

384 
phOßlNfc_TimîH™dÀ_t
 *
pTimîH™dÀ
;

387 
dwIndex
 = ((
uöt32_t
)(
sv
.
sivÆ_öt
)Ë- 
PH_NFC_TIMER_BASE_ADDRESS
 - 0x01;

388 
pTimîH™dÀ
 = (
phOßlNfc_TimîH™dÀ_t
 *)&
≠TimîInfo
[
dwIndex
];

390 
pTimîH™dÀ
->
eSèã
 = 
eTimîSt›≥d
;

392 
pTimîH™dÀ
->
tDe„ªdCÆlInfo
.
pDe„ªdCÆl
 = &
phOßlNfc_De„ºedCÆl
;

393 
pTimîH™dÀ
->
tDe„ªdCÆlInfo
.
pP¨am
 = (*Ë((
öçå_t
)(
sv
.
sivÆ_öt
));

395 
pTimîH™dÀ
->
tOßlMesßge
.
eMsgTy≥
 = 
PH_LIBNFC_DEFERREDCALL_MSG
;

396 
pTimîH™dÀ
->
tOßlMesßge
.
pMsgD©a
 = (*)&pTimîH™dÀ->
tDe„ªdCÆlInfo
;

400 
	`phOßlNfc_Po°TimîMsg
 ((
phLibNfc_Mesßge_t
 *)&
pTimîH™dÀ
->
tOßlMesßge
);

403 
	}
}

417 
uöt32_t
 
	$phUtûNfc_CheckF‹AvaûabÀTimî
()

421 
uöt32_t
 
dwIndex
 = 0x00;

422 
uöt32_t
 
dwRëvÆ
 = 0x00;

426 
dwIndex
 = 0x00;

427 –(
dwIndex
 < 
PH_NFC_MAX_TIMER
Ë&& (0x00 =
dwRëvÆ
) ); dwIndex++)

429 if(!(
≠TimîInfo
[
dwIndex
].
TimîId
))

431 
dwRëvÆ
 = (
dwIndex
 + 0x01);

435  (
dwRëvÆ
);

437 
	}
}

451 
NFCSTATUS
 
	$phOßlNfc_CheckTimîPª£n˚
(*
pObje˘H™dÀ
)

453 
uöt32_t
 
dwIndex
;

454 
NFCSTATUS
 
wRegi°îSètus
 = 
NFCSTATUS_INVALID_PARAMETER
;

456 
dwIndex
 = 0x00; ( (dwIndex < 
PH_NFC_MAX_TIMER
) &&

457 (
wRegi°îSètus
 !
NFCSTATUS_SUCCESS
Ë); 
dwIndex
++)

460 if–((&
≠TimîInfo
[
dwIndex
]) ==

461 (
phOßlNfc_TimîH™dÀ_t
 *)
pObje˘H™dÀ
) &&

462 (
≠TimîInfo
[
dwIndex
].
TimîId
) )

464 
wRegi°îSètus
 = 
NFCSTATUS_SUCCESS
;

467  
wRegi°îSètus
;

469 
	}
}

	@tml/phOsalNfc_Timer.h

21 #i‚de‡
PHOSALNFC_TIMER_H


22 
	#PHOSALNFC_TIMER_H


	)

24 #ifde‡
__˝lu•lus


39 (*
µhOßlNfc_TimîCÆlbck_t
)(
	tuöt32_t
 
	tTimîId
, *
	tpC⁄ãxt
);

44 
	#PH_OSALNFC_TIMER_CREATE_ERROR
 (0X00E0)

	)

49 
	#PH_OSALNFC_TIMER_START_ERROR
 (0X00E1)

	)

54 
	#PH_OSALNFC_TIMER_STOP_ERROR
 (0X00E2)

	)

59 
	#PH_OSALNFC_TIMER_DELETE_ERROR
 (0X00E3)

	)

63 
	#PH_OSALNFC_TIMER_ID_INVALID
 (0xFFFF)

	)

68 
	#PH_OSALNFC_TIMER_MSG
 (0x315)

	)

74 
uöt32_t
 
phOßlNfc_Timî_Cª©e
();

75 
NFCSTATUS
 
phOßlNfc_Timî_Sèπ
(
uöt32_t
 
dwTimîId
, uöt32_à
dwRegTimeC¡
, 
µhOßlNfc_TimîCÆlbck_t
 
pAµliˇti⁄_ˇŒback
, *
pC⁄ãxt
);

76 
NFCSTATUS
 
phOßlNfc_Timî_St›
(
uöt32_t
 
dwTimîId
);

77 
NFCSTATUS
 
phOßlNfc_Timî_Dñëe
(
uöt32_t
 
dwTimîId
);

78 
phOßlNfc_Timî_CÀ™up
();

79 
uöt32_t
 
phUtûNfc_CheckF‹AvaûabÀTimî
();

80 
NFCSTATUS
 
phOßlNfc_CheckTimîPª£n˚
(*
pObje˘H™dÀ
);

83 #ifde‡
__˝lu•lus


	@tml/phTmlNfc.c

21 
	~<phTmlNfc.h
>

22 
	~<phOßlNfc_Timî.h
>

23 
	~<phNxpLog.h
>

24 
	~<phDÆ4Nfc_mesßgeQueueLib.h
>

25 
	~<phTmlNfc_i2c.h
>

26 
	~<phNxpNciHÆ_utûs.h
>

31 
	#PHTMLNFC_MAXTIME_RETRANSMIT
 (200U)

	)

32 
	#MAX_WRITE_RETRY_COUNT
 0x03

	)

34 
uöt8_t
 
	gbCuºítRëryCou¡
 = (2000 / 
PHTMLNFC_MAXTIME_RETRANSMIT
) + 1;

38 
	#PH_TMLNFC_RESET_VALUE
 (0x00)

	)

41 
	#PH_TMLNFC_VALUE_ONE
 (0x01)

	)

44 
phTmlNfc_C⁄ãxt_t
 *
	ggµhTmlNfc_C⁄ãxt
 = 
NULL
;

45 
phTmlNfc_i2c‰agmíèti⁄_t
 
‰agmíèti⁄_íabÀd
 = 
I2C_FRAGMENATATION_DISABLED
;

47 
NFCSTATUS
 
phTmlNfc_SèπThªad
();

48 
phTmlNfc_CÀ™Up
();

49 
phTmlNfc_RódDe„ºedCb
(*
pP¨ams
);

50 
phTmlNfc_WrôeDe„ºedCb
(*
pP¨ams
);

51 
phTmlNfc_TmlThªad
(*
pP¨am
);

52 
phTmlNfc_TmlWrôîThªad
(*
pP¨am
);

53 
phTmlNfc_ReTxTimîCb
(
uöt32_t
 
dwTimîId
, *
pC⁄ãxt
);

54 
NFCSTATUS
 
phTmlNfc_InôüãTimî
();

75 
NFCSTATUS
 
	$phTmlNfc_Inô
(
µhTmlNfc_C⁄fig_t
 
pC⁄fig
)

77 
NFCSTATUS
 
wInôSètus
 = 
NFCSTATUS_SUCCESS
;

80 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
)

83 
wInôSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_ALREADY_INITIALISED
);

86 i‡((
NULL
 =
pC⁄fig
) ||

87 (
PH_TMLNFC_RESET_VALUE
 =
pC⁄fig
->
dwGëMsgThªadId
))

90 
wInôSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_INVALID_PARAMETER
);

95 
gµhTmlNfc_C⁄ãxt
 = 
	`mÆloc
((
phTmlNfc_C⁄ãxt_t
));

97 i‡(
NULL
 =
gµhTmlNfc_C⁄ãxt
)

99 
wInôSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_FAILED
);

104 
	`mem£t
(
gµhTmlNfc_C⁄ãxt
, 
PH_TMLNFC_RESET_VALUE
, (
phTmlNfc_C⁄ãxt_t
));

106 
gµhTmlNfc_C⁄ãxt
->
bThªadD⁄e
 = 1;

109 
wInôSètus
 = 
	`phTmlNfc_i2c_›í_™d_c⁄figuª
(
pC⁄fig
, &(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
));

111 i‡(
NFCSTATUS_SUCCESS
 !
wInôSètus
)

113 
wInôSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_INVALID_DEVICE
);

114 
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
 = (*Ë
NFCSTATUS_INVALID_DEVICE
;

118 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bE«bÀ
 = 0;

119 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
 = 0;

120 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bThªadBusy
 = 
FALSE
;

121 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bThªadBusy
 = 
FALSE
;

123 if(0 !
	`£m_öô
(&
gµhTmlNfc_C⁄ãxt
->
rxSem≠h‹e
, 0, 0))

125 
wInôSètus
 = 
NFCSTATUS_FAILED
;

127 if(0 !
	`£m_öô
(&
gµhTmlNfc_C⁄ãxt
->
txSem≠h‹e
, 0, 0))

129 
wInôSètus
 = 
NFCSTATUS_FAILED
;

131 if(0 !
	`£m_öô
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
, 0, 0))

133 
wInôSètus
 = 
NFCSTATUS_FAILED
;

137 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
);

139 i‡(
NFCSTATUS_SUCCESS
 !
	`phTmlNfc_SèπThªad
())

141 
wInôSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_FAILED
);

146 
gµhTmlNfc_C⁄ãxt
->
dwTimîId
 = 
	`phOßlNfc_Timî_Cª©e
();

147 i‡(
PH_OSALNFC_TIMER_ID_INVALID
 !
gµhTmlNfc_C⁄ãxt
->
dwTimîId
)

150 
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
 = 
pC⁄fig
->
dwGëMsgThªadId
;

152 
gµhTmlNfc_C⁄ãxt
->
eC⁄fig
 = 
phTmlNfc_e_DißbÀRëøns
;

154 
gµhTmlNfc_C⁄ãxt
->
bRëryCou¡
 = (2000 / 
PHTMLNFC_MAXTIME_RETRANSMIT
) + 1;

155 
gµhTmlNfc_C⁄ãxt
->
bWrôeCbInvoked
 = 
FALSE
;

159 
wInôSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_FAILED
);

167 i‡(
NFCSTATUS_SUCCESS
 !
wInôSètus
)

170 
	`phTmlNfc_CÀ™Up
();

173  
wInôSètus
;

174 
	}
}

190 
	$phTmlNfc_C⁄figNciPktReTx
(
phTmlNfc_C⁄figRëøns_t
 
eC⁄figuøti⁄
, 
uöt8_t
 
bRëryCou¡î
)

194 
gµhTmlNfc_C⁄ãxt
->
eC⁄fig
 = 
eC⁄figuøti⁄
;

195 i‡(
phTmlNfc_e_E«bÀRëøns
 =
eC⁄figuøti⁄
)

198 i‡(0 !
bRëryCou¡î
)

200 
gµhTmlNfc_C⁄ãxt
->
bRëryCou¡
 = 
bRëryCou¡î
;

206 
gµhTmlNfc_C⁄ãxt
->
bRëryCou¡
 = (2000 / 
PHTMLNFC_MAXTIME_RETRANSMIT
) + 1;

211 
	}
}

226 
NFCSTATUS
 
	$phTmlNfc_SèπThªad
()

228 
NFCSTATUS
 
wSèπSètus
 = 
NFCSTATUS_SUCCESS
;

229 *
h_thªadsEvít
 = 0x00;

230 
uöt32_t
 
dwEvít
;

231 
±hªad_¸óã_°©us
 = 0;

234 
±hªad_¸óã_°©us
 = 
	`±hªad_¸óã
(&
gµhTmlNfc_C⁄ãxt
->
ªadîThªad
,
NULL
,(*)&
phTmlNfc_TmlThªad
,

235 (*)
h_thªadsEvít
);

236 if(0 !
±hªad_¸óã_°©us
)

238 
wSèπSètus
 = 
NFCSTATUS_FAILED
;

243 
±hªad_¸óã_°©us
 = 
	`±hªad_¸óã
(&
gµhTmlNfc_C⁄ãxt
->
wrôîThªad
,
NULL
,(*)&
phTmlNfc_TmlWrôîThªad
,

244 (*)
h_thªadsEvít
);

245 if(0 !
±hªad_¸óã_°©us
)

247 
wSèπSètus
 = 
NFCSTATUS_FAILED
;

251  
wSèπSètus
;

252 
	}
}

266 
	$phTmlNfc_ReTxTimîCb
(
uöt32_t
 
dwTimîId
, *
pC⁄ãxt
)

268 i‡((
gµhTmlNfc_C⁄ãxt
->
dwTimîId
 == dwTimerId) &&

269 (
NULL
 =
pC⁄ãxt
))

273 i‡(0 =
bCuºítRëryCou¡
)

280 
bCuºítRëryCou¡
--;

281 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bThªadBusy
 = 
TRUE
;

282 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
 = 1;

284 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
txSem≠h‹e
);

288 
	}
}

301 
NFCSTATUS
 
	$phTmlNfc_InôüãTimî
()

303 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

306 
wSètus
 = 
	`phOßlNfc_Timî_Sèπ
(
gµhTmlNfc_C⁄ãxt
->
dwTimîId
,

307 (
uöt32_t
Ë
PHTMLNFC_MAXTIME_RETRANSMIT
,

308 
phTmlNfc_ReTxTimîCb
, 
NULL
);

310  
wSètus
;

311 
	}
}

324 
	$phTmlNfc_TmlThªad
(*
pP¨am
)

326 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

327 
öt32_t
 
dwNoByãsWrRd
 = 
PH_TMLNFC_RESET_VALUE
;

328 
uöt8_t
 
ãmp
[260];

330 
phTmlNfc_Tønß˘Info_t
 
tTønß˘i⁄Info
;

333 
phLibNfc_De„ºedCÆl_t
 
tDe„ºedInfo
;

335 
phLibNfc_Mesßge_t
 
tMsg
;

337 
	`NXPLOG_TML_D
("PN547 - Tml Reader Thread Started................\n");

340 
gµhTmlNfc_C⁄ãxt
->
bThªadD⁄e
)

344 
wSètus
 = 
NFCSTATUS_SUCCESS
;

345 
	`£m_waô
(&
gµhTmlNfc_C⁄ãxt
->
rxSem≠h‹e
);

348 i‡(1 =
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bE«bÀ
)

350 
	`NXPLOG_TML_D
("PN547 - ReadÑequested.....\n");

352 
wSètus
 = 
NFCSTATUS_SUCCESS
;

355 
dwNoByãsWrRd
 = 
PH_TMLNFC_RESET_VALUE
;

358 i‡(
NFCSTATUS_INVALID_DEVICE
 !(
uöçå_t
)
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
)

360 
	`NXPLOG_TML_D
("PN547 - Invoking I2C Read.....\n");

361 
dwNoByãsWrRd
 = 
	`phTmlNfc_i2c_ªad
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 
ãmp
, 260);

363 i‡(-1 =
dwNoByãsWrRd
)

365 
	`NXPLOG_TML_E
("PN547 - Error in I2C Read.....\n");

366 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
rxSem≠h‹e
);

370 
	`mem˝y
(
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pBuf„r
, 
ãmp
, 
dwNoByãsWrRd
);

372 
	`NXPLOG_TML_D
("PN547 - I2C Read successful.....\n");

374 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bE«bÀ
 = 0;

375 i‡((
phTmlNfc_e_E«bÀRëøns
 =
gµhTmlNfc_C⁄ãxt
->
eC⁄fig
) &&

376 (0x00 !(
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pBuf„r
[0] & 0xE0)))

379 
	`NXPLOG_TML_D
("PN547 - RetransmissionÅimer stopped.....\n");

381 
uöt32_t
 
timîSètus
 = 
	`phOßlNfc_Timî_St›
(
gµhTmlNfc_C⁄ãxt
->
dwTimîId
);

382 i‡(
NFCSTATUS_SUCCESS
 !
timîSètus
)

384 
	`NXPLOG_TML_E
("PN547 -Åimer stoppedÑeturned failure.....\n");

388 
gµhTmlNfc_C⁄ãxt
->
bWrôeCbInvoked
 = 
FALSE
;

392 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
wLígth
 = (
uöt16_t
Ë(
dwNoByãsWrRd
);

393 
	`phNxpNciHÆ_¥öt_∑ckë
("RECV", 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pBuf„r
,

394 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
wLígth
);

396 
dwNoByãsWrRd
 = 
PH_TMLNFC_RESET_VALUE
;

399 
tTønß˘i⁄Info
.
wSètus
 = wStatus;

400 
tTønß˘i⁄Info
.
pBuff
 = 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pBuf„r
;

402 
tTønß˘i⁄Info
.
wLígth
 = 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.wLength;

406 
tDe„ºedInfo
.
pCÆlback
 = &
phTmlNfc_RódDe„ºedCb
;

407 
tDe„ºedInfo
.
pP¨amëî
 = &
tTønß˘i⁄Info
;

408 
tMsg
.
eMsgTy≥
 = 
PH_LIBNFC_DEFERREDCALL_MSG
;

409 
tMsg
.
pMsgD©a
 = &
tDe„ºedInfo
;

410 
tMsg
.
Size
 = (
tDe„ºedInfo
);

411 
	`NXPLOG_TML_D
("PN547 - PostingÑead message.....\n");

412 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
, &
tMsg
);

418 
	`NXPLOG_TML_D
("PN547 - NFCSTATUS_INVALID_DEVICE == gpphTmlNfc_Context->pDevHandle");

423 
	`NXPLOG_TML_D
("PN547 -ÑeadÑequest NOTÉnabled");

424 
	`u¶ìp
(10*1000);

429 
	}
}

442 
	$phTmlNfc_TmlWrôîThªad
(*
pP¨am
)

444 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

445 
öt32_t
 
dwNoByãsWrRd
 = 
PH_TMLNFC_RESET_VALUE
;

447 
phTmlNfc_Tønß˘Info_t
 
tTønß˘i⁄Info
;

450 
phLibNfc_De„ºedCÆl_t
 
tDe„ºedInfo
;

452 
phLibNfc_Mesßge_t
 
tMsg
;

454 
uöt16_t
 
ªåy_˙t
;

456 
	`NXPLOG_TML_D
("PN547 - Tml Writer Thread Started................\n");

459 
gµhTmlNfc_C⁄ãxt
->
bThªadD⁄e
)

461 
	`NXPLOG_TML_D
("PN547 - Tml Writer Thread Running................\n");

462 
	`£m_waô
(&
gµhTmlNfc_C⁄ãxt
->
txSem≠h‹e
);

464 i‡(1 =
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
)

466 
	`NXPLOG_TML_D
("PN547 - WriteÑequested.....\n");

468 
wSètus
 = 
NFCSTATUS_SUCCESS
;

469 i‡(
NFCSTATUS_INVALID_DEVICE
 !(
uöçå_t
)
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
)

471 
ªåy
:

473 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
 = 0;

475 
dwNoByãsWrRd
 = 
PH_TMLNFC_RESET_VALUE
;

477 
	`NXPLOG_TML_D
("PN547 - Invoking I2C Write.....\n");

478 
dwNoByãsWrRd
 = 
	`phTmlNfc_i2c_wrôe
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
,

479 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pBuf„r
,

480 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
wLígth


484 i‡(-1 =
dwNoByãsWrRd
)

486 i‡(
	`gëDow∆ﬂdFœg
(Ë=
TRUE
)

488 i‡(
ªåy_˙t
++ < 
MAX_WRITE_RETRY_COUNT
)

490 
	`NXPLOG_NCIHAL_E
(

491 "PN547 - Eº‹ i¿I2C Wrôê - Rëry 0x%x", 
ªåy_˙t
);

492 
ªåy
;

495 
	`NXPLOG_TML_E
("PN547 - Error in I2C Write.....\n");

496 
wSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_FAILED
);

500 
	`phNxpNciHÆ_¥öt_∑ckë
("SEND", 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pBuf„r
,

501 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
wLígth
);

503 
ªåy_˙t
 = 0;

504 i‡(
NFCSTATUS_SUCCESS
 =
wSètus
)

506 
	`NXPLOG_TML_D
("PN547 - I2C Write successful.....\n");

507 
dwNoByãsWrRd
 = 
PH_TMLNFC_VALUE_ONE
;

510 
tTønß˘i⁄Info
.
wSètus
 = wStatus;

511 
tTønß˘i⁄Info
.
pBuff
 = 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pBuf„r
;

513 
tTønß˘i⁄Info
.
wLígth
 = (
uöt16_t
Ë
dwNoByãsWrRd
;

516 
tDe„ºedInfo
.
pCÆlback
 = &
phTmlNfc_WrôeDe„ºedCb
;

517 
tDe„ºedInfo
.
pP¨amëî
 = &
tTønß˘i⁄Info
;

519 
tMsg
.
eMsgTy≥
 = 
PH_LIBNFC_DEFERREDCALL_MSG
;

520 
tMsg
.
pMsgD©a
 = &
tDe„ºedInfo
;

521 
tMsg
.
Size
 = (
tDe„ºedInfo
);

529 i‡((
phTmlNfc_e_E«bÀRëøns
 =
gµhTmlNfc_C⁄ãxt
->
eC⁄fig
) &&

530 (0x00 !(
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pBuf„r
[0] & 0xE0)))

532 i‡(
FALSE
 =
gµhTmlNfc_C⁄ãxt
->
bWrôeCbInvoked
)

534 i‡((
NFCSTATUS_SUCCESS
 =
wSètus
) ||

535 (
bCuºítRëryCou¡
 == 0))

537 
	`NXPLOG_TML_D
("PN547 - Posting Write message.....\n");

538 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

539 &
tMsg
);

540 
gµhTmlNfc_C⁄ãxt
->
bWrôeCbInvoked
 = 
TRUE
;

546 
	`NXPLOG_TML_D
("PN547 - Posting Fresh Write message.....\n");

547 
	`phTmlNfc_De„ºedCÆl
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
, &
tMsg
);

552 
	`NXPLOG_TML_D
("PN547 - NFCSTATUS_INVALID_DEVICE != gpphTmlNfc_Context->pDevHandle");

556 i‡((
phTmlNfc_e_E«bÀRëøns
 =
gµhTmlNfc_C⁄ãxt
->
eC⁄fig
) &&

557 (0x00 !(
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pBuf„r
[0] & 0xE0)))

559 
	`NXPLOG_TML_D
("PN547 - StartingÅimer for Retransmission case");

560 
wSètus
 = 
	`phTmlNfc_InôüãTimî
();

561 i‡(
NFCSTATUS_SUCCESS
 !
wSètus
)

564 
	`NXPLOG_TML_D
("PN547 - RetransmissionÅimer initiate failed");

565 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
 = 0;

566 
bCuºítRëryCou¡
 = 0;

572 
	`NXPLOG_TML_D
("PN547 - WriteÑequest NOTÉnabled");

573 
	`u¶ìp
(10000);

579 
	}
}

592 
	$phTmlNfc_CÀ™Up
()

594 
NFCSTATUS
 
wRëvÆ
 = 
NFCSTATUS_SUCCESS
;

596 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
)

598 (Ë
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 0);

599 
gµhTmlNfc_C⁄ãxt
->
bThªadD⁄e
 = 0;

601 
	`£m_de°roy
(&
gµhTmlNfc_C⁄ãxt
->
rxSem≠h‹e
);

602 
	`£m_de°roy
(&
gµhTmlNfc_C⁄ãxt
->
txSem≠h‹e
);

603 
	`£m_de°roy
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
);

604 
	`phTmlNfc_i2c_˛o£
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
);

605 
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
 = 
NULL
;

607 
	`‰ì
((*Ë
gµhTmlNfc_C⁄ãxt
);

609 
gµhTmlNfc_C⁄ãxt
 = 
NULL
;

612 
	}
}

628 
NFCSTATUS
 
	$phTmlNfc_Shutdown
()

630 
NFCSTATUS
 
wShutdownSètus
 = 
NFCSTATUS_SUCCESS
;

633 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
)

636 
gµhTmlNfc_C⁄ãxt
->
bThªadD⁄e
 = 0;

637 
	`u¶ìp
(1000);

639 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
rxSem≠h‹e
);

640 
	`u¶ìp
(1000);

641 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
txSem≠h‹e
);

642 
	`u¶ìp
(1000);

643 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
);

644 
	`u¶ìp
(1000);

645 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
);

646 
	`u¶ìp
(1000);

647 i‡(0 !
	`±hªad_joö
(
gµhTmlNfc_C⁄ãxt
->
ªadîThªad
, (**)
NULL
))

649 
	`NXPLOG_TML_E
 ("FailÅo killÑeaderÅhread!");

651 i‡(0 !
	`±hªad_joö
(
gµhTmlNfc_C⁄ãxt
->
wrôîThªad
, (**)
NULL
))

653 
	`NXPLOG_TML_E
 ("FailÅo kill writerÅhread!");

655 
	`NXPLOG_TML_D
 ("bThreadDone == 0");

657 
	`phTmlNfc_CÀ™Up
();

661 
wShutdownSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_NOT_INITIALISED
);

664  
wShutdownSètus
;

665 
	}
}

692 
NFCSTATUS
 
	$phTmlNfc_Wrôe
(
uöt8_t
 *
pBuf„r
, 
uöt16_t
 
wLígth
, 
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
 
pTmlWrôeCom∂ëe
, *
pC⁄ãxt
)

694 
NFCSTATUS
 
wWrôeSètus
;

698 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
)

700 i‡((
NULL
 !
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
Ë&& (NULL !
pBuf„r
) &&

701 (
PH_TMLNFC_RESET_VALUE
 !
wLígth
Ë&& (
NULL
 !
pTmlWrôeCom∂ëe
))

703 i‡(!
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bThªadBusy
)

706 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bThªadBusy
 = 
TRUE
;

709 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pBuf„r
 =ÖBuffer;

710 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
wLígth
 = wLength;

711 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pThªad_CÆlback
 = 
pTmlWrôeCom∂ëe
;

712 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
pC⁄ãxt
 =ÖContext;

714 
wWrôeSètus
 = 
NFCSTATUS_PENDING
;

716 i‡(
phTmlNfc_e_E«bÀRëøns
 =
gµhTmlNfc_C⁄ãxt
->
eC⁄fig
)

722 
bCuºítRëryCou¡
 = 
gµhTmlNfc_C⁄ãxt
->
bRëryCou¡
;

723 
gµhTmlNfc_C⁄ãxt
->
bWrôeCbInvoked
 = 
FALSE
;

726 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
 = 1;

727 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
txSem≠h‹e
);

731 
wWrôeSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_BUSY
);

736 
wWrôeSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_INVALID_PARAMETER
);

741 
wWrôeSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_NOT_INITIALISED
);

744  
wWrôeSètus
;

745 
	}
}

768 
NFCSTATUS
 
	$phTmlNfc_Ród
(
uöt8_t
 *
pBuf„r
, 
uöt16_t
 
wLígth
, 
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
 
pTmlRódCom∂ëe
, *
pC⁄ãxt
)

770 
NFCSTATUS
 
wRódSètus
;

773 i‡(
NULL
 !
gµhTmlNfc_C⁄ãxt
)

775 i‡((
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
 !
NULL
Ë&& (NULL !
pBuf„r
) &&

776 (
PH_TMLNFC_RESET_VALUE
 !
wLígth
Ë&& (
NULL
 !
pTmlRódCom∂ëe
))

778 i‡(!
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bThªadBusy
)

781 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bThªadBusy
 = 
TRUE
;

784 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pBuf„r
 =ÖBuffer;

785 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
wLígth
 = wLength;

786 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pThªad_CÆlback
 = 
pTmlRódCom∂ëe
;

787 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
pC⁄ãxt
 =ÖContext;

788 
wRódSètus
 = 
NFCSTATUS_PENDING
;

791 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bE«bÀ
 = 1;

792 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
rxSem≠h‹e
);

796 
wRódSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_BUSY
);

801 
wRódSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_INVALID_PARAMETER
);

806 
wRódSètus
 = 
	`PHNFCSTVAL
(
CID_NFC_TML
, 
NFCSTATUS_NOT_INITIALISED
);

809  
wRódSètus
;

810 
	}
}

827 
NFCSTATUS
 
	$phTmlNfc_RódAb‹t
()

829 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_INVALID_PARAMETER
;

830 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bE«bÀ
 = 0;

833 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bThªadBusy
=
FALSE
;

834 
wSètus
 = 
NFCSTATUS_SUCCESS
;

836  
wSètus
;

837 
	}
}

854 
NFCSTATUS
 
	$phTmlNfc_WrôeAb‹t
()

856 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_INVALID_PARAMETER
;

858 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bE«bÀ
 = 0;

860 
bCuºítRëryCou¡
 = 0;

863 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bThªadBusy
=
FALSE
;

864 
wSètus
 = 
NFCSTATUS_SUCCESS
;

866  
wSètus
;

867 
	}
}

886 
NFCSTATUS
 
	$phTmlNfc_IoCé
(
phTmlNfc_C⁄åﬁCode_t
 
eC⁄åﬁCode
)

888 
NFCSTATUS
 
wSètus
 = 
NFCSTATUS_SUCCESS
;

890 i‡(
NULL
 =
gµhTmlNfc_C⁄ãxt
)

892 
wSètus
 = 
NFCSTATUS_FAILED
;

896 
eC⁄åﬁCode
)

898 
phTmlNfc_e_Re£tDevi˚
:

901 
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 1);

902 
	`u¶ìp
(100 * 1000);

903 
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 0);

904 
	`u¶ìp
(100 * 1000);

905 
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 1);

908 
phTmlNfc_e_E«bÀN‹mÆMode
:

911 
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 0);

912 
	`u¶ìp
(10 * 1000);

913 
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
, 1);

914 
	`u¶ìp
(100 * 1000);

917 
phTmlNfc_e_E«bÀDow∆ﬂdMode
:

919 
	`phTmlNfc_C⁄figNciPktReTx
(
phTmlNfc_e_DißbÀRëøns
, 0);

920 ()
	`phTmlNfc_i2c_ª£t
(
gµhTmlNfc_C⁄ãxt
->
pDevH™dÀ
,2);

921 
	`u¶ìp
(100 * 1000);

926 
wSètus
 = 
NFCSTATUS_INVALID_PARAMETER
;

932  
wSètus
;

933 
	}
}

948 
	$phTmlNfc_De„ºedCÆl
(
uöçå_t
 
dwThªadId
, 
phLibNfc_Mesßge_t
 *
±W‹kîMsg
)

950 
öt32_t
 
bPo°Sètus
;

953 
	`£m_waô
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
);

954 
bPo°Sètus
 = 
	`phDÆ4Nfc_msg¢d
(
gµhTmlNfc_C⁄ãxt
->
dwCÆlbackThªadId
,

955 
±W‹kîMsg
,

958 
	`£m_po°
(&
gµhTmlNfc_C⁄ãxt
->
po°MsgSem≠h‹e
);

959 
	}
}

972 
	$phTmlNfc_RódDe„ºedCb
(*
pP¨ams
)

975 
phTmlNfc_Tønß˘Info_t
 *
pTønß˘i⁄Info
 = (phTmlNfc_Tønß˘Info_à*Ë
pP¨ams
;

978 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
bThªadBusy
 = 
FALSE
;

979 
gµhTmlNfc_C⁄ãxt
->
tRódInfo
.
	`pThªad_CÆlback
(gµhTmlNfc_C⁄ãxt->tRódInfo.
pC⁄ãxt
,

980 
pTønß˘i⁄Info
);

983 
	}
}

996 
	$phTmlNfc_WrôeDe„ºedCb
(*
pP¨ams
)

999 
phTmlNfc_Tønß˘Info_t
 *
pTønß˘i⁄Info
 = (phTmlNfc_Tønß˘Info_à*Ë
pP¨ams
;

1002 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
bThªadBusy
 = 
FALSE
;

1003 
gµhTmlNfc_C⁄ãxt
->
tWrôeInfo
.
	`pThªad_CÆlback
(gµhTmlNfc_C⁄ãxt->tWrôeInfo.
pC⁄ãxt
,

1004 
pTønß˘i⁄Info
);

1007 
	}
}

1009 
	$phTmlNfc_£t_‰agmíèti⁄_íabÀd
(
phTmlNfc_i2c‰agmíèti⁄_t
 
ªsu…
)

1012 
‰agmíèti⁄_íabÀd
 = 
ªsu…
;

1013 
	}
}

1015 
phTmlNfc_i2c‰agmíèti⁄_t
 
	$phTmlNfc_gë_‰agmíèti⁄_íabÀd
()

1017  
‰agmíèti⁄_íabÀd
;

1018 
	}
}

	@tml/phTmlNfc.h

26 #i‚de‡
PHTMLNFC_H


27 
	#PHTMLNFC_H


	)

29 
	~<phNfcComm⁄.h
>

35 
	#PH_TMLNFC_READ_MESSAGE
 (0xAA)

	)

41 
	#PH_TMLNFC_WRITE_MESSAGE
 (0x55)

	)

46 
	#PH_TMLNFC_RESETDEVICE
 (0x00008001)

	)

67 
	sphTmlNfc_Tønß˘Info


69 
NFCSTATUS
 
	mwSètus
;

70 
uöt8_t
 *
	mpBuff
;

71 
uöt16_t
 
	mwLígth
;

72 }
	tphTmlNfc_Tønß˘Info_t
;

80 (*
	tµhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
Ë(*
	tpC⁄ãxt
, 
	tphTmlNfc_Tønß˘Info_t
 *
	tpInfo
);

90 (*
	tµhTmlNfc_De„rFuncPoöãr_t
Ë(
	tuöt32_t
 
	tdwMsgPo°edThªad
,*
	tpP¨ams
);

99 
phTmlNfc_e_InvÆid
 = 0,

100 
phTmlNfc_e_Re£tDevi˚
 = 
PH_TMLNFC_RESETDEVICE
,

101 
phTmlNfc_e_E«bÀDow∆ﬂdMode
,

102 
phTmlNfc_e_E«bÀN‹mÆMode


103 } 
	tphTmlNfc_C⁄åﬁCode_t
 ;

112 
phTmlNfc_e_E«bÀRëøns
 = 0x00,

113 
phTmlNfc_e_DißbÀRëøns
 = 0x01

114 } 
	tphTmlNfc_C⁄figRëøns_t
 ;

120 
	sphTmlNfc_RódWrôeInfo


122 vﬁ©ûê
uöt8_t
 
bE«bÀ
;

123 
uöt8_t
 
bThªadBusy
;

125 
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
 
pThªad_CÆlback
;

126 *
pC⁄ãxt
;

127 
uöt8_t
 *
pBuf„r
;

128 
uöt16_t
 
wLígth
;

129 
NFCSTATUS
 
wW‹kSètus
;

130 } 
	tphTmlNfc_RódWrôeInfo_t
;

135 
	sphTmlNfc_C⁄ãxt


137 
±hªad_t
 
ªadîThªad
;

138 
±hªad_t
 
wrôîThªad
;

139 vﬁ©ûê
uöt8_t
 
bThªadD⁄e
;

140 
phTmlNfc_C⁄figRëøns_t
 
eC⁄fig
;

141 
uöt8_t
 
bRëryCou¡
;

142 
uöt8_t
 
bWrôeCbInvoked
;

143 
uöt32_t
 
dwTimîId
;

144 
phTmlNfc_RódWrôeInfo_t
 
tRódInfo
;

145 
phTmlNfc_RódWrôeInfo_t
 
tWrôeInfo
;

146 *
pDevH™dÀ
;

147 
uöçå_t
 
dwCÆlbackThªadId
;

148 
uöt8_t
 
bE«bÀCrc
;

149 
£m_t
 
rxSem≠h‹e
;

150 
£m_t
 
txSem≠h‹e
;

151 
£m_t
 
po°MsgSem≠h‹e
;

152 } 
	tphTmlNfc_C⁄ãxt_t
;

157 
	sphTmlNfc_C⁄fig


165 
öt8_t
 *
pDevName
;

169 
uöçå_t
 
dwGëMsgThªadId
;

173 
uöt32_t
 
dwBaudR©e
;

174 } 
	tphTmlNfc_C⁄fig_t
,*
	tµhTmlNfc_C⁄fig_t
;

180 
µhTmlNfc_De„rFuncPoöãr_t
 
pDef_ˇŒ
;

185 
uöt32_t
 
dwMsgPo°edThªad
;

189 * 
pP¨ams
;

190 } 
	tphTmlNfc_De„rMsg_t
;

194 
I2C_FRAGMENATATION_DISABLED
,

195 
I2C_FRAGMENTATION_ENABLED


196 } 
	tphTmlNfc_i2c‰agmíèti⁄_t
;

198 
NFCSTATUS
 
	`phTmlNfc_Inô
(
µhTmlNfc_C⁄fig_t
 
pC⁄fig
);

199 
NFCSTATUS
 
	`phTmlNfc_Shutdown
();

200 
NFCSTATUS
 
	`phTmlNfc_Wrôe
(
uöt8_t
 *
pBuf„r
, 
uöt16_t
 
wLígth
, 
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
 
pTmlWrôeCom∂ëe
, *
pC⁄ãxt
);

201 
NFCSTATUS
 
	`phTmlNfc_Ród
(
uöt8_t
 *
pBuf„r
, 
uöt16_t
 
wLígth
, 
µhTmlNfc_Tønß˘Com∂ëi⁄Cb_t
 
pTmlRódCom∂ëe
, *
pC⁄ãxt
);

202 
NFCSTATUS
 
	`phTmlNfc_WrôeAb‹t
();

203 
NFCSTATUS
 
	`phTmlNfc_RódAb‹t
();

204 
NFCSTATUS
 
	`phTmlNfc_IoCé
(
phTmlNfc_C⁄åﬁCode_t
 
eC⁄åﬁCode
);

205 
	`phTmlNfc_De„ºedCÆl
(
uöçå_t
 
dwThªadId
, 
phLibNfc_Mesßge_t
 *
±W‹kîMsg
);

206 
	`phTmlNfc_C⁄figNciPktReTx
–
phTmlNfc_C⁄figRëøns_t
 
eC⁄fig
, 
uöt8_t
 
bRëryCou¡
);

207 
	`phTmlNfc_£t_‰agmíèti⁄_íabÀd
(
phTmlNfc_i2c‰agmíèti⁄_t
 
íabÀ
);

208 
phTmlNfc_i2c‰agmíèti⁄_t
 
	`phTmlNfc_gë_‰agmíèti⁄_íabÀd
();

	@tml/phTmlNfc_i2c.c

23 
	~<h¨dw¨e/nfc.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<ãrmios.h
>

28 
	~<sys/io˘l.h
>

29 
	~<sys/£À˘.h
>

30 
	~<î∫o.h
>

32 
	~<phNxpLog.h
>

33 
	~<phTmlNfc_i2c.h
>

34 
	~<phNfcSètus.h
>

35 
	~<°rög.h
>

39 
	#CRC_LEN
 2

	)

40 
	#NORMAL_MODE_HEADER_LEN
 3

	)

41 
	#FW_DNLD_HEADER_LEN
 2

	)

42 
	#FW_DNLD_LEN_OFFSET
 1

	)

43 
	#NORMAL_MODE_LEN_OFFSET
 2

	)

44 
	#FRAGMENTSIZE_MAX
 512

	)

45 
boﬁ_t
 
	gbFwD∆dFœg
 = 
FALSE
;

58 
	$phTmlNfc_i2c_˛o£
(*
pDevH™dÀ
)

60 i‡(
NULL
 !
pDevH™dÀ
)

62 
	`˛o£
((
öçå_t
)
pDevH™dÀ
);

66 
	}
}

82 
NFCSTATUS
 
	$phTmlNfc_i2c_›í_™d_c⁄figuª
(
µhTmlNfc_C⁄fig_t
 
pC⁄fig
, ** 
pLökH™dÀ
)

84 
nH™dÀ
;

87 
	`NXPLOG_TML_D
("O≥nögÖ‹t=%s\n", 
pC⁄fig
->
pDevName
);

89 
nH™dÀ
 = 
	`›í
((c⁄° *)
pC⁄fig
->
pDevName
, 
O_RDWR
);

90 i‡(
nH™dÀ
 < 0)

92 
	`NXPLOG_TML_E
("_i2c_›í(ËFaûed:ÑëvÆ %x",
nH™dÀ
);

93 *
pLökH™dÀ
 = 
NULL
;

94  
NFCSTATUS_INVALID_DEVICE
;

97 *
pLökH™dÀ
 = (*Ë((
öçå_t
)
nH™dÀ
);

100 
	`phTmlNfc_i2c_ª£t
((*)((
öçå_t
)
nH™dÀ
), 1);

101 
	`u¶ìp
(100 * 1000);

102 
	`phTmlNfc_i2c_ª£t
((*)((
öçå_t
)
nH™dÀ
), 0);

103 
	`u¶ìp
(100 * 1000);

104 
	`phTmlNfc_i2c_ª£t
((*)((
öçå_t
)
nH™dÀ
), 1);

106  
NFCSTATUS_SUCCESS
;

107 
	}
}

123 
	$phTmlNfc_i2c_ªad
(*
pDevH™dÀ
, 
uöt8_t
 * 
pBuf„r
, 
nNbByãsToRód
)

125 
ªt_Ród
;

126 
ªt_Sñe˘
;

127 
numRód
 = 0;

128 
timevÆ
 
tv
;

129 
fd_£t
 
rfds
;

130 
uöt16_t
 
tŸÆBtyesToRód
 = 0;

132 
i
;

134 i‡(
NULL
 =
pDevH™dÀ
)

139 i‡(
FALSE
 =
bFwD∆dFœg
)

141 
tŸÆBtyesToRód
 = 
NORMAL_MODE_HEADER_LEN
;

145 
tŸÆBtyesToRód
 = 
FW_DNLD_HEADER_LEN
;

151 
	`FD_ZERO
(&
rfds
);

152 
	`FD_SET
((
öçå_t
Ë
pDevH™dÀ
, &
rfds
);

153 
tv
.
tv_£c
 = 2;

154 
tv
.
tv_u£c
 = 1;

156 
ªt_Sñe˘
 = 
	`£À˘
(()((
öçå_t
)
pDevH™dÀ
 + ()1), &
rfds
, 
NULL
, NULL, &
tv
);

157 i‡(
ªt_Sñe˘
 < 0)

159 
	`NXPLOG_TML_E
("i2¯£À˘(Ëî∫ÿ: %x",
î∫o
);

162 i‡(
ªt_Sñe˘
 == 0)

164 
	`NXPLOG_TML_E
("i2c select() Timeout");

169 
ªt_Ród
 = 
	`ªad
((
öçå_t
)
pDevH™dÀ
, 
pBuf„r
, 
tŸÆBtyesToRód
 - 
numRód
);

170 i‡(
ªt_Ród
 > 0)

172 
numRód
 +
ªt_Ród
;

174 i‡(
ªt_Ród
 == 0)

176 
	`NXPLOG_TML_E
("_i2c_read() [hdr]EOF");

181 
	`NXPLOG_TML_E
("_i2c_ªad(Ë[hdr]Éºnÿ: %x",
î∫o
);

185 i‡(
FALSE
 =
bFwD∆dFœg
)

187 
tŸÆBtyesToRód
 = 
NORMAL_MODE_HEADER_LEN
;

191 
tŸÆBtyesToRód
 = 
FW_DNLD_HEADER_LEN
;

194 if(
numRód
 < 
tŸÆBtyesToRód
)

196 
ªt_Ród
 = 
	`ªad
((
öçå_t
)
pDevH™dÀ
, 
pBuf„r
, 
tŸÆBtyesToRód
 - 
numRód
);

197 i‡(
ªt_Ród
 !
tŸÆBtyesToRód
 - 
numRód
)

199 
	`NXPLOG_TML_E
("_i2c_ªad(Ë[hdr]Éºnÿ: %x",
î∫o
);

204 
numRód
 +
ªt_Ród
;

207 if(
TRUE
 =
bFwD∆dFœg
)

209 
tŸÆBtyesToRód
 = 
pBuf„r
[
FW_DNLD_LEN_OFFSET
] + 
FW_DNLD_HEADER_LEN
 + 
CRC_LEN
;

213 
tŸÆBtyesToRód
 = 
pBuf„r
[
NORMAL_MODE_LEN_OFFSET
] + 
NORMAL_MODE_HEADER_LEN
;

215 
ªt_Ród
 = 
	`ªad
((
öçå_t
)
pDevH™dÀ
, (
pBuf„r
 + 
numRód
), 
tŸÆBtyesToRód
 -ÇumRead);

216 i‡(
ªt_Ród
 > 0)

218 
numRód
 +
ªt_Ród
;

220 i‡(
ªt_Ród
 == 0)

222 
	`NXPLOG_TML_E
("_i2c_read() [pyld] EOF");

227 
	`NXPLOG_TML_E
("_i2c_ªad(Ë[pyld]Éºnÿ: %x",
î∫o
);

228 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
 )

234  
numRód
;

235 
	}
}

251 
	$phTmlNfc_i2c_wrôe
(*
pDevH™dÀ
, 
uöt8_t
 * 
pBuf„r
, 
nNbByãsToWrôe
)

253 
ªt
;

254 
numWrŸe
 = 0;

255 
i
;

256 
numByãs
 = 
nNbByãsToWrôe
;

257 i‡(
NULL
 =
pDevH™dÀ
)

261 if(
‰agmíèti⁄_íabÀd
 =
I2C_FRAGMENATATION_DISABLED
 && 
nNbByãsToWrôe
 > 
FRAGMENTSIZE_MAX
)

263 
	`NXPLOG_TML_E
("i2c_write() dataÜargerÅhan maximum I2C size,enable I2C fragmentation");

266 
numWrŸe
 < 
nNbByãsToWrôe
)

268 if(
‰agmíèti⁄_íabÀd
 =
I2C_FRAGMENTATION_ENABLED
 && 
nNbByãsToWrôe
 > 
FRAGMENTSIZE_MAX
)

270 if(
nNbByãsToWrôe
 - 
numWrŸe
 > 
FRAGMENTSIZE_MAX
)

272 
numByãs
 = 
numWrŸe
+ 
FRAGMENTSIZE_MAX
;

274 
numByãs
 = 
nNbByãsToWrôe
;

278 
ªt
 = 
	`wrôe
((
öçå_t
)
pDevH™dÀ
, 
pBuf„r
 + 
numWrŸe
, 
numByãs
 -ÇumWrote);

279 i‡(
ªt
 > 0)

281 
numWrŸe
 +
ªt
;

282 if(
‰agmíèti⁄_íabÀd
 =
I2C_FRAGMENTATION_ENABLED
 && 
numWrŸe
 < 
nNbByãsToWrôe
)

284 
	`u¶ìp
(500);

287 i‡(
ªt
 == 0)

289 
	`NXPLOG_TML_E
("_i2c_write() EOF");

294 
	`NXPLOG_TML_E
("_i2c_wrôe(Ëî∫ÿ: %x",
î∫o
);

295 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

303  
numWrŸe
;

304 
	}
}

319 
	#PN544_SET_PWR
 
	`_IOW
(0xe9, 0x01, )

	)

320 
	$phTmlNfc_i2c_ª£t
(*
pDevH™dÀ
, 
Àvñ
)

322 
ªt
;

323 
	`NXPLOG_TML_D
("phTmlNfc_i2c_ª£t(), VENÜevñ %ld", 
Àvñ
);

325 i‡(
NULL
 =
pDevH™dÀ
)

330 
ªt
 = 
	`io˘l
((
öçå_t
)
pDevH™dÀ
, 
PN544_SET_PWR
, 
Àvñ
);

331 if(
Àvñ
 =2 && 
ªt
 == 0)

333 
bFwD∆dFœg
 = 
TRUE
;

335 
bFwD∆dFœg
 = 
FALSE
;

337  
ªt
;

338 
	}
}

350 
boﬁ_t
 
	$gëDow∆ﬂdFœg
()

353  
bFwD∆dFœg
;

354 
	}
}

	@tml/phTmlNfc_i2c.h

22 
	~<phNfcTy≥s.h
>

23 
	~<phTmlNfc.h
>

26 
phTmlNfc_i2c_˛o£
(*
pDevH™dÀ
);

27 
NFCSTATUS
 
phTmlNfc_i2c_›í_™d_c⁄figuª
(
µhTmlNfc_C⁄fig_t
 
pC⁄fig
, ** 
pLökH™dÀ
);

28 
phTmlNfc_i2c_ªad
(*
pDevH™dÀ
, 
uöt8_t
 * 
pBuf„r
, 
nNbByãsToRód
);

29 
phTmlNfc_i2c_wrôe
(*
pDevH™dÀ
,
uöt8_t
 * 
pBuf„r
, 
nNbByãsToWrôe
);

30 
phTmlNfc_i2c_ª£t
(*
pDevH™dÀ
,
Àvñ
);

31 
boﬁ_t
 
gëDow∆ﬂdFœg
();

32 
phTmlNfc_i2c‰agmíèti⁄_t
 
	g‰agmíèti⁄_íabÀd
;

	@utils/phNxpConfig.cpp

39 
	~<phNxpC⁄fig.h
>

40 
	~<°dio.h
>

41 
	~<°rög
>

42 
	~<ve˘‹
>

43 
	~<li°
>

44 
	~<sys/°©.h
>

46 
	~<phNxpLog.h
>

48 #i‡
GENERIC_TARGET


49 c⁄° 
	gÆã∫©ive_c⁄fig_∑th
[] = "/data/nfc/";

51 c⁄° 
	gÆã∫©ive_c⁄fig_∑th
[] = "";

55 c⁄° 
	gå™•‹t_c⁄fig_∑th
[] = "/etc/";

57 c⁄° 
	gå™•‹t_c⁄fig_∑th
[] = "res/";

60 
	#c⁄fig_«me
 "libnfc-nxp.c⁄f"

	)

61 
	#exåa_c⁄fig_ba£
 "libnfc-nxp-"

	)

62 
	#exåa_c⁄fig_ext
 ".c⁄f"

	)

63 
	#IsSåögVÆue
 0x80000000

	)

65 c⁄° 
	gc⁄fig_time°amp_∑th
[] = "/data/nfc/libnfc-nxpConfigState.bin";

67 
usög
 
	g«me•a˚
::
°d
;

69 ˛as†
	cCNfcP¨am
 : 
public
 
°rög


71 
public
:

72 
CNfcP¨am
();

73 
CNfcP¨am
(c⁄° * 
«me
, c⁄° 
°rög
& 
vÆue
);

74 
CNfcP¨am
(c⁄° * 
«me
, 
vÆue
);

75 
	mvútuÆ
 ~
CNfcP¨am
();

76 
	$numVÆue
(Ëc⁄° { 
m_numVÆue
;}

77 c⁄° * 
	$°r_vÆue
(Ëc⁄° { 
m_°r_vÆue
.
	`c_°r
();
	}
}

78 
size_t
 
	$°r_Àn
(Ëc⁄° { 
m_°r_vÆue
.
	`Àngth
();
	}
}

79 
	g¥iv©e
:

80 
°rög
 
m_°r_vÆue
;

81 
	gm_numVÆue
;

84 
˛ass
 
	gCNfcC⁄fig
 : 
public
 
ve˘‹
<c⁄° 
CNfcP¨am
*>

86 
public
:

87 
vútuÆ
 ~
CNfcC⁄fig
();

88 
	gCNfcC⁄fig
& 
GëIn°™˚
();

89 
‰õnd
 
ªadO±i⁄ÆC⁄fig
(c⁄° * 
›ti⁄Æ
);

90 
upd©eTime°amp
();

91 
checkTime°amp
();

93 
boﬁ
 
gëVÆue
(c⁄° * 
«me
, * 
pVÆue
, 
size_t
 
Àn
) const;

94 
boﬁ
 
gëVÆue
(c⁄° * 
«me
, & 
rVÆue
) const;

95 
boﬁ
 
gëVÆue
(c⁄° * 
«me
, & 
rVÆue
) const;

96 
boﬁ
 
gëVÆue
(c⁄° * 
«me
, * 
pVÆue
, 
Àn
,* 
ªadÀn
) const;

97 c⁄° 
CNfcP¨am
* 
föd
(c⁄° * 
p_«me
) const;

98 
˛ón
();

99 
	g¥iv©e
:

100 
CNfcC⁄fig
();

101 
boﬁ
 
ªadC⁄fig
(c⁄° * 
«me
, boﬁ 
bRe£tC⁄ã¡
);

102 
moveFromLi°
();

103 
moveToLi°
();

104 
add
(c⁄° 
CNfcP¨am
* 
pP¨am
);

105 
	gli°
<c⁄° 
	gCNfcP¨am
*> 
	gm_li°
;

106 
boﬁ
 
	gmVÆidFûe
;

107 
	gm_timeSèmp
;

109 
	g°©e
;

111 
ölöe
 
boﬁ
 
Is
(
f
Ë{ (
	g°©e
 & 
	gf
) == f;}

112 
ölöe
 
Së
(
f
Ë{
	g°©e
 |= f;}

113 
ölöe
 
Re£t
(
f
Ë{
	g°©e
 &= ~f;}

125 
ölöe
 
boﬁ
 
	$isPröèbÀ
(
c
)

127  (
c
 >= 'A' && c <= 'Z') ||

128 (
c
 >= 'a' && c <= 'z') ||

129 (
c
 >= '0' && c <= '9') ||

130 
c
 == '/' || c == '_' || c == '-' || c == '.';

131 
	}
}

142 
ölöe
 
boﬁ
 
	$isDigô
(
c
, 
ba£
)

144 i‡('0' <
c
 && c <= '9')

145  
åue
;

146 i‡(
ba£
 == 16)

148 i‡(('A' <
c
 && c <= 'F') ||

149 ('a' <
c
 && c <= 'f') )

150  
åue
;

152  
Ál£
;

153 
	}
}

164 
ölöe
 
	$gëDigôVÆue
(
c
, 
ba£
)

166 i‡('0' <
c
 && c <= '9')

167  
c
 - '0';

168 i‡(
ba£
 == 16)

170 i‡('A' <
c
 && c <= 'F')

171  
c
 - 'A' + 10;

172 i‡('a' <
c
 && c <= 'f')

173  
c
 - 'a' + 10;

176 
	}
}

188 
boﬁ
 
	gCNfcC⁄fig
::
	$ªadC⁄fig
(c⁄° * 
«me
, 
boﬁ
 
bRe£tC⁄ã¡
)

191 
BEGIN_LINE
 = 1,

192 
TOKEN
,

193 
STR_VALUE
,

194 
NUM_VALUE
,

195 
BEGIN_HEX
,

196 
BEGIN_QUOTE
,

197 
END_LINE


200 
FILE
* 
fd
;

201 
°©
 
buf
;

202 
°rög
 
tokí
;

203 
°rög
 
°rVÆue
;

204 
numVÆue
 = 0;

205 
CNfcP¨am
* 
pP¨am
 = 
NULL
;

206 
i
 = 0;

207 
ba£
 = 0;

208 
c
;

209 
bÊag
 = 0;

210 
°©e
 = 
BEGIN_LINE
;

212 i‡((
fd
 = 
	`f›í
(
«me
, "rb")Ë=
NULL
)

214 
	`ALOGE
("%†C™nŸ o≥¿c⁄fig fûê%s\n", 
__func__
, 
«me
);

215 i‡(
bRe£tC⁄ã¡
)

217 
	`ALOGE
("%†Usög deÁu… vÆuêf‹áŒ sëtögs\n", 
__func__
);

218 
mVÆidFûe
 = 
Ál£
;

220  
Ál£
;

222 
	`°©
(
«me
, &
buf
);

223 
m_timeSèmp
 = ()
buf
.
°_mtime
;

225 
mVÆidFûe
 = 
åue
;

226 i‡(
	`size
() > 0)

228 i‡(
bRe£tC⁄ã¡
)

229 
	`˛ón
();

231 
	`moveToLi°
();

234 !
	`„of
(
fd
Ë&& 
	`‰ód
(&
c
, 1, 1, fd) == 1)

236 
°©e
 & 0xff)

238 
BEGIN_LINE
:

239 i‡(
c
 == '#')

240 
°©e
 = 
END_LINE
;

241 i‡(
	`isPröèbÀ
(
c
))

243 
i
 = 0;

244 
tokí
.
	`îa£
();

245 
°rVÆue
.
	`îa£
();

246 
°©e
 = 
TOKEN
;

247 
tokí
.
	`push_back
(
c
);

250 
TOKEN
:

251 i‡(
c
 == '=')

253 
tokí
.
	`push_back
('\0');

254 
°©e
 = 
BEGIN_QUOTE
;

256 i‡(
	`isPröèbÀ
(
c
))

257 
tokí
.
	`push_back
(
c
);

259 
°©e
 = 
END_LINE
;

261 
BEGIN_QUOTE
:

262 i‡(
c
 == '"')

264 
°©e
 = 
STR_VALUE
;

265 
ba£
 = 0;

267 i‡(
c
 == '0')

268 
°©e
 = 
BEGIN_HEX
;

269 i‡(
	`isDigô
(
c
, 10))

271 
°©e
 = 
NUM_VALUE
;

272 
ba£
 = 10;

273 
numVÆue
 = 
	`gëDigôVÆue
(
c
, 
ba£
);

274 
i
 = 0;

276 i‡(
c
 == '{')

278 
°©e
 = 
NUM_VALUE
;

279 
bÊag
 = 1;

280 
ba£
 = 16;

281 
i
 = 0;

282 
	`Së
(
IsSåögVÆue
);

285 
°©e
 = 
END_LINE
;

287 
BEGIN_HEX
:

288 i‡(
c
 == 'x' || c == 'X')

290 
°©e
 = 
NUM_VALUE
;

291 
ba£
 = 16;

292 
numVÆue
 = 0;

293 
i
 = 0;

296 i‡(
	`isDigô
(
c
, 10))

298 
°©e
 = 
NUM_VALUE
;

299 
ba£
 = 10;

300 
numVÆue
 = 
	`gëDigôVÆue
(
c
, 
ba£
);

303 i‡(
c
 != '\n' && c != '\r')

305 
°©e
 = 
END_LINE
;

310 
NUM_VALUE
:

311 i‡(
	`isDigô
(
c
, 
ba£
))

313 
numVÆue
 *
ba£
;

314 
numVÆue
 +
	`gëDigôVÆue
(
c
, 
ba£
);

315 ++
i
;

317 if(
bÊag
 =1 && (
c
 == ' ' || c == '\r' || c=='\n' || c=='\t'))

321 i‡(
ba£
 =16 && (
c
== ','|| c == ':' || c == '-' || c == ' ' || c == '}'))

324 if–
c
=='}' )

326 
bÊag
 = 0;

328 i‡(
i
 > 0)

330 
n
 = (
i
+1) / 2;

331 
n
-- > 0)

333 
numVÆue
 =ÇumVÆuê>> (
n
 * 8);

334 
c
 = (
numVÆue
) & 0xFF;

335 
°rVÆue
.
	`push_back
(
c
);

339 
	`Së
(
IsSåögVÆue
);

340 
numVÆue
 = 0;

341 
i
 = 0;

345 i‡(
c
 == '\n' || c == '\r')

347 if(
bÊag
 == 0 )

349 
°©e
 = 
BEGIN_LINE
;

354 if–
bÊag
 == 0)

356 
°©e
 = 
END_LINE
;

359 i‡(
	`Is
(
IsSåögVÆue
Ë&& 
ba£
 =16 && 
i
 > 0)

361 
n
 = (
i
+1) / 2;

362 
n
-- > 0)

363 
°rVÆue
.
	`push_back
(((
numVÆue
 >> (
n
 * 8)) & 0xFF));

365 i‡(
°rVÆue
.
	`Àngth
() > 0)

366 
pP¨am
 = 
√w
 
	`CNfcP¨am
(
tokí
.
	`c_°r
(), 
°rVÆue
);

368 
pP¨am
 = 
√w
 
	`CNfcP¨am
(
tokí
.
	`c_°r
(), 
numVÆue
);

369 
	`add
(
pP¨am
);

370 
°rVÆue
.
	`îa£
();

371 
numVÆue
 = 0;

374 
STR_VALUE
:

375 i‡(
c
 == '"')

377 
°rVÆue
.
	`push_back
('\0');

378 
°©e
 = 
END_LINE
;

379 
pP¨am
 = 
√w
 
	`CNfcP¨am
(
tokí
.
	`c_°r
(), 
°rVÆue
);

380 
	`add
(
pP¨am
);

382 i‡(
	`isPröèbÀ
(
c
))

383 
°rVÆue
.
	`push_back
(
c
);

385 
END_LINE
:

386 i‡(
c
 == '\n' || c == '\r')

387 
°©e
 = 
BEGIN_LINE
;

394 
	`f˛o£
(
fd
);

396 
	`moveFromLi°
();

397  
	`size
() > 0;

398 
	}
}

409 
	gCNfcC⁄fig
::
	$CNfcC⁄fig
() :

410 
	`mVÆidFûe
(
åue
),

411 
	`m_timeSèmp
(0),

412 
	$°©e
(0)

414 
	}
}

425 
	gCNfcC⁄fig
::~
	$CNfcC⁄fig
()

427 
	}
}

438 
CNfcC⁄fig
& CNfcC⁄fig::
	$GëIn°™˚
()

440 
CNfcC⁄fig
 
theIn°™˚
;

442 i‡(
theIn°™˚
.
	`size
(Ë=0 &&ÅheIn°™˚.
mVÆidFûe
)

444 
°rög
 
°rP©h
;

445 i‡(
Æã∫©ive_c⁄fig_∑th
[0] != '\0')

447 
°rP©h
.
	`assign
(
Æã∫©ive_c⁄fig_∑th
);

448 
°rP©h
 +
c⁄fig_«me
;

449 
theIn°™˚
.
	`ªadC⁄fig
(
°rP©h
.
	`c_°r
(), 
åue
);

450 i‡(!
theIn°™˚
.
	`em±y
())

452  
theIn°™˚
;

455 
°rP©h
.
	`assign
(
å™•‹t_c⁄fig_∑th
);

456 
°rP©h
 +
c⁄fig_«me
;

457 
theIn°™˚
.
	`ªadC⁄fig
(
°rP©h
.
	`c_°r
(), 
åue
);

460  
theIn°™˚
;

461 
	}
}

473 
boﬁ
 
	gCNfcC⁄fig
::
	$gëVÆue
(c⁄° * 
«me
, * 
pVÆue
, 
size_t
 
Àn
) const

475 c⁄° 
CNfcP¨am
* 
pP¨am
 = 
	`föd
(
«me
);

476 i‡(
pP¨am
 =
NULL
)

477  
Ál£
;

479 i‡(
pP¨am
->
	`°r_Àn
() > 0)

481 
	`mem£t
(
pVÆue
, 0, 
Àn
);

482 
	`mem˝y
(
pVÆue
, 
pP¨am
->
	`°r_vÆue
(),ÖP¨am->
	`°r_Àn
());

483  
åue
;

485  
Ál£
;

486 
	}
}

488 
boﬁ
 
	gCNfcC⁄fig
::
	$gëVÆue
(c⁄° * 
«me
, * 
pVÆue
, 
Àn
,* 
ªadÀn
) const

490 c⁄° 
CNfcP¨am
* 
pP¨am
 = 
	`föd
(
«me
);

491 i‡(
pP¨am
 =
NULL
)

492  
Ál£
;

494 i‡(
pP¨am
->
	`°r_Àn
() > 0)

496 if(
pP¨am
->
	`°r_Àn
(Ë<()
Àn
)

498 
	`mem£t
(
pVÆue
, 0, 
Àn
);

499 
	`mem˝y
(
pVÆue
, 
pP¨am
->
	`°r_vÆue
(),ÖP¨am->
	`°r_Àn
());

500 *
ªadÀn
 = 
pP¨am
->
	`°r_Àn
();

504 *
ªadÀn
 = -1;

507  
åue
;

509  
Ál£
;

510 
	}
}

522 
boﬁ
 
	gCNfcC⁄fig
::
	$gëVÆue
(c⁄° * 
«me
, & 
rVÆue
) const

524 c⁄° 
CNfcP¨am
* 
pP¨am
 = 
	`föd
(
«me
);

525 i‡(
pP¨am
 =
NULL
)

526  
Ál£
;

528 i‡(
pP¨am
->
	`°r_Àn
() == 0)

530 
rVÆue
 = 
°©ic_ˇ°
<>(
pP¨am
->
	`numVÆue
());

531  
åue
;

533  
Ál£
;

534 
	}
}

546 
boﬁ
 
	gCNfcC⁄fig
::
	$gëVÆue
(c⁄° * 
«me
, & 
rVÆue
) const

548 c⁄° 
CNfcP¨am
* 
pP¨am
 = 
	`föd
(
«me
);

549 i‡(
pP¨am
 =
NULL
)

550  
Ál£
;

552 i‡(
pP¨am
->
	`°r_Àn
() == 0)

554 
rVÆue
 = 
°©ic_ˇ°
<>(
pP¨am
->
	`numVÆue
());

555  
åue
;

557  
Ál£
;

558 
	}
}

569 c⁄° 
CNfcP¨am
* 
	gCNfcC⁄fig
::
	$föd
(c⁄° * 
p_«me
) const

571 i‡(
	`size
() == 0)

572  
NULL
;

574 
c⁄°_ôî©‹
 
ô
 = 
	`begö
(), 
ôEnd
 = 
	`íd
(); it != itEnd; ++it)

576 i‡(**
ô
 < 
p_«me
)

580 i‡(**
ô
 =
p_«me
)

582 if((*
ô
)->
	`°r_Àn
() > 0)

584 
	`NXPLOG_EXTNS_D
("%†found %s=%s\n", 
__func__
, 
p_«me
, (*
ô
)->
	`°r_vÆue
());

588 
	`NXPLOG_EXTNS_D
("%†found %s=(0x%lx)\n", 
__func__
, 
p_«me
, (*
ô
)->
	`numVÆue
());

590  *
ô
;

595  
NULL
;

596 
	}
}

607 
	gCNfcC⁄fig
::
	$˛ón
()

609 i‡(
	`size
() == 0)

612 
ôî©‹
 
ô
 = 
	`begö
(), 
ôEnd
 = 
	`íd
(); it != itEnd; ++it)

613 
dñëe
 *
ô
;

614 
	`˛ór
();

615 
	}
}

626 
	gCNfcC⁄fig
::
	$add
(c⁄° 
CNfcP¨am
* 
pP¨am
)

628 i‡(
m_li°
.
	`size
() == 0)

630 
m_li°
.
	`push_back
(
pP¨am
);

633 
li°
<c⁄° 
CNfcP¨am
*>::
ôî©‹
 
ô
 = 
m_li°
.
	`begö
(), 
ôEnd
 = m_li°.
	`íd
(); it != itEnd; ++it)

635 i‡(**
ô
 < 
pP¨am
->
	`c_°r
())

637 
m_li°
.
	`ö£π
(
ô
, 
pP¨am
);

640 
m_li°
.
	`push_back
(
pP¨am
);

641 
	}
}

652 
	gCNfcC⁄fig
::
	$moveFromLi°
()

654 i‡(
m_li°
.
	`size
() == 0)

657 
li°
<c⁄° 
CNfcP¨am
*>::
ôî©‹
 
ô
 = 
m_li°
.
	`begö
(), 
ôEnd
 = m_li°.
	`íd
(); it != itEnd; ++it)

658 
	`push_back
(*
ô
);

659 
m_li°
.
	`˛ór
();

660 
	}
}

671 
	gCNfcC⁄fig
::
	$moveToLi°
()

673 i‡(
m_li°
.
	`size
() != 0)

674 
m_li°
.
	`˛ór
();

676 
ôî©‹
 
ô
 = 
	`begö
(), 
ôEnd
 = 
	`íd
(); it != itEnd; ++it)

677 
m_li°
.
	`push_back
(*
ô
);

678 
	`˛ór
();

679 
	}
}

691 
	gCNfcC⁄fig
::
	$checkTime°amp
()

693 
FILE
* 
fd
;

694 
°©
 
°
;

695 
vÆue
 = 0;

696 
ªt
 = 0;

698 if(
	`°©
(
c⁄fig_time°amp_∑th
, &
°
) != 0)

700 
	`ALOGD
("%†fûê%†nŸÉxi°, cª© it.\n", 
__func__
, 
c⁄fig_time°amp_∑th
);

701 i‡((
fd
 = 
	`f›í
(
c⁄fig_time°amp_∑th
, "w+")Ë!
NULL
)

703 
	`fwrôe
(&
m_timeSèmp
, (), 1, 
fd
);

704 
	`f˛o£
(
fd
);

710 
fd
 = 
	`f›í
(
c⁄fig_time°amp_∑th
, "r+");

711 if(
fd
 =
NULL
)

713 
	`ALOGE
("%†C™nŸ o≥¿fûê%s\n", 
__func__
, 
c⁄fig_time°amp_∑th
);

717 
	`‰ód
(&
vÆue
, (), 1, 
fd
);

718 
ªt
 = (
vÆue
 !
m_timeSèmp
);

719 if(
ªt
)

721 
	`f£ek
(
fd
, 0, 
SEEK_SET
);

722 
	`fwrôe
(&
m_timeSèmp
, (), 1, 
fd
);

724 
	`f˛o£
(
fd
);

726  
ªt
;

727 
	}
}

739 
	gCNfcC⁄fig
::
	$checkTime°amp
()

741 
FILE
* 
fd
;

742 
°©
 
°
;

743 
vÆue
 = 0;

744 
ªt
 = 0;

746 if(
	`°©
(
c⁄fig_time°amp_∑th
, &
°
) != 0)

748 
	`ALOGD
("%†fûênŸÉxi°.\n", 
__func__
);

753 
fd
 = 
	`f›í
(
c⁄fig_time°amp_∑th
, "r+");

754 if(
fd
 =
NULL
)

756 
	`ALOGE
("%†C™nŸ o≥¿fûê%s\n", 
__func__
, 
c⁄fig_time°amp_∑th
);

760 
	`‰ód
(&
vÆue
, (), 1, 
fd
);

761 
ªt
 = (
vÆue
 !
m_timeSèmp
);

762 
	`f˛o£
(
fd
);

764  
ªt
;

765 
	}
}

776 
	gCNfcC⁄fig
::
	$upd©eTime°amp
()

778 
FILE
* 
fd
;

779 
°©
 
°
;

780 
vÆue
 = 0;

781 
ªt
 = 0;

783 if(
	`°©
(
c⁄fig_time°amp_∑th
, &
°
) != 0)

785 
	`ALOGD
("%†fûê%†nŸÉxi°, cª© it.\n", 
__func__
, 
c⁄fig_time°amp_∑th
);

786 i‡((
fd
 = 
	`f›í
(
c⁄fig_time°amp_∑th
, "w+")Ë!
NULL
)

788 
	`fwrôe
(&
m_timeSèmp
, (), 1, 
fd
);

789 
	`f˛o£
(
fd
);

795 
fd
 = 
	`f›í
(
c⁄fig_time°amp_∑th
, "r+");

796 if(
fd
 =
NULL
)

798 
	`ALOGE
("%†C™nŸ o≥¿fûê%s\n", 
__func__
, 
c⁄fig_time°amp_∑th
);

802 
	`‰ód
(&
vÆue
, (), 1, 
fd
);

803 
ªt
 = (
vÆue
 !
m_timeSèmp
);

804 if(
ªt
)

806 
	`f£ek
(
fd
, 0, 
SEEK_SET
);

807 
	`fwrôe
(&
m_timeSèmp
, (), 1, 
fd
);

809 
	`f˛o£
(
fd
);

811  
ªt
;

812 
	}
}

823 
	gCNfcP¨am
::
	$CNfcP¨am
() :

824 
	$m_numVÆue
(0)

826 
	}
}

837 
CNfcP¨am
::~
	$CNfcP¨am
()

839 
	}
}

850 
CNfcP¨am
::
	$CNfcP¨am
(c⁄° * 
«me
, c⁄° 
°rög
& 
vÆue
) :

851 
	`°rög
(
«me
),

852 
	`m_°r_vÆue
(
vÆue
),

853 
	$m_numVÆue
(0)

855 
	}
}

866 
	gCNfcP¨am
::
	$CNfcP¨am
(c⁄° * 
«me
, 
vÆue
) :

867 
	`°rög
(
«me
),

868 
	$m_numVÆue
(
vÆue
)

870 
	}
}

881 "C" 
	$GëNxpSåVÆue
(c⁄° * 
«me
, * 
pVÆue
, 
Àn
)

883 
CNfcC⁄fig
& 
rC⁄fig
 = CNfcC⁄fig::
	`GëIn°™˚
();

885  
rC⁄fig
.
	`gëVÆue
(
«me
, 
pVÆue
, 
Àn
);

886 
	}
}

904 "C" 
	$GëNxpByãAºayVÆue
(c⁄° * 
«me
, * 
pVÆue
,
bufÊí
, *
Àn
)

906 
CNfcC⁄fig
& 
rC⁄fig
 = CNfcC⁄fig::
	`GëIn°™˚
();

908  
rC⁄fig
.
	`gëVÆue
(
«me
, 
pVÆue
, 
bufÊí
,
Àn
);

909 
	}
}

920 "C" 
	$GëNxpNumVÆue
(c⁄° * 
«me
, * 
pVÆue
, 
Àn
)

922 i‡(!
pVÆue
)

923  
Ál£
;

925 
CNfcC⁄fig
& 
rC⁄fig
 = CNfcC⁄fig::
	`GëIn°™˚
();

926 c⁄° 
CNfcP¨am
* 
pP¨am
 = 
rC⁄fig
.
	`föd
(
«me
);

928 i‡(
pP¨am
 =
NULL
)

929  
Ál£
;

930 
v
 = 
pP¨am
->
	`numVÆue
();

931 i‡(
v
 =0 && 
pP¨am
->
	`°r_Àn
() > 0 &&ÖParam->str_len() < 4)

933 c⁄° * 
p
 = (c⁄° *)
pP¨am
->
	`°r_vÆue
();

934 
i
 = 0 ; i < 
pP¨am
->
	`°r_Àn
(); ++i)

936 
v
 *= 256;

937 
v
 +*
p
++;

940 
Àn
)

943 *(
°©ic_ˇ°
<*>(
pVÆue
)Ë()
v
;

946 *(
°©ic_ˇ°
<*>(
pVÆue
)Ë()
v
;

949 *(
°©ic_ˇ°
<*> (
pVÆue
)Ë()
v
;

952  
Ál£
;

954  
åue
;

955 
	}
}

966 "C" 
	$ª£tNxpC⁄fig
()

969 
CNfcC⁄fig
& 
rC⁄fig
 = CNfcC⁄fig::
	`GëIn°™˚
();

971 
rC⁄fig
.
	`˛ón
();

972 
	}
}

983 
	$ªadO±i⁄ÆC⁄fig
(c⁄° * 
exåa
)

985 
°rög
 
°rP©h
;

986 
°rP©h
.
	`assign
(
å™•‹t_c⁄fig_∑th
);

987 i‡(
Æã∫©ive_c⁄fig_∑th
[0] != '\0')

988 
°rP©h
.
	`assign
(
Æã∫©ive_c⁄fig_∑th
);

990 
°rP©h
 +
exåa_c⁄fig_ba£
;

991 
°rP©h
 +
exåa
;

992 
°rP©h
 +
exåa_c⁄fig_ext
;

993 
CNfcC⁄fig
::
	`GëIn°™˚
().
	`ªadC⁄fig
(
°rP©h
.
	`c_°r
(), 
Ál£
);

994 
	}
}

1005 "C" 
	$isNxpC⁄figModifõd
()

1007 
CNfcC⁄fig
& 
rC⁄fig
 = CNfcC⁄fig::
	`GëIn°™˚
();

1008  
rC⁄fig
.
	`checkTime°amp
();

1009 
	}
}

1020 "C" 
	$upd©eNxpC⁄figTime°amp
()

1022 
CNfcC⁄fig
& 
rC⁄fig
 = CNfcC⁄fig::
	`GëIn°™˚
();

1023  
rC⁄fig
.
	`upd©eTime°amp
();

1024 
	}
}

	@utils/phNxpConfig.h

39 #i‚de‡
__CONFIG_H


40 
	#__CONFIG_H


	)

42 #ifde‡
__˝lu•lus


47 
GëNxpSåVÆue
(c⁄° * 
«me
, * 
p_vÆue
, 
Àn
);

48 
GëNxpNumVÆue
(c⁄° * 
«me
, * 
p_vÆue
, 
Àn
);

49 
GëNxpByãAºayVÆue
(c⁄° * 
«me
, * 
pVÆue
,
bufÊí
, *
Àn
);

50 
ª£tNxpC⁄fig
();

51 
isNxpC⁄figModifõd
();

52 
upd©eNxpC⁄figTime°amp
();

54 #ifde‡
__˝lu•lus


58 
	#NAME_NXPLOG_EXTNS_LOGLEVEL
 "NXPLOG_EXTNS_LOGLEVEL"

	)

59 
	#NAME_NXPLOG_NCIHAL_LOGLEVEL
 "NXPLOG_NCIHAL_LOGLEVEL"

	)

60 
	#NAME_NXPLOG_NCIX_LOGLEVEL
 "NXPLOG_NCIX_LOGLEVEL"

	)

61 
	#NAME_NXPLOG_NCIR_LOGLEVEL
 "NXPLOG_NCIR_LOGLEVEL"

	)

62 
	#NAME_NXPLOG_FWDNLD_LOGLEVEL
 "NXPLOG_FWDNLD_LOGLEVEL"

	)

63 
	#NAME_NXPLOG_TML_LOGLEVEL
 "NXPLOG_TML_LOGLEVEL"

	)

65 
	#NAME_MIFARE_READER_ENABLE
 "MIFARE_READER_ENABLE"

	)

66 
	#NAME_FW_STORAGE
 "FW_STORAGE"

	)

67 
	#NAME_NXP_FW_PROTECION_OVERRIDE
 "NXP_FW_PROTECION_OVERRIDE"

	)

68 
	#NAME_NXP_SYS_CLK_SRC_SEL
 "NXP_SYS_CLK_SRC_SEL"

	)

69 
	#NAME_NXP_SYS_CLK_FREQ_SEL
 "NXP_SYS_CLK_FREQ_SEL"

	)

70 
	#NAME_NXP_SYS_CLOCK_TO_CFG
 "NXP_SYS_CLOCK_TO_CFG"

	)

71 
	#NAME_NXP_ACT_PROP_EXTN
 "NXP_ACT_PROP_EXTN"

	)

72 
	#NAME_NXP_RF_CONF_BLK_1
 "NXP_RF_CONF_BLK_1"

	)

73 
	#NAME_NXP_RF_CONF_BLK_2
 "NXP_RF_CONF_BLK_2"

	)

74 
	#NAME_NXP_RF_CONF_BLK_3
 "NXP_RF_CONF_BLK_3"

	)

75 
	#NAME_NXP_RF_CONF_BLK_4
 "NXP_RF_CONF_BLK_4"

	)

76 
	#NAME_NXP_RF_CONF_BLK_5
 "NXP_RF_CONF_BLK_5"

	)

77 
	#NAME_NXP_RF_CONF_BLK_6
 "NXP_RF_CONF_BLK_6"

	)

78 
	#NAME_NXP_CORE_CONF_EXTN
 "NXP_CORE_CONF_EXTN"

	)

79 
	#NAME_NXP_CORE_CONF
 "NXP_CORE_CONF"

	)

80 
	#NAME_NXP_CORE_MFCKEY_SETTING
 "NXP_CORE_MFCKEY_SETTING"

	)

81 
	#NAME_NXP_CORE_STANDBY
 "NXP_CORE_STANDBY"

	)

82 
	#NAME_NXP_NFC_PROFILE_EXTN
 "NXP_NFC_PROFILE_EXTN"

	)

83 
	#NAME_NXP_SWP_FULL_PWR_ON
 "NXP_SWP_FULL_PWR_ON"

	)

84 
	#NAME_NXP_CORE_RF_FIELD
 "NXP_CORE_RF_FIELD"

	)

85 
	#NAME_NXP_I2C_FRAGMENTATION_ENABLED
 "NXP_I2C_FRAGMENTATION_ENABLED"

	)

86 
	#NAME_AID_MATCHING_PLATFORM
 "AID_MATCHING_PLATFORM"

	)

90 
	#deÁu…_°‹age_loˇti⁄
 "/d©a/nfc"

	)

	@utils/phNxpNciHal_utils.c

18 
	~<phNxpNciHÆ_utûs.h
>

19 
	~<î∫o.h
>

20 
	~<phNxpLog.h
>

33 
	$li°Inô
(
li°Hód
* 
pLi°
)

35 
pLi°
->
pFú°
 = 
NULL
;

36 i‡(
	`±hªad_muãx_öô
(&
pLi°
->
muãx
, 
NULL
) == -1)

38 
	`NXPLOG_NCIHAL_E
("Muãx cª©i⁄ faûed (î∫o=0x%08x)", 
î∫o
);

43 
	}
}

54 
	$li°De°roy
(
li°Hód
* 
pLi°
)

56 
bLi°NŸEm±y
 = 1;

57 
bLi°NŸEm±y
)

59 
bLi°NŸEm±y
 = 
	`li°GëAndRemoveNext
(
pLi°
, 
NULL
);

62 i‡(
	`±hªad_muãx_de°roy
(&
pLi°
->
muãx
) == -1)

64 
	`NXPLOG_NCIHAL_E
("Muãx de°ru˘i⁄ faûed (î∫o=0x%08x)", 
î∫o
);

69 
	}
}

80 
	$li°Add
(
li°Hód
* 
pLi°
, * 
pD©a
)

82 
li°Node
* 
pNode
;

83 
li°Node
* 
pLa°Node
;

84 
ªsu…
;

87 
pNode
 = (
li°Node
*Ë
	`mÆloc
((listNode));

88 i‡(
pNode
 =
NULL
)

90 
ªsu…
 = 0;

91 
	`NXPLOG_NCIHAL_E
("FailedÅo malloc");

92 
˛ón_™d_ªtu∫
;

94 
pNode
->
pD©a
 =ÖData;

95 
pNode
->
pNext
 = 
NULL
;

97 
	`±hªad_muãx_lock
(&
pLi°
->
muãx
);

100 i‡(
pLi°
->
pFú°
 =
NULL
)

103 
pLi°
->
pFú°
 = 
pNode
;

108 
pLa°Node
 = 
pLi°
->
pFú°
;

109 
pLa°Node
->
pNext
 !
NULL
)

111 
pLa°Node
 =ÖLa°Node->
pNext
;

115 
pLa°Node
->
pNext
 = 
pNode
;

118 
ªsu…
 = 1;

120 
˛ón_™d_ªtu∫
:

121 
	`±hªad_muãx_u∆ock
(&
pLi°
->
muãx
);

122  
ªsu…
;

123 
	}
}

134 
	$li°Remove
(
li°Hód
* 
pLi°
, * 
pD©a
)

136 
li°Node
* 
pNode
;

137 
li°Node
* 
pRemovedNode
;

138 
ªsu…
;

140 
	`±hªad_muãx_lock
(&
pLi°
->
muãx
);

142 i‡(
pLi°
->
pFú°
 =
NULL
)

145 
	`NXPLOG_NCIHAL_E
("FailedÅo deallocate (listÉmpty)");

146 
ªsu…
 = 0;

147 
˛ón_™d_ªtu∫
;

150 
pNode
 = 
pLi°
->
pFú°
;

151 i‡(
pLi°
->
pFú°
->
pD©a
 ==ÖData)

154 
pRemovedNode
 = 
pNode
;

157 
pLi°
->
pFú°
 =ÖLi°->pFú°->
pNext
;

161 
pNode
->
pNext
 !
NULL
)

163 i‡(
pNode
->
pNext
->
pD©a
 ==ÖData)

168 
pNode
 =ÖNode->
pNext
;

171 i‡(
pNode
->
pNext
 =
NULL
)

174 
ªsu…
 = 0;

175 
	`NXPLOG_NCIHAL_E
("FaûedÅÿdóŒoˇã (nŸ found %8p)", 
pD©a
);

176 
˛ón_™d_ªtu∫
;

180 
pRemovedNode
 = 
pNode
->
pNext
;

183 
pNode
->
pNext
 =ÖNode->pNext->pNext;

187 
	`‰ì
(
pRemovedNode
);

189 
ªsu…
 = 1;

191 
˛ón_™d_ªtu∫
:

192 
	`±hªad_muãx_u∆ock
(&
pLi°
->
muãx
);

193  
ªsu…
;

194 
	}
}

205 
	$li°GëAndRemoveNext
(
li°Hód
* 
pLi°
, ** 
µD©a
)

207 
li°Node
* 
pNode
;

208 
ªsu…
;

210 
	`±hªad_muãx_lock
(&
pLi°
->
muãx
);

212 i‡(
pLi°
->
pFú°
 =
NULL
)

215 
	`NXPLOG_NCIHAL_D
("FailedÅo deallocate (listÉmpty)");

216 
ªsu…
 = 0;

217 
˛ón_™d_ªtu∫
;

221 
pNode
 = 
pLi°
->
pFú°
;

224 i‡(
µD©a
 !
NULL
)

226 *
µD©a
 = 
pNode
->
pD©a
;

230 
pLi°
->
pFú°
 = 
pNode
->
pNext
;

231 
	`‰ì
(
pNode
);

233 
ªsu…
 = 1;

235 
˛ón_™d_ªtu∫
:

236 
	`li°Dump
(
pLi°
);

237 
	`±hªad_muãx_u∆ock
(&
pLi°
->
muãx
);

238  
ªsu…
;

239 
	}
}

250 
	$li°Dump
(
li°Hód
* 
pLi°
)

252 
li°Node
* 
pNode
 = 
pLi°
->
pFú°
;

254 
	`NXPLOG_NCIHAL_D
("Node dump:");

255 
pNode
 !
NULL
)

257 
	`NXPLOG_NCIHAL_D
("- %8∞(%8p)", 
pNode
,ÖNode->
pD©a
);

258 
pNode
 =ÖNode->
pNext
;

262 
	}
}

268 
phNxpNciHÆ_M⁄ô‹_t
 *
	gnx≤cihÆ_m⁄ô‹
 = 
NULL
;

279 
phNxpNciHÆ_M⁄ô‹_t
*

280 
	$phNxpNciHÆ_öô_m⁄ô‹
()

282 
	`NXPLOG_NCIHAL_D
("EnteringÖhNxpNciHal_init_monitor");

284 i‡(
nx≤cihÆ_m⁄ô‹
 =
NULL
)

286 
nx≤cihÆ_m⁄ô‹
 = (
phNxpNciHÆ_M⁄ô‹_t
 *Ë
	`mÆloc
(

287 (
phNxpNciHÆ_M⁄ô‹_t
));

290 i‡(
nx≤cihÆ_m⁄ô‹
 !
NULL
)

292 
	`mem£t
(
nx≤cihÆ_m⁄ô‹
, 0x00, (
phNxpNciHÆ_M⁄ô‹_t
));

294 i‡(
	`±hªad_muãx_öô
(&
nx≤cihÆ_m⁄ô‹
->
ªíå™˚_muãx
, 
NULL
)

297 
	`NXPLOG_NCIHAL_E
("ªíå™˚_muãx cª©i⁄Ñëu∫ed 0x%08x", 
î∫o
);

298 
˛ón_™d_ªtu∫
;

301 i‡(
	`±hªad_muãx_öô
(&
nx≤cihÆ_m⁄ô‹
->
c⁄cuºícy_muãx
, 
NULL
)

304 
	`NXPLOG_NCIHAL_E
("c⁄cuºícy_muãx cª©i⁄Ñëu∫ed 0x%08x", 
î∫o
);

305 
	`±hªad_muãx_de°roy
(&
nx≤cihÆ_m⁄ô‹
->
ªíå™˚_muãx
);

306 
˛ón_™d_ªtu∫
;

309 i‡(
	`li°Inô
(&
nx≤cihÆ_m⁄ô‹
->
£m_li°
) != 1)

311 
	`NXPLOG_NCIHAL_E
("Semaphore List creation failed");

312 
	`±hªad_muãx_de°roy
(&
nx≤cihÆ_m⁄ô‹
->
c⁄cuºícy_muãx
);

313 
	`±hªad_muãx_de°roy
(&
nx≤cihÆ_m⁄ô‹
->
ªíå™˚_muãx
);

314 
˛ón_™d_ªtu∫
;

319 
	`NXPLOG_NCIHAL_E
("nxphal_monitor creation failed");

320 
˛ón_™d_ªtu∫
;

323 
	`NXPLOG_NCIHAL_D
("Returning with SUCCESS");

325  
nx≤cihÆ_m⁄ô‹
;

327 
˛ón_™d_ªtu∫
:

328 
	`NXPLOG_NCIHAL_D
("Returning with FAILURE");

330 i‡(
nx≤cihÆ_m⁄ô‹
 !
NULL
)

332 
	`‰ì
(
nx≤cihÆ_m⁄ô‹
);

333 
nx≤cihÆ_m⁄ô‹
 = 
NULL
;

336  
NULL
;

337 
	}
}

348 
	$phNxpNciHÆ_˛ónup_m⁄ô‹
()

350 i‡(
nx≤cihÆ_m⁄ô‹
 !
NULL
)

352 
	`±hªad_muãx_de°roy
(&
nx≤cihÆ_m⁄ô‹
->
c⁄cuºícy_muãx
);

353 
	`REENTRANCE_UNLOCK
();

354 
	`±hªad_muãx_de°roy
(&
nx≤cihÆ_m⁄ô‹
->
ªíå™˚_muãx
);

355 
	`phNxpNciHÆ_ªÀa£Æl_cb_d©a
();

356 
	`li°De°roy
(&
nx≤cihÆ_m⁄ô‹
->
£m_li°
);

359 
	`‰ì
(
nx≤cihÆ_m⁄ô‹
);

360 
nx≤cihÆ_m⁄ô‹
 = 
NULL
;

363 
	}
}

374 
phNxpNciHÆ_M⁄ô‹_t
*

375 
	$phNxpNciHÆ_gë_m⁄ô‹
()

377  
nx≤cihÆ_m⁄ô‹
;

378 
	}
}

381 
NFCSTATUS
 
	$phNxpNciHÆ_öô_cb_d©a
(
phNxpNciHÆ_Sem_t
 *
pCÆlbackD©a
,

382 *
pC⁄ãxt
)

385 i‡(
	`£m_öô
(&
pCÆlbackD©a
->
£m
, 0, 0) == -1)

387 
	`NXPLOG_NCIHAL_E
("Sem≠h‹ê¸óti⁄ faûed (î∫o=0x%08x)", 
î∫o
);

388  
NFCSTATUS_FAILED
;

392 
pCÆlbackD©a
->
°©us
 = 
NFCSTATUS_FAILED
;

395 
pCÆlbackD©a
->
pC⁄ãxt
 =ÖContext;

398 i‡(
	`li°Add
(&
	`phNxpNciHÆ_gë_m⁄ô‹
()->
£m_li°
, 
pCÆlbackD©a
) != 1)

400 
	`NXPLOG_NCIHAL_E
("FailedÅoáddÅhe semaphoreÅoÅheÜist");

403  
NFCSTATUS_SUCCESS
;

404 
	}
}

415 
	$phNxpNciHÆ_˛ónup_cb_d©a
(
phNxpNciHÆ_Sem_t
* 
pCÆlbackD©a
)

418 i‡(
	`£m_de°roy
(&
pCÆlbackD©a
->
£m
))

420 
	`NXPLOG_NCIHAL_E
("phNxpNciHÆ_˛ónup_cb_d©a: FaûedÅÿde°roy sem≠h‹ê”ºno=0x%08x)", 
î∫o
);

424 i‡(
	`li°Remove
(&
	`phNxpNciHÆ_gë_m⁄ô‹
()->
£m_li°
, 
pCÆlbackD©a
) != 1)

426 
	`NXPLOG_NCIHAL_E
("phNxpNciHal_cleanup_cb_data: FailedÅoÑemove semaphore fromÅheÜist");

430 
	}
}

441 
	$phNxpNciHÆ_ªÀa£Æl_cb_d©a
()

443 
phNxpNciHÆ_Sem_t
* 
pCÆlbackD©a
;

445 
	`li°GëAndRemoveNext
(&
	`phNxpNciHÆ_gë_m⁄ô‹
()->
£m_li°
,

446 (**Ë&
pCÆlbackD©a
))

448 
pCÆlbackD©a
->
°©us
 = 
NFCSTATUS_FAILED
;

449 
	`£m_po°
(&
pCÆlbackD©a
->
£m
);

453 
	}
}

468 
	$phNxpNciHÆ_¥öt_∑ckë
(c⁄° *
pSåög
, c⁄° 
uöt8_t
 *
p_d©a
,

469 
uöt16_t
 
Àn
)

471 
uöt32_t
 
i
, 
j
;

472 
¥öt_buf„r
[
Àn
 * 3 + 1];

474 
	`mem£t
 (
¥öt_buf„r
, 0, (print_buffer));

475 
i
 = 0; i < 
Àn
; i++) {

476 
	`¢¥ötf
(&
¥öt_buf„r
[
i
 * 2], 3, "%02X", 
p_d©a
[i]);

478 if–0 =
	`memcmp
(
pSåög
,"SEND",0x04))

480 
	`NXPLOG_NCIX_D
("À¿%3d > %s", 
Àn
, 
¥öt_buf„r
);

482 if–0 =
	`memcmp
(
pSåög
,"RECV",0x04))

484 
	`NXPLOG_NCIR_D
("À¿%3d > %s", 
Àn
, 
¥öt_buf„r
);

488 
	}
}

501 
	$phNxpNciHÆ_emîgícy_ªcovîy
()

503 
	`NXPLOG_NCIHAL_E
("%s:áb‹t()", 
__FUNCTION__
);

505 
	}
}

	@utils/phNxpNciHal_utils.h

19 #i‚de‡
_PHNXPNCIHAL_UTILS_H_


20 
	#_PHNXPNCIHAL_UTILS_H_


	)

22 
	~<±hªad.h
>

23 
	~<£m≠h‹e.h
>

24 
	~<phNfcSètus.h
>

25 
	~<as£π.h
>

30 
	sli°Node


32 * 
	mpD©a
;

33 
li°Node
* 
	mpNext
;

36 
	sli°Hód


38 
li°Node
* 
	mpFú°
;

39 
±hªad_muãx_t
 
	mmuãx
;

44 
	sphNxpNciHÆ_Sem


47 
£m_t
 
	m£m
;

50 
NFCSTATUS
 
	m°©us
;

53 * 
	mpC⁄ãxt
;

55 } 
	tphNxpNciHÆ_Sem_t
;

58 
	#SEM_WAIT
(
cb_d©a
Ë
	`£m_waô
(&((cb_d©a).
£m
))

	)

59 
	#SEM_POST
(
p_cb_d©a
Ë
	`£m_po°
(&(’_cb_d©a)->
£m
))

	)

62 
	sphNxpNciHÆ_M⁄ô‹


65 
±hªad_muãx_t
 
	mªíå™˚_muãx
;

68 
±hªad_muãx_t
 
	mc⁄cuºícy_muãx
;

71 
li°Hód
 
	m£m_li°
;

73 } 
	tphNxpNciHÆ_M⁄ô‹_t
;

77 
li°Inô
(
li°Hód
* 
pLi°
);

78 
li°De°roy
(
li°Hód
* 
pLi°
);

79 
li°Add
(
li°Hód
* 
pLi°
, * 
pD©a
);

80 
li°Remove
(
li°Hód
* 
pLi°
, * 
pD©a
);

81 
li°GëAndRemoveNext
(
li°Hód
* 
pLi°
, ** 
µD©a
);

82 
li°Dump
(
li°Hód
* 
pLi°
);

85 
phNxpNciHÆ_M⁄ô‹_t
* 
phNxpNciHÆ_öô_m⁄ô‹
();

86 
phNxpNciHÆ_˛ónup_m⁄ô‹
();

87 
phNxpNciHÆ_M⁄ô‹_t
* 
phNxpNciHÆ_gë_m⁄ô‹
();

88 
NFCSTATUS
 
phNxpNciHÆ_öô_cb_d©a
(
phNxpNciHÆ_Sem_t
 *
pCÆlbackD©a
,

89 *
pC⁄ãxt
);

90 
phNxpNciHÆ_˛ónup_cb_d©a
(
phNxpNciHÆ_Sem_t
* 
pCÆlbackD©a
);

91 
phNxpNciHÆ_ªÀa£Æl_cb_d©a
();

92 
phNxpNciHÆ_¥öt_∑ckë
(c⁄° *
pSåög
, c⁄° 
uöt8_t
 *
p_d©a
,

93 
uöt16_t
 
Àn
);

94 
phNxpNciHÆ_emîgícy_ªcovîy
();

97 
	#REENTRANCE_LOCK
(Ëi‡(
	`phNxpNciHÆ_gë_m⁄ô‹
()Ë
	`±hªad_muãx_lock
(&phNxpNciHÆ_gë_m⁄ô‹()->
ªíå™˚_muãx
)

	)

98 
	#REENTRANCE_UNLOCK
(Ëi‡(
	`phNxpNciHÆ_gë_m⁄ô‹
()Ë
	`±hªad_muãx_u∆ock
(&phNxpNciHÆ_gë_m⁄ô‹()->
ªíå™˚_muãx
)

	)

99 
	#CONCURRENCY_LOCK
(Ëi‡(
	`phNxpNciHÆ_gë_m⁄ô‹
()Ë
	`±hªad_muãx_lock
(&phNxpNciHÆ_gë_m⁄ô‹()->
c⁄cuºícy_muãx
)

	)

100 
	#CONCURRENCY_UNLOCK
(Ëi‡(
	`phNxpNciHÆ_gë_m⁄ô‹
()Ë
	`±hªad_muãx_u∆ock
(&phNxpNciHÆ_gë_m⁄ô‹()->
c⁄cuºícy_muãx
)

	)

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/linux/ipc.h

1 #i‚de‡
_LINUX_IPC_H


2 
	#_LINUX_IPC_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

9 
	sùc_≥rm


11 
__kî√l_key_t
 
	mkey
;

12 
__kî√l_uid_t
 
	muid
;

13 
__kî√l_gid_t
 
	mgid
;

14 
__kî√l_uid_t
 
	mcuid
;

15 
__kî√l_gid_t
 
	mcgid
;

16 
__kî√l_mode_t
 
	mmode
;

17 
	m£q
;

21 
	~<asm/ùcbuf.h
>

24 
	#IPC_CREAT
 00001000

	)

25 
	#IPC_EXCL
 00002000

	)

26 
	#IPC_NOWAIT
 00004000

	)

31 
	#IPC_DIPC
 00010000

	)

32 
	#IPC_OWN
 00020000

	)

38 
	#IPC_RMID
 0

	)

39 
	#IPC_SET
 1

	)

40 
	#IPC_STAT
 2

	)

41 
	#IPC_INFO
 3

	)

47 
	#IPC_OLD
 0

	)

49 
	#IPC_64
 0x0100

	)

57 
	sùc_kludge
 {

58 
msgbuf
 *
	mmsgp
;

59 
	mmsgtyp
;

62 
	#SEMOP
 1

	)

63 
	#SEMGET
 2

	)

64 
	#SEMCTL
 3

	)

65 
	#SEMTIMEDOP
 4

	)

66 
	#MSGSND
 11

	)

67 
	#MSGRCV
 12

	)

68 
	#MSGGET
 13

	)

69 
	#MSGCTL
 14

	)

70 
	#SHMAT
 21

	)

71 
	#SHMDT
 22

	)

72 
	#SHMGET
 23

	)

73 
	#SHMCTL
 24

	)

76 
	#DIPC
 25

	)

78 
	#IPCCALL
(
vîsi⁄
,
›
Ë((vîsi⁄)<<16 | (›))

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/ipcbuf.h

1 
	~<asm-gíîic/ùcbuf.h
>

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dlfcn.h

20 #i‚de‡
_DLFCN_H


25 
	#RTLD_LAZY
 0x00001

	)

26 
	#RTLD_NOW
 0x00002

	)

27 
	#RTLD_BINDING_MASK
 0x3

	)

28 
	#RTLD_NOLOAD
 0x00004

	)

29 
	#RTLD_DEEPBIND
 0x00008

	)

34 
	#RTLD_GLOBAL
 0x00100

	)

39 
	#RTLD_LOCAL
 0

	)

42 
	#RTLD_NODELETE
 0x01000

	)

44 #ifde‡
__USE_GNU


55 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

56 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

58 
__BEGIN_DECLS


61 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

57 
	#O_PATH
 010000000

	)

63 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


64 
	#O_DSYNC
 010000

	)

65 
	#O_RSYNC
 
O_SYNC


	)

68 #ifde‡
__USE_LARGEFILE64


69 #i‡
__WORDSIZE
 == 64

70 
	#O_LARGEFILE
 0

	)

72 
	#O_LARGEFILE
 0100000

	)

77 
	#F_DUPFD
 0

	)

78 
	#F_GETFD
 1

	)

79 
	#F_SETFD
 2

	)

80 
	#F_GETFL
 3

	)

81 
	#F_SETFL
 4

	)

82 #i‡
__WORDSIZE
 == 64

83 
	#F_GETLK
 5

	)

84 
	#F_SETLK
 6

	)

85 
	#F_SETLKW
 7

	)

87 
	#F_GETLK64
 5

	)

88 
	#F_SETLK64
 6

	)

89 
	#F_SETLKW64
 7

	)

91 #i‚de‡
__USE_FILE_OFFSET64


92 
	#F_GETLK
 5

	)

93 
	#F_SETLK
 6

	)

94 
	#F_SETLKW
 7

	)

96 
	#F_GETLK
 
F_GETLK64


	)

97 
	#F_SETLK
 
F_SETLK64


	)

98 
	#F_SETLKW
 
F_SETLKW64


	)

100 
	#F_GETLK64
 12

	)

101 
	#F_SETLK64
 13

	)

102 
	#F_SETLKW64
 14

	)

105 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


106 
	#F_SETOWN
 8

	)

107 
	#F_GETOWN
 9

	)

110 #ifde‡
__USE_GNU


111 
	#F_SETSIG
 10

	)

112 
	#F_GETSIG
 11

	)

113 
	#F_SETOWN_EX
 15

	)

114 
	#F_GETOWN_EX
 16

	)

117 #ifde‡
__USE_GNU


118 
	#F_SETLEASE
 1024

	)

119 
	#F_GETLEASE
 1025

	)

120 
	#F_NOTIFY
 1026

	)

121 
	#F_SETPIPE_SZ
 1031

	)

122 
	#F_GETPIPE_SZ
 1032

	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#F_DUPFD_CLOEXEC
 1030

	)

130 
	#FD_CLOEXEC
 1

	)

133 
	#F_RDLCK
 0

	)

134 
	#F_WRLCK
 1

	)

135 
	#F_UNLCK
 2

	)

138 
	#F_EXLCK
 4

	)

139 
	#F_SHLCK
 8

	)

141 #ifde‡
__USE_BSD


143 
	#LOCK_SH
 1

	)

144 
	#LOCK_EX
 2

	)

145 
	#LOCK_NB
 4

	)

147 
	#LOCK_UN
 8

	)

150 #ifde‡
__USE_GNU


151 
	#LOCK_MAND
 32

	)

152 
	#LOCK_READ
 64

	)

153 
	#LOCK_WRITE
 128

	)

154 
	#LOCK_RW
 192

	)

157 #ifde‡
__USE_GNU


159 
	#DN_ACCESS
 0x00000001

	)

160 
	#DN_MODIFY
 0x00000002

	)

161 
	#DN_CREATE
 0x00000004

	)

162 
	#DN_DELETE
 0x00000008

	)

163 
	#DN_RENAME
 0x00000010

	)

164 
	#DN_ATTRIB
 0x00000020

	)

165 
	#DN_MULTISHOT
 0x80000000

	)

168 
	sÊock


170 
	ml_ty≥
;

171 
	ml_whí˚
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
__off_t
 
	ml_°¨t
;

174 
__off_t
 
	ml_Àn
;

176 
__off64_t
 
	ml_°¨t
;

177 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

182 #ifde‡
__USE_LARGEFILE64


183 
	sÊock64


185 
	ml_ty≥
;

186 
	ml_whí˚
;

187 
__off64_t
 
	ml_°¨t
;

188 
__off64_t
 
	ml_Àn
;

189 
__pid_t
 
	ml_pid
;

193 #ifde‡
__USE_GNU


195 
	e__pid_ty≥


197 
	mF_OWNER_TID
 = 0,

198 
	mF_OWNER_PID
,

199 
	mF_OWNER_PGRP
,

200 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


204 
	sf_ow√r_ex


206 
__pid_ty≥
 
	mty≥
;

207 
__pid_t
 
	mpid
;

213 #ifdef 
__USE_BSD


214 
	#FAPPEND
 
O_APPEND


	)

215 
	#FFSYNC
 
O_FSYNC


	)

216 
	#FASYNC
 
O_ASYNC


	)

217 
	#FNONBLOCK
 
O_NONBLOCK


	)

218 
	#FNDELAY
 
O_NDELAY


	)

222 #ifde‡
__USE_XOPEN2K


223 
	#POSIX_FADV_NORMAL
 0

	)

224 
	#POSIX_FADV_RANDOM
 1

	)

225 
	#POSIX_FADV_SEQUENTIAL
 2

	)

226 
	#POSIX_FADV_WILLNEED
 3

	)

227 
	#POSIX_FADV_DONTNEED
 4

	)

228 
	#POSIX_FADV_NOREUSE
 5

	)

232 #ifde‡
__USE_GNU


234 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

237 
	#SYNC_FILE_RANGE_WRITE
 2

	)

240 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

245 
	#SPLICE_F_MOVE
 1

	)

246 
	#SPLICE_F_NONBLOCK
 2

	)

249 
	#SPLICE_F_MORE
 4

	)

250 
	#SPLICE_F_GIFT
 8

	)

254 
	sfûe_h™dÀ


256 
	mh™dÀ_byãs
;

257 
	mh™dÀ_ty≥
;

259 
	mf_h™dÀ
[0];

263 
	#MAX_HANDLE_SZ
 128

	)

267 #ifde‡
__USE_ATFILE


268 
	#AT_FDCWD
 -100

	)

271 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

272 
	#AT_REMOVEDIR
 0x200

	)

274 
	#AT_SYMLINK_FOLLOW
 0x400

	)

275 
	#AT_NO_AUTOMOUNT
 0x800

	)

277 
	#AT_EMPTY_PATH
 0x1000

	)

278 
	#AT_EACCESS
 0x200

	)

282 
	g__BEGIN_DECLS


284 #ifde‡
__USE_GNU


287 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

288 
__THROW
;

295 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

296 
__Êags
);

303 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

304 
size_t
 
__cou¡
, 
__Êags
);

310 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

311 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

312 
__Êags
);

318 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

319 
__Êags
);

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

330 
__off64_t
 
__Àn
),

331 
ÁŒoˇã64
);

333 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

336 #ifde‡
__USE_LARGEFILE64


337 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

338 
__off64_t
 
__Àn
);

343 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

344 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

345 
__Êags
Ë
__THROW
;

351 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

352 
__Êags
);

356 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


24 
	~<bôs/w‹dsize.h
>

26 #i‡
__WORDSIZE
 == 64

27 
	#__SIZEOF_SEM_T
 32

	)

29 
	#__SIZEOF_SEM_T
 16

	)

34 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

39 
	m__size
[
__SIZEOF_SEM_T
];

40 
	m__Æign
;

41 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

20 #i‚de‡
_TERMIOS_H


24 
	tcc_t
;

25 
	t•ìd_t
;

26 
	ttcÊag_t
;

28 
	#NCCS
 32

	)

29 
	sãrmios


31 
tcÊag_t
 
	mc_iÊag
;

32 
tcÊag_t
 
	mc_oÊag
;

33 
tcÊag_t
 
	mc_cÊag
;

34 
tcÊag_t
 
	mc_lÊag
;

35 
cc_t
 
	mc_löe
;

36 
cc_t
 
	mc_cc
[
NCCS
];

37 
•ìd_t
 
	mc_i•ìd
;

38 
•ìd_t
 
	mc_o•ìd
;

39 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

40 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

44 
	#VINTR
 0

	)

45 
	#VQUIT
 1

	)

46 
	#VERASE
 2

	)

47 
	#VKILL
 3

	)

48 
	#VEOF
 4

	)

49 
	#VTIME
 5

	)

50 
	#VMIN
 6

	)

51 
	#VSWTC
 7

	)

52 
	#VSTART
 8

	)

53 
	#VSTOP
 9

	)

54 
	#VSUSP
 10

	)

55 
	#VEOL
 11

	)

56 
	#VREPRINT
 12

	)

57 
	#VDISCARD
 13

	)

58 
	#VWERASE
 14

	)

59 
	#VLNEXT
 15

	)

60 
	#VEOL2
 16

	)

63 
	#IGNBRK
 0000001

	)

64 
	#BRKINT
 0000002

	)

65 
	#IGNPAR
 0000004

	)

66 
	#PARMRK
 0000010

	)

67 
	#INPCK
 0000020

	)

68 
	#ISTRIP
 0000040

	)

69 
	#INLCR
 0000100

	)

70 
	#IGNCR
 0000200

	)

71 
	#ICRNL
 0000400

	)

72 
	#IUCLC
 0001000

	)

73 
	#IXON
 0002000

	)

74 
	#IXANY
 0004000

	)

75 
	#IXOFF
 0010000

	)

76 
	#IMAXBEL
 0020000

	)

77 
	#IUTF8
 0040000

	)

80 
	#OPOST
 0000001

	)

81 
	#OLCUC
 0000002

	)

82 
	#ONLCR
 0000004

	)

83 
	#OCRNL
 0000010

	)

84 
	#ONOCR
 0000020

	)

85 
	#ONLRET
 0000040

	)

86 
	#OFILL
 0000100

	)

87 
	#OFDEL
 0000200

	)

88 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


89 
	#NLDLY
 0000400

	)

90 
	#NL0
 0000000

	)

91 
	#NL1
 0000400

	)

92 
	#CRDLY
 0003000

	)

93 
	#CR0
 0000000

	)

94 
	#CR1
 0001000

	)

95 
	#CR2
 0002000

	)

96 
	#CR3
 0003000

	)

97 
	#TABDLY
 0014000

	)

98 
	#TAB0
 0000000

	)

99 
	#TAB1
 0004000

	)

100 
	#TAB2
 0010000

	)

101 
	#TAB3
 0014000

	)

102 
	#BSDLY
 0020000

	)

103 
	#BS0
 0000000

	)

104 
	#BS1
 0020000

	)

105 
	#FFDLY
 0100000

	)

106 
	#FF0
 0000000

	)

107 
	#FF1
 0100000

	)

110 
	#VTDLY
 0040000

	)

111 
	#VT0
 0000000

	)

112 
	#VT1
 0040000

	)

114 #ifde‡
__USE_MISC


115 
	#XTABS
 0014000

	)

119 #ifde‡
__USE_MISC


120 
	#CBAUD
 0010017

	)

122 
	#B0
 0000000

	)

123 
	#B50
 0000001

	)

124 
	#B75
 0000002

	)

125 
	#B110
 0000003

	)

126 
	#B134
 0000004

	)

127 
	#B150
 0000005

	)

128 
	#B200
 0000006

	)

129 
	#B300
 0000007

	)

130 
	#B600
 0000010

	)

131 
	#B1200
 0000011

	)

132 
	#B1800
 0000012

	)

133 
	#B2400
 0000013

	)

134 
	#B4800
 0000014

	)

135 
	#B9600
 0000015

	)

136 
	#B19200
 0000016

	)

137 
	#B38400
 0000017

	)

138 #ifde‡
__USE_MISC


139 
	#EXTA
 
B19200


	)

140 
	#EXTB
 
B38400


	)

142 
	#CSIZE
 0000060

	)

143 
	#CS5
 0000000

	)

144 
	#CS6
 0000020

	)

145 
	#CS7
 0000040

	)

146 
	#CS8
 0000060

	)

147 
	#CSTOPB
 0000100

	)

148 
	#CREAD
 0000200

	)

149 
	#PARENB
 0000400

	)

150 
	#PARODD
 0001000

	)

151 
	#HUPCL
 0002000

	)

152 
	#CLOCAL
 0004000

	)

153 #ifde‡
__USE_MISC


154 
	#CBAUDEX
 0010000

	)

156 
	#B57600
 0010001

	)

157 
	#B115200
 0010002

	)

158 
	#B230400
 0010003

	)

159 
	#B460800
 0010004

	)

160 
	#B500000
 0010005

	)

161 
	#B576000
 0010006

	)

162 
	#B921600
 0010007

	)

163 
	#B1000000
 0010010

	)

164 
	#B1152000
 0010011

	)

165 
	#B1500000
 0010012

	)

166 
	#B2000000
 0010013

	)

167 
	#B2500000
 0010014

	)

168 
	#B3000000
 0010015

	)

169 
	#B3500000
 0010016

	)

170 
	#B4000000
 0010017

	)

171 
	#__MAX_BAUD
 
B4000000


	)

172 #ifde‡
__USE_MISC


173 
	#CIBAUD
 002003600000

	)

174 
	#CMSPAR
 010000000000

	)

175 
	#CRTSCTS
 020000000000

	)

179 
	#ISIG
 0000001

	)

180 
	#ICANON
 0000002

	)

181 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


182 
	#XCASE
 0000004

	)

184 
	#ECHO
 0000010

	)

185 
	#ECHOE
 0000020

	)

186 
	#ECHOK
 0000040

	)

187 
	#ECHONL
 0000100

	)

188 
	#NOFLSH
 0000200

	)

189 
	#TOSTOP
 0000400

	)

190 #ifde‡
__USE_MISC


191 
	#ECHOCTL
 0001000

	)

192 
	#ECHOPRT
 0002000

	)

193 
	#ECHOKE
 0004000

	)

194 
	#FLUSHO
 0010000

	)

195 
	#PENDIN
 0040000

	)

197 
	#IEXTEN
 0100000

	)

198 #ifde‡
__USE_BSD


199 
	#EXTPROC
 0200000

	)

203 
	#TCOOFF
 0

	)

204 
	#TCOON
 1

	)

205 
	#TCIOFF
 2

	)

206 
	#TCION
 3

	)

209 
	#TCIFLUSH
 0

	)

210 
	#TCOFLUSH
 1

	)

211 
	#TCIOFLUSH
 2

	)

214 
	#TCSANOW
 0

	)

215 
	#TCSADRAIN
 1

	)

216 
	#TCSAFLUSH
 2

	)

219 
	#_IOT_ãrmios
 \

220 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/ipcbuf.h

1 #i‚de‡
__ASM_GENERIC_IPCBUF_H


2 
	#__ASM_GENERIC_IPCBUF_H


	)

19 
	sùc64_≥rm
 {

20 
__kî√l_key_t
 
	mkey
;

21 
__kî√l_uid32_t
 
	muid
;

22 
__kî√l_gid32_t
 
	mgid
;

23 
__kî√l_uid32_t
 
	mcuid
;

24 
__kî√l_gid32_t
 
	mcgid
;

25 
__kî√l_mode_t
 
	mmode
;

27 
	m__∑d1
[4 - (
__kî√l_mode_t
)];

28 
	m£q
;

29 
	m__∑d2
;

30 
	m__unu£d1
;

31 
	m__unu£d2
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_GNU


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

97 
__END_DECLS


101 #i‡!
deföed
 
__deföed_sched∑øm
 \

102 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

103 
	#__deföed_sched∑øm
 1

	)

105 
	s__sched_∑øm


107 
__sched_¥i‹ôy
;

109 #unde‡
__√ed_sched∑øm


113 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


114 
	#__˝u_£t_t_deföed


	)

116 
	#__CPU_SETSIZE
 1024

	)

117 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

120 
	t__˝u_mask
;

123 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

124 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

129 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

130 } 
	t˝u_£t_t
;

133 #i‡
	`__GNUC_PREREQ
 (2, 91)

134 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

137 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

139 
size_t
 
__i
; \

140 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

141 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

142 
__i
 = 0; __ò< 
__imax
; ++__i) \

143 
__bôs
[
__i
] = 0; \

144 
	}
} 0)

	)

146 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 |
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 &~
	`__CPUMASK
 (
__˝u
)) \

159 : 0; }))

	)

160 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

161 (
__exãnsi⁄__
 \

162 ({ 
size_t
 
__˝u
 = (
˝u
); \

163 
__˝u
 < 8 * (
£tsize
) \

164 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

165 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

166 : 0; }))

	)

168 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

169 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

171 #i‡
__GNUC_PREREQ
 (2, 91)

172 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

173 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

175 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

176 (
__exãnsi⁄__
 \

177 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

178 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

179 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

180 
size_t
 
__i
; \

181 
__i
 = 0; __ò< 
__imax
; ++__i) \

182 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

184 
__i
 =
__imax
; }))

	)

187 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

188 (
__exãnsi⁄__
 \

189 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

190 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

191 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

192 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

193 
size_t
 
__i
; \

194 
__i
 = 0; __ò< 
__imax
; ++__i) \

195 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

196 
__de°
; }))

	)

198 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

199 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

200 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

201 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

203 
__BEGIN_DECLS


205 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

206 
__THROW
;

207 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

208 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

210 
__END_DECLS


	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

52 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


53 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

55 
__BEGIN_DECLS


58 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

59 
__liov˙t
,

60 
__c⁄°
 
iovec
 *
__rvec
,

61 
__riov˙t
,

62 
__Êags
)

63 
__THROW
;

66 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

67 
__liov˙t
,

68 
__c⁄°
 
iovec
 *
__rvec
,

69 
__riov˙t
,

70 
__Êags
)

71 
__THROW
;

73 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

78 
	#FIONCLEX
 0x5450

	)

79 
	#FIOCLEX
 0x5451

	)

80 
	#FIOASYNC
 0x5452

	)

81 
	#TIOCSERCONFIG
 0x5453

	)

82 
	#TIOCSERGWILD
 0x5454

	)

83 
	#TIOCSERSWILD
 0x5455

	)

84 
	#TIOCGLCKTRMIOS
 0x5456

	)

85 
	#TIOCSLCKTRMIOS
 0x5457

	)

86 
	#TIOCSERGSTRUCT
 0x5458

	)

87 
	#TIOCSERGETLSR
 0x5459

	)

88 
	#TIOCSERGETMULTI
 0x545A

	)

89 
	#TIOCSERSETMULTI
 0x545B

	)

91 
	#TIOCMIWAIT
 0x545C

	)

92 
	#TIOCGICOUNT
 0x545D

	)

98 #i‚de‡
FIOQSIZE


99 
	#FIOQSIZE
 0x5460

	)

103 
	#TIOCPKT_DATA
 0

	)

104 
	#TIOCPKT_FLUSHREAD
 1

	)

105 
	#TIOCPKT_FLUSHWRITE
 2

	)

106 
	#TIOCPKT_STOP
 4

	)

107 
	#TIOCPKT_START
 8

	)

108 
	#TIOCPKT_NOSTOP
 16

	)

109 
	#TIOCPKT_DOSTOP
 32

	)

110 
	#TIOCPKT_IOCTL
 64

	)

112 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

4 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 
	mvÆ
[2];

43 } 
	t__kî√l_fsid_t
;

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

31 #ifde‡
__GNUC__


32 
	t__kî√l_loff_t
;

36 
	mvÆ
[2];

37 } 
	t__kî√l_fsid_t
;

39 
	t__kî√l_ﬁd_uid_t
;

40 
	t__kî√l_ﬁd_gid_t
;

41 
__kî√l_uid_t
 
	t__kî√l_uid32_t
;

42 
__kî√l_gid_t
 
	t__kî√l_gid32_t
;

44 
	t__kî√l_ﬁd_dev_t
;

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
156
4044
common/phNfcCommon.h
common/phNfcCompId.h
common/phNfcStatus.h
common/phNfcTypes.h
dnld/phDnldNfc.c
dnld/phDnldNfc.h
dnld/phDnldNfc_Cmd.h
dnld/phDnldNfc_Internal.c
dnld/phDnldNfc_Internal.h
dnld/phDnldNfc_Status.h
dnld/phDnldNfc_Utils.c
dnld/phDnldNfc_Utils.h
dnld/phNxpNciHal_Dnld.c
dnld/phNxpNciHal_Dnld.h
hal/phNxpNciHal.c
hal/phNxpNciHal.h
hal/phNxpNciHal_Kovio.c
hal/phNxpNciHal_Kovio.h
hal/phNxpNciHal_NfcDepSWPrio.c
hal/phNxpNciHal_NfcDepSWPrio.h
hal/phNxpNciHal_dta.c
hal/phNxpNciHal_dta.h
hal/phNxpNciHal_ext.c
hal/phNxpNciHal_ext.h
inc/phNxpNciHal_Adaptation.h
inc/phNxpNciHal_Api.h
inc/phNxpNciHal_SelfTest.h
log/phNxpLog.c
log/phNxpLog.h
nfc_nci.c
self-test/phNxpNciHal_SelfTest.c
tml/phDal4Nfc_messageQueueLib.c
tml/phDal4Nfc_messageQueueLib.h
tml/phOsalNfc_Timer.c
tml/phOsalNfc_Timer.h
tml/phTmlNfc.c
tml/phTmlNfc.h
tml/phTmlNfc_i2c.c
tml/phTmlNfc_i2c.h
utils/phNxpConfig.cpp
utils/phNxpConfig.h
utils/phNxpNciHal_utils.c
utils/phNxpNciHal_utils.h
/usr/include/assert.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/ipc.h
/usr/include/pthread.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/select.h
/usr/include/sys/stat.h
/usr/include/termios.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/ipcbuf.h
/usr/include/bits/confname.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/types.h
/usr/include/sched.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/types.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/ipcbuf.h
/usr/include/asm/ioctls.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/sched.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/sys/cdefs.h
/usr/include/sys/sysmacros.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
